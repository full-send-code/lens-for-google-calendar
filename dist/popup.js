/*! For license information please see popup.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={72:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,l=n?Symbol.for("react.strict_mode"):60108,i=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,k=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case i:case l:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case h:case u:return e;default:return t}}case a:return t}}}function w(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=i,t.StrictMode=l,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||S(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===o},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===h},t.isPortal=function(e){return S(e)===a},t.isProfiler=function(e){return S(e)===i},t.isStrictMode=function(e){return S(e)===l},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===i||e===l||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===b||e.$$typeof===v||e.$$typeof===k||e.$$typeof===y)},t.typeOf=S},146:(e,t,n)=>{var r=n(404),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},l={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},i={};function u(e){return r.isMemo(e)?l:i[e.$$typeof]||a}i[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},i[r.Memo]=l;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var l=c(n);f&&(l=l.concat(f(n)));for(var i=u(t),h=u(n),g=0;g<l.length;++g){var y=l[g];if(!(o[y]||r&&r[y]||h&&h[y]||i&&i[y])){var b=d(n,y);try{s(t,y,b)}catch(e){}}}}return t}},221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(){}var l={d:{f:o,r:function(){throw Error(a(522))},D:o,C:o,L:o,m:o,X:o,S:o,M:o},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=l.p;try{if(u.T=null,l.p=2,e)return e()}finally{u.T=t,l.p=n,l.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,l.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&l.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,o="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?l.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:o}):"script"===n&&l.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:o,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);l.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&l.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);l.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);l.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else l.d.m(e)},t.requestFormReset=function(e){l.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{var r=n(982),a=n(540),o=n(961);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function u(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function s(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(u(e)!==e)throw Error(l(188))}function f(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=f(e)))return t;e=e.sibling}return null}var d=Object.assign,p=Symbol.for("react.element"),m=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),b=Symbol.for("react.profiler"),v=Symbol.for("react.provider"),k=Symbol.for("react.consumer"),S=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),x=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),E=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope");var _=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var T=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var z=Symbol.iterator;function A(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var O=Symbol.for("react.client.reference");function N(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===O?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case b:return"Profiler";case y:return"StrictMode";case x:return"Suspense";case C:return"SuspenseList";case _:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case S:return(e.displayName||"Context")+".Provider";case k:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case E:return null!==(t=e.displayName||null)?t:N(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return N(e(t))}catch(e){}}return null}var L=Array.isArray,$=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,M=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,R={pending:!1,data:null,method:null,action:null},F=[],j=-1;function D(e){return{current:e}}function I(e){0>j||(e.current=F[j],F[j]=null,j--)}function B(e,t){j++,F[j]=e.current,e.current=t}var H=D(null),U=D(null),W=D(null),V=D(null);function q(e,t){switch(B(W,t),B(U,e),B(H,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?af(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=of(t=af(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}I(H),B(H,e)}function K(){I(H),I(U),I(W)}function Q(e){null!==e.memoizedState&&B(V,e);var t=H.current,n=of(t,e.type);t!==n&&(B(U,e),B(H,n))}function G(e){U.current===e&&(I(H),I(U)),V.current===e&&(I(V),Gf._currentValue=R)}var Y=Object.prototype.hasOwnProperty,X=r.unstable_scheduleCallback,J=r.unstable_cancelCallback,Z=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,ae=r.unstable_UserBlockingPriority,oe=r.unstable_NormalPriority,le=r.unstable_LowPriority,ie=r.unstable_IdlePriority,ue=r.log,se=r.unstable_setDisableYieldValue,ce=null,fe=null;function de(e){if("function"==typeof ue&&se(e),fe&&"function"==typeof fe.setStrictMode)try{fe.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(me(e)/he|0)|0},me=Math.log,he=Math.LN2,ge=256,ye=4194304;function be(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ve(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var a=0,o=e.suspendedLanes,l=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!==(r=i&~o)?a=be(r):0!==(l&=i)?a=be(l):n||0!==(n=i&~e)&&(a=be(n)):0!==(i=r&~o)?a=be(i):0!==l?a=be(l):n||0!==(n=r&~e)&&(a=be(n)),0===a?0:0!==t&&t!==a&&0===(t&o)&&((o=a&-a)>=(n=t&-t)||32===o&&4194048&n)?t:a}function ke(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Se(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function xe(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ee(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Pe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function _e(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Te(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function ze(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ae(){var e=M.p;return 0!==e?e:void 0===(e=window.event)?32:cd(e.type)}var Oe=Math.random().toString(36).slice(2),Ne="__reactFiber$"+Oe,Le="__reactProps$"+Oe,$e="__reactContainer$"+Oe,Me="__reactEvents$"+Oe,Re="__reactListeners$"+Oe,Fe="__reactHandles$"+Oe,je="__reactResources$"+Oe,De="__reactMarker$"+Oe;function Ie(e){delete e[Ne],delete e[Le],delete e[Me],delete e[Re],delete e[Fe]}function Be(e){var t=e[Ne];if(t)return t;for(var n=e.parentNode;n;){if(t=n[$e]||n[Ne]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kf(e);null!==e;){if(n=e[Ne])return n;e=kf(e)}return t}n=(e=n).parentNode}return null}function He(e){if(e=e[Ne]||e[$e]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ue(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(l(33))}function We(e){var t=e[je];return t||(t=e[je]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ve(e){e[De]=!0}var qe=new Set,Ke={};function Qe(e,t){Ge(e,t),Ge(e+"Capture",t)}function Ge(e,t){for(Ke[e]=t,e=0;e<t.length;e++)qe.add(t[e])}var Ye,Xe,Je=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},et={};function tt(e,t,n){if(a=t,Y.call(et,a)||!Y.call(Ze,a)&&(Je.test(a)?et[a]=!0:(Ze[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function at(e){if(void 0===Ye)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ye=t&&t[1]||"",Xe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ye+e+Xe}var ot=!1;function lt(e,t){if(!e||ot)return"";ot=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var o=r.DetermineComponentFrameRoot(),l=o[0],i=o[1];if(l&&i){var u=l.split("\n"),s=i.split("\n");for(a=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;a<s.length&&!s[a].includes("DetermineComponentFrameRoot");)a++;if(r===u.length||a===s.length)for(r=u.length-1,a=s.length-1;1<=r&&0<=a&&u[r]!==s[a];)a--;for(;1<=r&&0<=a;r--,a--)if(u[r]!==s[a]){if(1!==r||1!==a)do{if(r--,0>--a||u[r]!==s[a]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{ot=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?at(n):""}function it(e){switch(e.tag){case 26:case 27:case 5:return at(e.type);case 16:return at("Lazy");case 13:return at("Suspense");case 19:return at("SuspenseList");case 0:case 15:return lt(e.type,!1);case 11:return lt(e.type.render,!1);case 1:return lt(e.type,!0);case 31:return at("Activity");default:return""}}function ut(e){try{var t="";do{t+=it(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,a,o,l,i){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.type=l:e.removeAttribute("type"),null!=t?"number"===l?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=t?bt(e,l,st(t)):null!=n?bt(e,l,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=o&&(e.defaultChecked=!!o),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+st(i):e.removeAttribute("name")}function yt(e,t,n,r,a,o,l,i){if(null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.type=o),null!=t||null!=n){if(("submit"===o||"reset"===o)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.name=l)}function bt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function vt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function kt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function St(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(l(92));if(L(r)){if(1<r.length)throw Error(l(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var xt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||xt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Et(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(l(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Ct(e,a,r)}else for(var o in t)t.hasOwnProperty(o)&&Ct(e,o,t[o])}function Pt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _t=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Tt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function zt(e){return Tt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var At=null;function Ot(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Nt=null,Lt=null;function $t(e){var t=He(e);if(t&&(e=t.stateNode)){var n=e[Le]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Le]||null;if(!a)throw Error(l(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":kt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&vt(e,!!n.multiple,t,!1)}}}var Mt=!1;function Rt(e,t,n){if(Mt)return e(t,n);Mt=!0;try{return e(t)}finally{if(Mt=!1,(null!==Nt||null!==Lt)&&(Bs(),Nt&&(t=Nt,e=Lt,Lt=Nt=null,$t(t),e)))for(t=0;t<e.length;t++)$t(e[t])}}function Ft(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Le]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var jt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Dt=!1;if(jt)try{var It={};Object.defineProperty(It,"passive",{get:function(){Dt=!0}}),window.addEventListener("test",It,It),window.removeEventListener("test",It,It)}catch(e){Dt=!1}var Bt=null,Ht=null,Ut=null;function Wt(){if(Ut)return Ut;var e,t,n=Ht,r=n.length,a="value"in Bt?Bt.value:Bt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Ut=a.slice(e,1<t?1-t:void 0)}function Vt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function qt(){return!0}function Kt(){return!1}function Qt(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?qt:Kt,this.isPropagationStopped=Kt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qt)},persist:function(){},isPersistent:qt}),t}var Gt,Yt,Xt,Jt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Qt(Jt),en=d({},Jt,{view:0,detail:0}),tn=Qt(en),nn=d({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Gt=e.screenX-Xt.screenX,Yt=e.screenY-Xt.screenY):Yt=Gt=0,Xt=e),Gt)},movementY:function(e){return"movementY"in e?e.movementY:Yt}}),rn=Qt(nn),an=Qt(d({},nn,{dataTransfer:0})),on=Qt(d({},en,{relatedTarget:0})),ln=Qt(d({},Jt,{animationName:0,elapsedTime:0,pseudoElement:0})),un=Qt(d({},Jt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),sn=Qt(d({},Jt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function mn(){return pn}var hn=Qt(d({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Vt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:mn,charCode:function(e){return"keypress"===e.type?Vt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Vt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Qt(d({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yn=Qt(d({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:mn})),bn=Qt(d({},Jt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=Qt(d({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),kn=Qt(d({},Jt,{newState:0,oldState:0})),Sn=[9,13,27,32],wn=jt&&"CompositionEvent"in window,xn=null;jt&&"documentMode"in document&&(xn=document.documentMode);var Cn=jt&&"TextEvent"in window&&!xn,En=jt&&(!wn||xn&&8<xn&&11>=xn),Pn=String.fromCharCode(32),_n=!1;function Tn(e,t){switch(e){case"keyup":return-1!==Sn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var An=!1,On={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Nn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!On[e.type]:"textarea"===t}function Ln(e,t,n,r){Nt?Lt?Lt.push(r):Lt=[r]:Nt=r,0<(t=Wc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Mn=null;function Rn(e){Rc(e,0)}function Fn(e){if(dt(Ue(e)))return e}function jn(e,t){if("change"===e)return t}var Dn=!1;if(jt){var In;if(jt){var Bn="oninput"in document;if(!Bn){var Hn=document.createElement("div");Hn.setAttribute("oninput","return;"),Bn="function"==typeof Hn.oninput}In=Bn}else In=!1;Dn=In&&(!document.documentMode||9<document.documentMode)}function Un(){$n&&($n.detachEvent("onpropertychange",Wn),Mn=$n=null)}function Wn(e){if("value"===e.propertyName&&Fn(Mn)){var t=[];Ln(t,Mn,e,Ot(e)),Rt(Rn,t)}}function Vn(e,t,n){"focusin"===e?(Un(),Mn=n,($n=t).attachEvent("onpropertychange",Wn)):"focusout"===e&&Un()}function qn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Fn(Mn)}function Kn(e,t){if("click"===e)return Fn(t)}function Qn(e,t){if("input"===e||"change"===e)return Fn(t)}var Gn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Yn(e,t){if(Gn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!Y.call(t,a)||!Gn(e[a],t[a]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Jn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=jt&&"documentMode"in document&&11>=document.documentMode,rr=null,ar=null,or=null,lr=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;lr||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Yn(or,r)||(or=r,0<(r=Wc(ar,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function ur(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}jt&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),mr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),yr=dr("transitionstart"),br=dr("transitioncancel"),vr=dr("transitionend"),kr=new Map,Sr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){kr.set(e,t),Qe(t,[e])}Sr.push("scrollEnd");var xr=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=xr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:ut(t)},xr.set(e,t),t)}return{value:e,source:t,stack:ut(t)}}var Er=[],Pr=0,_r=0;function Tr(){for(var e=Pr,t=_r=Pr=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var a=Er[t];Er[t++]=null;var o=Er[t];if(Er[t++]=null,null!==r&&null!==a){var l=r.pending;null===l?a.next=a:(a.next=l.next,l.next=a),r.pending=a}0!==o&&Nr(n,a,o)}}function zr(e,t,n,r){Er[Pr++]=e,Er[Pr++]=t,Er[Pr++]=n,Er[Pr++]=r,_r|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Ar(e,t,n,r){return zr(e,t,n,r),Lr(e)}function Or(e,t){return zr(e,null,null,t),Lr(e)}function Nr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,o=e.return;null!==o;)o.childLanes|=n,null!==(r=o.alternate)&&(r.childLanes|=n),22===o.tag&&(null===(e=o.stateNode)||1&e._visibility||(a=!0)),e=o,o=o.return;return 3===e.tag?(o=e.stateNode,a&&null!==t&&(a=31-pe(n),null===(r=(e=o.hiddenUpdates)[a])?e[a]=[t]:r.push(t),t.lane=536870912|n),o):null}function Lr(e){if(50<Ns)throw Ns=0,Ls=null,Error(l(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var $r={};function Mr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rr(e,t,n,r){return new Mr(e,t,n,r)}function Fr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function jr(e,t){var n=e.alternate;return null===n?((n=Rr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Dr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Ir(e,t,n,r,a,o){var i=0;if(r=e,"function"==typeof e)Fr(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,H.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case _:return(e=Rr(31,n,t,a)).elementType=_,e.lanes=o,e;case g:return Br(n.children,a,o,t);case y:i=8,a|=24;break;case b:return(e=Rr(12,n,t,2|a)).elementType=b,e.lanes=o,e;case x:return(e=Rr(13,n,t,a)).elementType=x,e.lanes=o,e;case C:return(e=Rr(19,n,t,a)).elementType=C,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case v:case S:i=10;break e;case k:i=9;break e;case w:i=11;break e;case E:i=14;break e;case P:i=16,r=null;break e}i=29,n=Error(l(130,null===e?"null":typeof e,"")),r=null}return(t=Rr(i,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Br(e,t,n,r){return(e=Rr(7,e,r,t)).lanes=n,e}function Hr(e,t,n){return(e=Rr(6,e,null,t)).lanes=n,e}function Ur(e,t,n){return(t=Rr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Wr=[],Vr=0,qr=null,Kr=0,Qr=[],Gr=0,Yr=null,Xr=1,Jr="";function Zr(e,t){Wr[Vr++]=Kr,Wr[Vr++]=qr,qr=e,Kr=t}function ea(e,t,n){Qr[Gr++]=Xr,Qr[Gr++]=Jr,Qr[Gr++]=Yr,Yr=e;var r=Xr;e=Jr;var a=32-pe(r)-1;r&=~(1<<a),n+=1;var o=32-pe(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Xr=1<<32-pe(t)+a|n<<a|r,Jr=o+e}else Xr=1<<o|n<<a|r,Jr=e}function ta(e){null!==e.return&&(Zr(e,1),ea(e,1,0))}function na(e){for(;e===qr;)qr=Wr[--Vr],Wr[Vr]=null,Kr=Wr[--Vr],Wr[Vr]=null;for(;e===Yr;)Yr=Qr[--Gr],Qr[Gr]=null,Jr=Qr[--Gr],Qr[Gr]=null,Xr=Qr[--Gr],Qr[Gr]=null}var ra=null,aa=null,oa=!1,la=null,ia=!1,ua=Error(l(519));function sa(e){throw ha(Cr(Error(l(418,"")),e)),ua}function ca(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ne]=e,t[Le]=r,n){case"dialog":Fc("cancel",t),Fc("close",t);break;case"iframe":case"object":case"embed":Fc("load",t);break;case"video":case"audio":for(n=0;n<$c.length;n++)Fc($c[n],t);break;case"source":Fc("error",t);break;case"img":case"image":case"link":Fc("error",t),Fc("load",t);break;case"details":Fc("toggle",t);break;case"input":Fc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":Fc("invalid",t);break;case"textarea":Fc("invalid",t),St(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Yc(t.textContent,n)?(null!=r.popover&&(Fc("beforetoggle",t),Fc("toggle",t)),null!=r.onScroll&&Fc("scroll",t),null!=r.onScrollEnd&&Fc("scrollend",t),null!=r.onClick&&(t.onclick=Xc),t=!0):t=!1,t||sa(e)}function fa(e){for(ra=e.return;ra;)switch(ra.tag){case 5:case 13:return void(ia=!1);case 27:case 3:return void(ia=!0);default:ra=ra.return}}function da(e){if(e!==ra)return!1;if(!oa)return fa(e),oa=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||lf(e.type,e.memoizedProps)),t=!t),t&&aa&&sa(e),fa(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){aa=bf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}aa=null}}else 27===n?(n=aa,mf(e.type)?(e=vf,vf=null,aa=e):aa=n):aa=ra?bf(e.stateNode.nextSibling):null;return!0}function pa(){aa=ra=null,oa=!1}function ma(){var e=la;return null!==e&&(null===vs?vs=e:vs.push.apply(vs,e),la=null),e}function ha(e){null===la?la=[e]:la.push(e)}var ga=D(null),ya=null,ba=null;function va(e,t,n){B(ga,t._currentValue),t._currentValue=n}function ka(e){e._currentValue=ga.current,I(ga)}function Sa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wa(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=a.dependencies;if(null!==o){var i=a.child;o=o.firstContext;e:for(;null!==o;){var u=o;o=a;for(var s=0;s<t.length;s++)if(u.context===t[s]){o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),Sa(o.return,n,e),r||(i=null);break e}o=u.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(l(341));i.lanes|=n,null!==(o=i.alternate)&&(o.lanes|=n),Sa(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function xa(e,t,n,r){e=null;for(var a=t,o=!1;null!==a;){if(!o)if(524288&a.flags)o=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(l(387));if(null!==(i=i.memoizedProps)){var u=a.type;Gn(a.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(a===V.current){if(null===(i=a.alternate))throw Error(l(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Gf):e=[Gf])}a=a.return}null!==e&&wa(t,e,n,r),t.flags|=262144}function Ca(e){for(e=e.firstContext;null!==e;){if(!Gn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ea(e){ya=e,ba=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Pa(e){return Ta(ya,e)}function _a(e,t){return null===ya&&Ea(e),Ta(e,t)}function Ta(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===ba){if(null===e)throw Error(l(308));ba=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else ba=ba.next=t;return n}var za="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Aa=r.unstable_scheduleCallback,Oa=r.unstable_NormalPriority,Na={$$typeof:S,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function La(){return{controller:new za,data:new Map,refCount:0}}function $a(e){e.refCount--,0===e.refCount&&Aa(Oa,(function(){e.controller.abort()}))}var Ma=null,Ra=0,Fa=0,ja=null;function Da(){if(0===--Ra&&null!==Ma){null!==ja&&(ja.status="fulfilled");var e=Ma;Ma=null,Fa=0,ja=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Ia=$.S;$.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ma){var n=Ma=[];Ra=0,Fa=zc(),ja={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ra++,t.then(Da,Da)}(0,t),null!==Ia&&Ia(e,t)};var Ba=D(null);function Ha(){var e=Ba.current;return null!==e?e:rs.pooledCache}function Ua(e,t){B(Ba,null===t?Ba.current:t.pool)}function Wa(){var e=Ha();return null===e?null:{parent:Na._currentValue,pool:e}}var Va=Error(l(460)),qa=Error(l(474)),Ka=Error(l(542)),Qa={then:function(){}};function Ga(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Ya(){}function Xa(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Ya,Ya),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw eo(e=t.reason),e;default:if("string"==typeof t.status)t.then(Ya,Ya);else{if(null!==(e=rs)&&100<e.shellSuspendCounter)throw Error(l(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw eo(e=t.reason),e}throw Ja=t,Va}}var Ja=null;function Za(){if(null===Ja)throw Error(l(459));var e=Ja;return Ja=null,e}function eo(e){if(e===Va||e===Ka)throw Error(l(483))}var to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ao(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function oo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ns){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Lr(e),Nr(e,null,n),t}return zr(e,r,t,n),Lr(e)}function lo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,_e(e,n)}}function io(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var uo=!1;function so(){if(uo&&null!==ja)throw ja}function co(e,t,n,r){uo=!1;var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,c=s=u=null,i=o;;){var p=-536870913&i.lane,m=p!==i.lane;if(m?(os&p)===p:(r&p)===p){0!==p&&p===Fa&&(uo=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;p=t;var y=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(y,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(y,f,p):h))break e;f=d({},f,p);break e;case 2:to=!0}}null!==(p=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=a.callbacks)?a.callbacks=[p]:m.push(p))}else m={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=f):c=c.next=m,l|=p;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(m=i).next,m.next=null,a.lastBaseUpdate=m,a.shared.pending=null}}null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null===o&&(a.shared.lanes=0),ps|=l,e.lanes=l,e.memoizedState=f}}function fo(e,t){if("function"!=typeof e)throw Error(l(191,e));e.call(t)}function po(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fo(n[e],t)}var mo=D(null),ho=D(0);function go(e,t){B(ho,e=fs),B(mo,t),fs=e|t.baseLanes}function yo(){B(ho,fs),B(mo,mo.current)}function bo(){fs=ho.current,I(mo),I(ho)}var vo=0,ko=null,So=null,wo=null,xo=!1,Co=!1,Eo=!1,Po=0,_o=0,To=null,zo=0;function Ao(){throw Error(l(321))}function Oo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Gn(e[n],t[n]))return!1;return!0}function No(e,t,n,r,a,o){return vo=o,ko=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$.H=null===e||null===e.memoizedState?ql:Kl,Eo=!1,o=n(r,a),Eo=!1,Co&&(o=$o(t,n,r,a)),Lo(e),o}function Lo(e){$.H=Vl;var t=null!==So&&null!==So.next;if(vo=0,wo=So=ko=null,xo=!1,_o=0,To=null,t)throw Error(l(300));null===e||_i||null!==(e=e.dependencies)&&Ca(e)&&(_i=!0)}function $o(e,t,n,r){ko=e;var a=0;do{if(Co&&(To=null),_o=0,Co=!1,25<=a)throw Error(l(301));if(a+=1,wo=So=null,null!=e.updateQueue){var o=e.updateQueue;o.lastEffect=null,o.events=null,o.stores=null,null!=o.memoCache&&(o.memoCache.index=0)}$.H=Ql,o=t(n,r)}while(Co);return o}function Mo(){var e=$.H,t=e.useState()[0];return t="function"==typeof t.then?Bo(t):t,e=e.useState()[0],(null!==So?So.memoizedState:null)!==e&&(ko.flags|=1024),t}function Ro(){var e=0!==Po;return Po=0,e}function Fo(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function jo(e){if(xo){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}xo=!1}vo=0,wo=So=ko=null,Co=!1,_o=Po=0,To=null}function Do(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wo?ko.memoizedState=wo=e:wo=wo.next=e,wo}function Io(){if(null===So){var e=ko.alternate;e=null!==e?e.memoizedState:null}else e=So.next;var t=null===wo?ko.memoizedState:wo.next;if(null!==t)wo=t,So=e;else{if(null===e){if(null===ko.alternate)throw Error(l(467));throw Error(l(310))}e={memoizedState:(So=e).memoizedState,baseState:So.baseState,baseQueue:So.baseQueue,queue:So.queue,next:null},null===wo?ko.memoizedState=wo=e:wo=wo.next=e}return wo}function Bo(e){var t=_o;return _o+=1,null===To&&(To=[]),e=Xa(To,e,t),t=ko,null===(null===wo?t.memoizedState:wo.next)&&(t=t.alternate,$.H=null===t||null===t.memoizedState?ql:Kl),e}function Ho(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Bo(e);if(e.$$typeof===S)return Pa(e)}throw Error(l(438,String(e)))}function Uo(e){var t=null,n=ko.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=ko.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ko.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=T;return t.index++,n}function Wo(e,t){return"function"==typeof t?t(e):t}function Vo(e){return qo(Io(),So,e)}function qo(e,t,n){var r=e.queue;if(null===r)throw Error(l(311));r.lastRenderedReducer=n;var a=e.baseQueue,o=r.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}t.baseQueue=a=o,r.pending=null}if(o=e.baseState,null===a)e.memoizedState=o;else{var u=i=null,s=null,c=t=a.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(os&d)===d:(vo&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Fa&&(f=!0);else{if((vo&p)===p){c=c.next,p===Fa&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=o):s=s.next=d,ko.lanes|=p,ps|=p}d=c.action,Eo&&n(o,d),o=c.hasEagerState?c.eagerState:n(o,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=o):s=s.next=p,ko.lanes|=d,ps|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=o:s.next=u,!Gn(o,e.memoizedState)&&(_i=!0,f&&null!==(n=ja)))throw n;e.memoizedState=o,e.baseState=i,e.baseQueue=s,r.lastRenderedState=o}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ko(e){var t=Io(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);Gn(o,t.memoizedState)||(_i=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Qo(e,t,n){var r=ko,a=Io(),o=oa;if(o){if(void 0===n)throw Error(l(407));n=n()}else n=t();var i=!Gn((So||a).memoizedState,n);if(i&&(a.memoizedState=n,_i=!0),a=a.queue,yl(2048,8,Xo.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==wo&&1&wo.memoizedState.tag){if(r.flags|=2048,ml(9,{destroy:void 0,resource:void 0},Yo.bind(null,r,a,n,t),null),null===rs)throw Error(l(349));o||124&vo||Go(r,t,n)}return n}function Go(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ko.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},ko.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Yo(e,t,n,r){t.value=n,t.getSnapshot=r,Jo(t)&&Zo(e)}function Xo(e,t,n){return n((function(){Jo(t)&&Zo(e)}))}function Jo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Gn(e,n)}catch(e){return!0}}function Zo(e){var t=Or(e,2);null!==t&&Rs(t,0,2)}function el(e){var t=Do();if("function"==typeof e){var n=e;if(e=n(),Eo){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Wo,lastRenderedState:e},t}function tl(e,t,n,r){return e.baseState=n,qo(e,So,"function"==typeof r?r:Wo)}function nl(e,t,n,r,a){if(Hl(e))throw Error(l(485));if(null!==(e=t.action)){var o={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){o.listeners.push(e)}};null!==$.T?n(!0):o.isTransition=!1,r(o),null===(n=t.pending)?(o.next=t.pending=o,rl(t,o)):(o.next=n.next,t.pending=n.next=o)}}function rl(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var o=$.T,l={};$.T=l;try{var i=n(a,r),u=$.S;null!==u&&u(l,i),al(e,t,i)}catch(n){ll(e,t,n)}finally{$.T=o}}else try{al(e,t,o=n(a,r))}catch(n){ll(e,t,n)}}function al(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){ol(e,t,n)}),(function(n){return ll(e,t,n)})):ol(e,t,n)}function ol(e,t,n){t.status="fulfilled",t.value=n,il(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,rl(e,n)))}function ll(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,il(t),t=t.next}while(t!==r)}e.action=null}function il(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ul(e,t){return t}function sl(e,t){if(oa){var n=rs.formState;if(null!==n){e:{var r=ko;if(oa){if(aa){t:{for(var a=aa,o=ia;8!==a.nodeType;){if(!o){a=null;break t}if(null===(a=bf(a.nextSibling))){a=null;break t}}a="F!"===(o=a.data)||"F"===o?a:null}if(a){aa=bf(a.nextSibling),r="F!"===a.data;break e}}sa(r)}r=!1}r&&(t=n[0])}}return(n=Do()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ul,lastRenderedState:t},n.queue=r,n=Dl.bind(null,ko,r),r.dispatch=n,r=el(!1),o=Bl.bind(null,ko,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=Do()).queue=a,n=nl.bind(null,ko,a,o,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function cl(e){return fl(Io(),So,e)}function fl(e,t,n){if(t=qo(e,t,ul)[0],e=Vo(Wo)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Bo(t)}catch(e){if(e===Va)throw Ka;throw e}else r=t;var a=(t=Io()).queue,o=a.dispatch;return n!==t.memoizedState&&(ko.flags|=2048,ml(9,{destroy:void 0,resource:void 0},dl.bind(null,a,n),null)),[r,o,e]}function dl(e,t){e.action=t}function pl(e){var t=Io(),n=So;if(null!==n)return fl(t,n,e);Io(),t=t.memoizedState;var r=(n=Io()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function ml(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=ko.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ko.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hl(){return Io().memoizedState}function gl(e,t,n,r){var a=Do();r=void 0===r?null:r,ko.flags|=e,a.memoizedState=ml(1|t,{destroy:void 0,resource:void 0},n,r)}function yl(e,t,n,r){var a=Io();r=void 0===r?null:r;var o=a.memoizedState.inst;null!==So&&null!==r&&Oo(r,So.memoizedState.deps)?a.memoizedState=ml(t,o,n,r):(ko.flags|=e,a.memoizedState=ml(1|t,o,n,r))}function bl(e,t){gl(8390656,8,e,t)}function vl(e,t){yl(2048,8,e,t)}function kl(e,t){return yl(4,2,e,t)}function Sl(e,t){return yl(4,4,e,t)}function wl(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function xl(e,t,n){n=null!=n?n.concat([e]):null,yl(4,4,wl.bind(null,t,e),n)}function Cl(){}function El(e,t){var n=Io();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Oo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pl(e,t){var n=Io();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Oo(t,r[1]))return r[0];if(r=e(),Eo){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function _l(e,t,n){return void 0===n||1073741824&vo?e.memoizedState=t:(e.memoizedState=n,e=Ms(),ko.lanes|=e,ps|=e,n)}function Tl(e,t,n,r){return Gn(n,t)?n:null!==mo.current?(e=_l(e,n,r),Gn(e,t)||(_i=!0),e):42&vo?(e=Ms(),ko.lanes|=e,ps|=e,t):(_i=!0,e.memoizedState=n)}function zl(e,t,n,r,a){var o=M.p;M.p=0!==o&&8>o?o:8;var l,i,u,s=$.T,c={};$.T=c,Bl(e,!1,t,n);try{var f=a(),d=$.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?Il(e,t,(l=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=l;for(var e=0;e<i.length;e++)(0,i[e])(l)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),$s()):Il(e,t,r,$s())}catch(n){Il(e,t,{then:function(){},status:"rejected",reason:n},$s())}finally{M.p=o,$.T=s}}function Al(){}function Ol(e,t,n,r){if(5!==e.tag)throw Error(l(476));var a=Nl(e).queue;zl(e,a,t,R,null===n?Al:function(){return Ll(e),n(r)})}function Nl(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:R,baseState:R,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Wo,lastRenderedState:R},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Wo,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Ll(e){Il(e,Nl(e).next.queue,{},$s())}function $l(){return Pa(Gf)}function Ml(){return Io().memoizedState}function Rl(){return Io().memoizedState}function Fl(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=$s(),r=oo(t,e=ao(n),n);return null!==r&&(Rs(r,0,n),lo(r,t,n)),t={cache:La()},void(e.payload=t)}t=t.return}}function jl(e,t,n){var r=$s();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Hl(e)?Ul(t,n):null!==(n=Ar(e,t,n,r))&&(Rs(n,0,r),Wl(n,t,r))}function Dl(e,t,n){Il(e,t,n,$s())}function Il(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Hl(e))Ul(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,Gn(i,l))return zr(e,t,a,0),null===rs&&Tr(),!1}catch(e){}if(null!==(n=Ar(e,t,a,r)))return Rs(n,0,r),Wl(n,t,r),!0}return!1}function Bl(e,t,n,r){if(r={lane:2,revertLane:zc(),action:r,hasEagerState:!1,eagerState:null,next:null},Hl(e)){if(t)throw Error(l(479))}else null!==(t=Ar(e,n,r,2))&&Rs(t,0,2)}function Hl(e){var t=e.alternate;return e===ko||null!==t&&t===ko}function Ul(e,t){Co=xo=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Wl(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,_e(e,n)}}var Vl={readContext:Pa,use:Ho,useCallback:Ao,useContext:Ao,useEffect:Ao,useImperativeHandle:Ao,useLayoutEffect:Ao,useInsertionEffect:Ao,useMemo:Ao,useReducer:Ao,useRef:Ao,useState:Ao,useDebugValue:Ao,useDeferredValue:Ao,useTransition:Ao,useSyncExternalStore:Ao,useId:Ao,useHostTransitionStatus:Ao,useFormState:Ao,useActionState:Ao,useOptimistic:Ao,useMemoCache:Ao,useCacheRefresh:Ao},ql={readContext:Pa,use:Ho,useCallback:function(e,t){return Do().memoizedState=[e,void 0===t?null:t],e},useContext:Pa,useEffect:bl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,gl(4194308,4,wl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gl(4194308,4,e,t)},useInsertionEffect:function(e,t){gl(4,2,e,t)},useMemo:function(e,t){var n=Do();t=void 0===t?null:t;var r=e();if(Eo){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Do();if(void 0!==n){var a=n(t);if(Eo){de(!0);try{n(t)}finally{de(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=jl.bind(null,ko,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Do().memoizedState=e},useState:function(e){var t=(e=el(e)).queue,n=Dl.bind(null,ko,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Cl,useDeferredValue:function(e,t){return _l(Do(),e,t)},useTransition:function(){var e=el(!1);return e=zl.bind(null,ko,e.queue,!0,!1),Do().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=ko,a=Do();if(oa){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===rs)throw Error(l(349));124&os||Go(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,bl(Xo.bind(null,r,o,e),[e]),r.flags|=2048,ml(9,{destroy:void 0,resource:void 0},Yo.bind(null,r,o,n,t),null),n},useId:function(){var e=Do(),t=rs.identifierPrefix;if(oa){var n=Jr;t="«"+t+"R"+(n=(Xr&~(1<<32-pe(Xr)-1)).toString(32)+n),0<(n=Po++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=zo++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:$l,useFormState:sl,useActionState:sl,useOptimistic:function(e){var t=Do();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Bl.bind(null,ko,!0,n),n.dispatch=t,[e,t]},useMemoCache:Uo,useCacheRefresh:function(){return Do().memoizedState=Fl.bind(null,ko)}},Kl={readContext:Pa,use:Ho,useCallback:El,useContext:Pa,useEffect:vl,useImperativeHandle:xl,useInsertionEffect:kl,useLayoutEffect:Sl,useMemo:Pl,useReducer:Vo,useRef:hl,useState:function(){return Vo(Wo)},useDebugValue:Cl,useDeferredValue:function(e,t){return Tl(Io(),So.memoizedState,e,t)},useTransition:function(){var e=Vo(Wo)[0],t=Io().memoizedState;return["boolean"==typeof e?e:Bo(e),t]},useSyncExternalStore:Qo,useId:Ml,useHostTransitionStatus:$l,useFormState:cl,useActionState:cl,useOptimistic:function(e,t){return tl(Io(),0,e,t)},useMemoCache:Uo,useCacheRefresh:Rl},Ql={readContext:Pa,use:Ho,useCallback:El,useContext:Pa,useEffect:vl,useImperativeHandle:xl,useInsertionEffect:kl,useLayoutEffect:Sl,useMemo:Pl,useReducer:Ko,useRef:hl,useState:function(){return Ko(Wo)},useDebugValue:Cl,useDeferredValue:function(e,t){var n=Io();return null===So?_l(n,e,t):Tl(n,So.memoizedState,e,t)},useTransition:function(){var e=Ko(Wo)[0],t=Io().memoizedState;return["boolean"==typeof e?e:Bo(e),t]},useSyncExternalStore:Qo,useId:Ml,useHostTransitionStatus:$l,useFormState:pl,useActionState:pl,useOptimistic:function(e,t){var n=Io();return null!==So?tl(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Uo,useCacheRefresh:Rl},Gl=null,Yl=0;function Xl(e){var t=Yl;return Yl+=1,null===Gl&&(Gl=[]),Xa(Gl,e,t)}function Jl(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Zl(e,t){if(t.$$typeof===p)throw Error(l(525));throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ei(e){return(0,e._init)(e._payload)}function ti(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=jr(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Hr(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===g?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===P&&ei(o)===t.type)?(Jl(t=a(t,n.props),n),t.return=e,t):(Jl(t=Ir(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ur(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Br(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Hr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case m:return Jl(n=Ir(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Ur(t,e.mode,n)).return=e,t;case P:return d(e,t=(0,t._init)(t._payload),n)}if(L(t)||A(t))return(t=Br(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Xl(t),n);if(t.$$typeof===S)return d(e,_a(e,t),n);Zl(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case m:return n.key===a?s(e,t,n,r):null;case h:return n.key===a?c(e,t,n,r):null;case P:return p(e,t,n=(a=n._init)(n._payload),r)}if(L(n)||A(n))return null!==a?null:f(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Xl(n),r);if(n.$$typeof===S)return p(e,t,_a(e,n),r);Zl(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case m:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case P:return y(e,t,n,r=(0,r._init)(r._payload),a)}if(L(r)||A(r))return f(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return y(e,t,n,Xl(r),a);if(r.$$typeof===S)return y(e,t,n,_a(t,r),a);Zl(t,r)}return null}function b(u,s,c,f){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case m:e:{for(var v=c.key;null!==s;){if(s.key===v){if((v=c.type)===g){if(7===s.tag){n(u,s.sibling),(f=a(s,c.props.children)).return=u,u=f;break e}}else if(s.elementType===v||"object"==typeof v&&null!==v&&v.$$typeof===P&&ei(v)===s.type){n(u,s.sibling),Jl(f=a(s,c.props),c),f.return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}c.type===g?((f=Br(c.props.children,u.mode,f,c.key)).return=u,u=f):(Jl(f=Ir(c.type,c.key,c.props,null,u.mode,f),c),f.return=u,u=f)}return i(u);case h:e:{for(v=c.key;null!==s;){if(s.key===v){if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){n(u,s.sibling),(f=a(s,c.children||[])).return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}(f=Ur(c,u.mode,f)).return=u,u=f}return i(u);case P:return b(u,s,c=(v=c._init)(c._payload),f)}if(L(c))return function(a,l,i,u){for(var s=null,c=null,f=l,m=l=0,h=null;null!==f&&m<i.length;m++){f.index>m?(h=f,f=null):h=f.sibling;var g=p(a,f,i[m],u);if(null===g){null===f&&(f=h);break}e&&f&&null===g.alternate&&t(a,f),l=o(g,l,m),null===c?s=g:c.sibling=g,c=g,f=h}if(m===i.length)return n(a,f),oa&&Zr(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(l=o(f,l,m),null===c?s=f:c.sibling=f,c=f);return oa&&Zr(a,m),s}for(f=r(f);m<i.length;m++)null!==(h=y(f,a,m,i[m],u))&&(e&&null!==h.alternate&&f.delete(null===h.key?m:h.key),l=o(h,l,m),null===c?s=h:c.sibling=h,c=h);return e&&f.forEach((function(e){return t(a,e)})),oa&&Zr(a,m),s}(u,s,c,f);if(A(c)){if("function"!=typeof(v=A(c)))throw Error(l(150));return function(a,i,u,s){if(null==u)throw Error(l(151));for(var c=null,f=null,m=i,h=i=0,g=null,b=u.next();null!==m&&!b.done;h++,b=u.next()){m.index>h?(g=m,m=null):g=m.sibling;var v=p(a,m,b.value,s);if(null===v){null===m&&(m=g);break}e&&m&&null===v.alternate&&t(a,m),i=o(v,i,h),null===f?c=v:f.sibling=v,f=v,m=g}if(b.done)return n(a,m),oa&&Zr(a,h),c;if(null===m){for(;!b.done;h++,b=u.next())null!==(b=d(a,b.value,s))&&(i=o(b,i,h),null===f?c=b:f.sibling=b,f=b);return oa&&Zr(a,h),c}for(m=r(m);!b.done;h++,b=u.next())null!==(b=y(m,a,h,b.value,s))&&(e&&null!==b.alternate&&m.delete(null===b.key?h:b.key),i=o(b,i,h),null===f?c=b:f.sibling=b,f=b);return e&&m.forEach((function(e){return t(a,e)})),oa&&Zr(a,h),c}(u,s,c=v.call(c),f)}if("function"==typeof c.then)return b(u,s,Xl(c),f);if(c.$$typeof===S)return b(u,s,_a(u,c),f);Zl(u,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==s&&6===s.tag?(n(u,s.sibling),(f=a(s,c)).return=u,u=f):(n(u,s),(f=Hr(c,u.mode,f)).return=u,u=f),i(u)):n(u,s)}return function(e,t,n,r){try{Yl=0;var a=b(e,t,n,r);return Gl=null,a}catch(t){if(t===Va||t===Ka)throw t;var o=Rr(29,t,null,e.mode);return o.lanes=r,o.return=e,o}}}var ni=ti(!0),ri=ti(!1),ai=D(null),oi=null;function li(e){var t=e.alternate;B(ci,1&ci.current),B(ai,e),null===oi&&(null===t||null!==mo.current||null!==t.memoizedState)&&(oi=e)}function ii(e){if(22===e.tag){if(B(ci,ci.current),B(ai,e),null===oi){var t=e.alternate;null!==t&&null!==t.memoizedState&&(oi=e)}}else ui()}function ui(){B(ci,ci.current),B(ai,ai.current)}function si(e){I(ai),oi===e&&(oi=null),I(ci)}var ci=D(0);function fi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||yf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=$s(),a=ao(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=oo(e,a,r))&&(Rs(t,0,r),lo(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=$s(),a=ao(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=oo(e,a,r))&&(Rs(t,0,r),lo(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=$s(),r=ao(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=oo(e,r,n))&&(Rs(t,0,n),lo(t,e,n))}};function mi(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&Yn(n,r)&&Yn(a,o))}function hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=d({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var yi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function bi(e){yi(e)}function vi(e){console.error(e)}function ki(e){yi(e)}function Si(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function wi(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function xi(e,t,n){return(n=ao(n)).tag=3,n.payload={element:null},n.callback=function(){Si(e,t)},n}function Ci(e){return(e=ao(e)).tag=3,e}function Ei(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var o=r.value;e.payload=function(){return a(o)},e.callback=function(){wi(t,n,r)}}var l=n.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){wi(t,n,r),"function"!=typeof a&&(null===Cs?Cs=new Set([this]):Cs.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Pi=Error(l(461)),_i=!1;function Ti(e,t,n,r){t.child=null===e?ri(t,null,n,r):ni(t,e.child,n,r)}function zi(e,t,n,r,a){n=n.render;var o=t.ref;if("ref"in r){var l={};for(var i in r)"ref"!==i&&(l[i]=r[i])}else l=r;return Ea(t),r=No(e,t,n,l,o,a),i=Ro(),null===e||_i?(oa&&i&&ta(t),t.flags|=1,Ti(e,t,r,a),t.child):(Fo(e,t,a),Gi(e,t,a))}function Ai(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Fr(o)||void 0!==o.defaultProps||null!==n.compare?((e=Ir(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Oi(e,t,o,r,a))}if(o=e.child,!Yi(e,a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:Yn)(l,r)&&e.ref===t.ref)return Gi(e,t,a)}return t.flags|=1,(e=jr(o,r)).ref=t.ref,e.return=t,t.child=e}function Oi(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(Yn(o,r)&&e.ref===t.ref){if(_i=!1,t.pendingProps=r=o,!Yi(e,a))return t.lanes=e.lanes,Gi(e,t,a);131072&e.flags&&(_i=!0)}}return Mi(e,t,n,r,a)}function Ni(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(a=t.child=e.child,o=0;null!==a;)o=o|a.lanes|a.childLanes,a=a.sibling;t.childLanes=o&~r}else t.childLanes=0,t.child=null;return Li(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Li(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Ua(0,null!==o?o.cachePool:null),null!==o?go(t,o):yo(),ii(t)}else null!==o?(Ua(0,o.cachePool),go(t,o),ui(),t.memoizedState=null):(null!==e&&Ua(0,null),yo(),ui());return Ti(e,t,a,n),t.child}function Li(e,t,n,r){var a=Ha();return a=null===a?null:{parent:Na._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Ua(0,null),yo(),ii(t),null!==e&&xa(e,t,r,!0),null}function $i(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(l(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Mi(e,t,n,r,a){return Ea(t),n=No(e,t,n,r,void 0,a),r=Ro(),null===e||_i?(oa&&r&&ta(t),t.flags|=1,Ti(e,t,n,a),t.child):(Fo(e,t,a),Gi(e,t,a))}function Ri(e,t,n,r,a,o){return Ea(t),t.updateQueue=null,n=$o(t,r,n,a),Lo(e),r=Ro(),null===e||_i?(oa&&r&&ta(t),t.flags|=1,Ti(e,t,n,o),t.child):(Fo(e,t,o),Gi(e,t,o))}function Fi(e,t,n,r,a){if(Ea(t),null===t.stateNode){var o=$r,l=n.contextType;"object"==typeof l&&null!==l&&(o=Pa(l)),o=new n(r,o),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=pi,t.stateNode=o,o._reactInternals=t,(o=t.stateNode).props=r,o.state=t.memoizedState,o.refs={},no(t),l=n.contextType,o.context="object"==typeof l&&null!==l?Pa(l):$r,o.state=t.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(di(t,n,l,r),o.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(l=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),l!==o.state&&pi.enqueueReplaceState(o,o.state,null),co(t,r,o,a),so(),o.state=t.memoizedState),"function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){o=t.stateNode;var i=t.memoizedProps,u=gi(n,i);o.props=u;var s=o.context,c=n.contextType;l=$r,"object"==typeof c&&null!==c&&(l=Pa(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i||s!==l)&&hi(t,o,r,l),to=!1;var d=t.memoizedState;o.state=d,co(t,r,o,a),so(),s=t.memoizedState,i||d!==s||to?("function"==typeof f&&(di(t,n,f,r),s=t.memoizedState),(u=to||mi(t,n,u,r,d,s,l))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),o.props=r,o.state=s,o.context=l,r=u):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,ro(e,t),c=gi(n,l=t.memoizedProps),o.props=c,f=t.pendingProps,d=o.context,s=n.contextType,u=$r,"object"==typeof s&&null!==s&&(u=Pa(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==f||d!==u)&&hi(t,o,r,u),to=!1,d=t.memoizedState,o.state=d,co(t,r,o,a),so();var p=t.memoizedState;l!==f||d!==p||to||null!==e&&null!==e.dependencies&&Ca(e.dependencies)?("function"==typeof i&&(di(t,n,i,r),p=t.memoizedState),(c=to||mi(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Ca(e.dependencies))?(s||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=u,r=c):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return o=r,$i(e,t),r=!!(128&t.flags),o||r?(o=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:o.render(),t.flags|=1,null!==e&&r?(t.child=ni(t,e.child,null,a),t.child=ni(t,null,n,a)):Ti(e,t,n,a),t.memoizedState=o.state,e=t.child):e=Gi(e,t,a),e}function ji(e,t,n,r){return pa(),t.flags|=256,Ti(e,t,n,r),t.child}var Di={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Ii(e){return{baseLanes:e,cachePool:Wa()}}function Bi(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gs),e}function Hi(e,t,n){var r,a=t.pendingProps,o=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(o=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(oa){if(o?li(t):ui(),oa){var u,s=aa;if(u=s){e:{for(u=s,s=ia;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=bf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Yr?{id:Xr,overflow:Jr}:null,retryLane:536870912,hydrationErrors:null},(u=Rr(18,null,null,0)).stateNode=s,u.return=t,t.child=u,ra=t,aa=null,u=!0):u=!1}u||sa(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return yf(s)?t.lanes=32:t.lanes=536870912,null;si(t)}return s=a.children,a=a.fallback,o?(ui(),s=Wi({mode:"hidden",children:s},o=t.mode),a=Br(a,o,n,null),s.return=t,a.return=t,s.sibling=a,t.child=s,(o=t.child).memoizedState=Ii(n),o.childLanes=Bi(e,r,n),t.memoizedState=Di,a):(li(t),Ui(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(li(t),t.flags&=-257,t=Vi(e,t,n)):null!==t.memoizedState?(ui(),t.child=e.child,t.flags|=128,t=null):(ui(),o=a.fallback,s=t.mode,a=Wi({mode:"visible",children:a.children},s),(o=Br(o,s,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,ni(t,e.child,null,n),(a=t.child).memoizedState=Ii(n),a.childLanes=Bi(e,r,n),t.memoizedState=Di,t=o);else if(li(t),yf(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(l(419))).stack="",a.digest=r,ha({value:a,source:null,stack:null}),t=Vi(e,t,n)}else if(_i||xa(e,t,n,!1),r=0!==(n&e.childLanes),_i||r){if(null!==(r=rs)&&0!==(a=0!==((a=42&(a=n&-n)?1:Te(a))&(r.suspendedLanes|n))?0:a)&&a!==u.retryLane)throw u.retryLane=a,Or(e,a),Rs(r,0,a),Pi;"$?"===s.data||Ks(),t=Vi(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,aa=bf(s.nextSibling),ra=t,oa=!0,la=null,ia=!1,null!==e&&(Qr[Gr++]=Xr,Qr[Gr++]=Jr,Qr[Gr++]=Yr,Xr=e.id,Jr=e.overflow,Yr=t),(t=Ui(t,a.children)).flags|=4096);return t}return o?(ui(),o=a.fallback,s=t.mode,c=(u=e.child).sibling,(a=jr(u,{mode:"hidden",children:a.children})).subtreeFlags=65011712&u.subtreeFlags,null!==c?o=jr(c,o):(o=Br(o,s,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,null===(s=e.child.memoizedState)?s=Ii(n):(null!==(u=s.cachePool)?(c=Na._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Wa(),s={baseLanes:s.baseLanes|n,cachePool:u}),o.memoizedState=s,o.childLanes=Bi(e,r,n),t.memoizedState=Di,a):(li(t),e=(n=e.child).sibling,(n=jr(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Ui(e,t){return(t=Wi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Wi(e,t){return(e=Rr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Vi(e,t,n){return ni(t,e.child,null,n),(e=Ui(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function qi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Sa(e.return,t,n)}function Ki(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Qi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ti(e,t,r.children,n),2&(r=ci.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&qi(e,n,t);else if(19===e.tag)qi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(B(ci,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===fi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ki(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===fi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ki(t,!0,n,null,o);break;case"together":Ki(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Gi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ps|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(xa(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=jr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=jr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yi(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!Ca(e))}function Xi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)_i=!0;else{if(!(Yi(e,n)||128&t.flags))return _i=!1,function(e,t,n){switch(t.tag){case 3:q(t,t.stateNode.containerInfo),va(0,Na,e.memoizedState.cache),pa();break;case 27:case 5:Q(t);break;case 4:q(t,t.stateNode.containerInfo);break;case 10:va(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(li(t),t.flags|=128,null):0!==(n&t.child.childLanes)?Hi(e,t,n):(li(t),null!==(e=Gi(e,t,n))?e.sibling:null);li(t);break;case 19:var a=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(xa(e,t,n,!1),r=0!==(n&t.childLanes)),a){if(r)return Qi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),B(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,Ni(e,t,n);case 24:va(0,Na,e.memoizedState.cache)}return Gi(e,t,n)}(e,t,n);_i=!!(131072&e.flags)}else _i=!1,oa&&1048576&t.flags&&ea(t,Kr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===w){t.tag=11,t=zi(null,t,r,e,n);break e}if(a===E){t.tag=14,t=Ai(null,t,r,e,n);break e}}throw t=N(r)||r,Error(l(306,t,""))}Fr(r)?(e=gi(r,e),t.tag=1,t=Fi(null,t,r,e,n)):(t.tag=0,t=Mi(null,t,r,e,n))}return t;case 0:return Mi(e,t,t.type,t.pendingProps,n);case 1:return Fi(e,t,r=t.type,a=gi(r,t.pendingProps),n);case 3:e:{if(q(t,t.stateNode.containerInfo),null===e)throw Error(l(387));r=t.pendingProps;var o=t.memoizedState;a=o.element,ro(e,t),co(t,r,null,n);var i=t.memoizedState;if(r=i.cache,va(0,Na,r),r!==o.cache&&wa(t,[Na],n,!0),so(),r=i.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=ji(e,t,r,n);break e}if(r!==a){ha(a=Cr(Error(l(424)),t)),t=ji(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,aa=bf(e.firstChild),ra=t,oa=!0,la=null,ia=!0,n=ri(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===a){t=Gi(e,t,n);break e}Ti(e,t,r,n)}t=t.child}return t;case 26:return $i(e,t),null===e?(n=zf(t.type,null,t.pendingProps,null))?t.memoizedState=n:oa||(n=t.type,e=t.pendingProps,(r=rf(W.current).createElement(n))[Ne]=t,r[Le]=e,ef(r,n,e),Ve(r),t.stateNode=r):t.memoizedState=zf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return Q(t),null===e&&oa&&(r=t.stateNode=Sf(t.type,t.pendingProps,W.current),ra=t,ia=!0,a=aa,mf(t.type)?(vf=a,aa=bf(r.firstChild)):aa=a),Ti(e,t,t.pendingProps.children,n),$i(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&oa&&((a=r=aa)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[De])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(o=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(o!==a.rel||e.getAttribute("href")!==(null==a.href||""===a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((o=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&o&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var o=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===o)return e}if(null===(e=bf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,ia))?(t.stateNode=r,ra=t,aa=bf(r.firstChild),ia=!1,a=!0):a=!1),a||sa(t)),Q(t),a=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,r=o.children,lf(a,o)?r=null:null!==i&&lf(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=No(e,t,Mo,null,null,n),Gf._currentValue=a),$i(e,t),Ti(e,t,r,n),t.child;case 6:return null===e&&oa&&((e=n=aa)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=bf(e.nextSibling)))return null}return e}(n,t.pendingProps,ia))?(t.stateNode=n,ra=t,aa=null,e=!0):e=!1),e||sa(t)),null;case 13:return Hi(e,t,n);case 4:return q(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ni(t,null,r,n):Ti(e,t,r,n),t.child;case 11:return zi(e,t,t.type,t.pendingProps,n);case 7:return Ti(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ti(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,va(0,t.type,r.value),Ti(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Ea(t),r=r(a=Pa(a)),t.flags|=1,Ti(e,t,r,n),t.child;case 14:return Ai(e,t,t.type,t.pendingProps,n);case 15:return Oi(e,t,t.type,t.pendingProps,n);case 19:return Qi(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Wi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=jr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ni(e,t,n);case 24:return Ea(t),r=Pa(Na),null===e?(null===(a=Ha())&&(a=rs,o=La(),a.pooledCache=o,o.refCount++,null!==o&&(a.pooledCacheLanes|=n),a=o),t.memoizedState={parent:r,cache:a},no(t),va(0,Na,a)):(0!==(e.lanes&n)&&(ro(e,t),co(t,null,null,n),so()),a=e.memoizedState,o=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),va(0,Na,r)):(r=o.cache,va(0,Na,r),r!==a.cache&&wa(t,[Na],n,!0))),Ti(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(l(156,t.tag))}function Ji(e){e.flags|=4}function Zi(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Hf(t)){if(null!==(t=ai.current)&&((4194048&os)===os?null!==oi:(62914560&os)!==os&&!(536870912&os)||t!==oi))throw Ja=Qa,qa;e.flags|=8192}}function eu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?xe():536870912,e.lanes|=t,ys|=t)}function tu(e,t){if(!oa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ru(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return nu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),ka(Na),K(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(da(t)?Ji(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ma())),nu(t),null;case 26:return n=t.memoizedState,null===e?(Ji(t),null!==n?(nu(t),Zi(t,n)):(nu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Ji(t),nu(t),Zi(t,n)):(nu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Ji(t),nu(t),t.flags&=-16777217),null;case 27:G(t),n=W.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return nu(t),null}e=H.current,da(t)?ca(t):(e=Sf(a,r,n),t.stateNode=e,Ji(t))}return nu(t),null;case 5:if(G(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return nu(t),null}if(e=H.current,da(t))ca(t);else{switch(a=rf(W.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Ne]=t,e[Le]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(ef(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Ji(t)}}return nu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(e=W.current,da(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=ra))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Ne]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Yc(e.nodeValue,n)))||sa(t)}else(e=rf(e).createTextNode(r))[Ne]=t,t.stateNode=e}return nu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(l(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(l(317));a[Ne]=t}else pa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;nu(t),a=!1}else a=ma(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=a),a=!0;if(!a)return 256&t.flags?(si(t),t):(si(t),null)}if(si(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var o=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(o=r.memoizedState.cachePool.pool),o!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),eu(t,t.updateQueue),nu(t),null;case 4:return K(),null===e&&Ic(t.stateNode.containerInfo),nu(t),null;case 10:return ka(t.type),nu(t),null;case 19:if(I(ci),null===(a=t.memoizedState))return nu(t),null;if(r=!!(128&t.flags),null===(o=a.rendering))if(r)tu(a,!1);else{if(0!==ds||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=fi(e))){for(t.flags|=128,tu(a,!1),e=o.updateQueue,t.updateQueue=e,eu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Dr(n,e),n=n.sibling;return B(ci,1&ci.current|2),t.child}e=e.sibling}null!==a.tail&&te()>ws&&(t.flags|=128,r=!0,tu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=fi(o))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,eu(t,e),tu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!o.alternate&&!oa)return nu(t),null}else 2*te()-a.renderingStartTime>ws&&536870912!==n&&(t.flags|=128,r=!0,tu(a,!1),t.lanes=4194304);a.isBackwards?(o.sibling=t.child,t.child=o):(null!==(e=a.last)?e.sibling=o:t.child=o,a.last=o)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=te(),t.sibling=null,e=ci.current,B(ci,r?1&e|2:1&e),t):(nu(t),null);case 22:case 23:return si(t),bo(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(nu(t),6&t.subtreeFlags&&(t.flags|=8192)):nu(t),null!==(n=t.updateQueue)&&eu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&I(Ba),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),ka(Na),nu(t),null;case 25:case 30:return null}throw Error(l(156,t.tag))}function au(e,t){switch(na(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ka(Na),K(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return G(t),null;case 13:if(si(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return I(ci),null;case 4:return K(),null;case 10:return ka(t.type),null;case 22:case 23:return si(t),bo(),null!==e&&I(Ba),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return ka(Na),null;default:return null}}function ou(e,t){switch(na(t),t.tag){case 3:ka(Na),K();break;case 26:case 27:case 5:G(t);break;case 4:K();break;case 13:si(t);break;case 19:I(ci);break;case 10:ka(t.type);break;case 22:case 23:si(t),bo(),null!==e&&I(Ba);break;case 24:ka(Na)}}function lu(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var o=n.create,l=n.inst;r=o(),l.destroy=r}n=n.next}while(n!==a)}}catch(e){cc(t,t.return,e)}}function iu(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var o=a.next;r=o;do{if((r.tag&e)===e){var l=r.inst,i=l.destroy;if(void 0!==i){l.destroy=void 0,a=t;var u=n,s=i;try{s()}catch(e){cc(a,u,e)}}}r=r.next}while(r!==o)}}catch(e){cc(t,t.return,e)}}function uu(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{po(t,n)}catch(t){cc(e,e.return,t)}}}function su(e,t,n){n.props=gi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cu(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function fu(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function du(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function pu(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,o=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Jc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":o=m;break;case"name":a=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(l(137,t));break;default:m!==d&&Jc(e,t,p,m,r,d)}}return void gt(e,i,u,s,c,f,o,a);case"select":for(o in m=i=u=p=null,n)if(s=n[o],n.hasOwnProperty(o)&&null!=s)switch(o){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(o)||Jc(e,t,o,null,r,s)}for(a in r)if(o=r[a],s=n[a],r.hasOwnProperty(a)&&(null!=o||null!=s))switch(a){case"value":p=o;break;case"defaultValue":u=o;break;case"multiple":i=o;default:o!==s&&Jc(e,t,a,o,r,s)}return t=u,n=i,r=m,void(null!=p?vt(e,!!n,p,!1):!!r!=!!n&&(null!=t?vt(e,!!n,t,!0):vt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(a=n[u],n.hasOwnProperty(u)&&null!=a&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Jc(e,t,u,null,r,a)}for(i in r)if(a=r[i],o=n[i],r.hasOwnProperty(i)&&(null!=a||null!=o))switch(i){case"value":p=a;break;case"defaultValue":m=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(l(91));break;default:a!==o&&Jc(e,t,i,a,r,o)}return void kt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Jc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Jc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Jc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(l(137,t));break;default:Jc(e,t,c,p,r,m)}return;default:if(Pt(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Zc(e,t,y,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Zc(e,t,f,p,r,m);return}}for(var b in n)p=n[b],n.hasOwnProperty(b)&&null!=p&&!r.hasOwnProperty(b)&&Jc(e,t,b,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Jc(e,t,d,p,r,m)}(r,e.type,n,t),r[Le]=t}catch(t){cc(e,e.return,t)}}function mu(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&mf(e.type)||4===e.tag}function hu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||mu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&mf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xc));else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function yu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(yu(e,t,n),e=e.sibling;null!==e;)yu(e,t,n),e=e.sibling}function bu(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,a=t.attributes;a.length;)t.removeAttributeNode(a[0]);ef(t,r,n),t[Ne]=e,t[Le]=n}catch(t){cc(e,e.return,t)}}var vu=!1,ku=!1,Su=!1,wu="function"==typeof WeakSet?WeakSet:Set,xu=null;function Cu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Fu(e,n),4&r&&lu(5,n);break;case 1:if(Fu(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var a=gi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&uu(n),512&r&&cu(n,n.return);break;case 3:if(Fu(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{po(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&bu(n);case 26:case 5:Fu(e,n),null===t&&4&r&&du(n),512&r&&cu(n,n.return);break;case 12:Fu(e,n);break;case 13:Fu(e,n),4&r&&Au(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=mc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||vu)){t=null!==t&&null!==t.memoizedState||ku,a=vu;var o=ku;vu=r,(ku=t)&&!o?Du(e,n,!!(8772&n.subtreeFlags)):Fu(e,n),vu=a,ku=o}break;case 30:break;default:Fu(e,n)}}function Eu(e){var t=e.alternate;null!==t&&(e.alternate=null,Eu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ie(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Pu=null,_u=!1;function Tu(e,t,n){for(n=n.child;null!==n;)zu(e,t,n),n=n.sibling}function zu(e,t,n){if(fe&&"function"==typeof fe.onCommitFiberUnmount)try{fe.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:ku||fu(n,t),Tu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:ku||fu(n,t);var r=Pu,a=_u;mf(n.type)&&(Pu=n.stateNode,_u=!1),Tu(e,t,n),wf(n.stateNode),Pu=r,_u=a;break;case 5:ku||fu(n,t);case 6:if(r=Pu,a=_u,Pu=null,Tu(e,t,n),_u=a,null!==(Pu=r))if(_u)try{(9===Pu.nodeType?Pu.body:"HTML"===Pu.nodeName?Pu.ownerDocument.body:Pu).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{Pu.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==Pu&&(_u?(hf(9===(e=Pu).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Td(e)):hf(Pu,n.stateNode));break;case 4:r=Pu,a=_u,Pu=n.stateNode.containerInfo,_u=!0,Tu(e,t,n),Pu=r,_u=a;break;case 0:case 11:case 14:case 15:ku||iu(2,n,t),ku||iu(4,n,t),Tu(e,t,n);break;case 1:ku||(fu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&su(n,t,r)),Tu(e,t,n);break;case 21:Tu(e,t,n);break;case 22:ku=(r=ku)||null!==n.memoizedState,Tu(e,t,n),ku=r;break;default:Tu(e,t,n)}}function Au(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Td(e)}catch(e){cc(t,t.return,e)}}function Ou(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new wu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new wu),t;default:throw Error(l(435,e.tag))}}(e);t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function Nu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],o=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:if(mf(u.type)){Pu=u.stateNode,_u=!1;break e}break;case 5:Pu=u.stateNode,_u=!1;break e;case 3:case 4:Pu=u.stateNode.containerInfo,_u=!0;break e}u=u.return}if(null===Pu)throw Error(l(160));zu(o,i,a),Pu=null,_u=!1,null!==(o=a.alternate)&&(o.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)$u(t,e),t=t.sibling}var Lu=null;function $u(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Nu(t,e),Mu(e),4&r&&(iu(3,e,e.return),lu(3,e),iu(5,e,e.return));break;case 1:Nu(t,e),Mu(e),512&r&&(ku||null===n||fu(n,n.return)),64&r&&vu&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=Lu;if(Nu(t,e),Mu(e),512&r&&(ku||null===n||fu(n,n.return)),4&r){var o=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(o=a.getElementsByTagName("title")[0])||o[De]||o[Ne]||"http://www.w3.org/2000/svg"===o.namespaceURI||o.hasAttribute("itemprop"))&&(o=a.createElement(r),a.head.insertBefore(o,a.querySelector("head > title"))),ef(o,r,n),o[Ne]=e,Ve(o),r=o;break e;case"link":var i=If("link","href",a).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((o=i[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}ef(o=a.createElement(r),r,n),a.head.appendChild(o);break;case"meta":if(i=If("meta","content",a).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((o=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}ef(o=a.createElement(r),r,n),a.head.appendChild(o);break;default:throw Error(l(468,r))}o[Ne]=e,Ve(o),r=o}e.stateNode=r}else Bf(a,e.type,e.stateNode);else e.stateNode=Mf(a,r,e.memoizedProps);else o!==r?(null===o?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):o.count--,null===r?Bf(a,e.type,e.stateNode):Mf(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&pu(e,e.memoizedProps,n.memoizedProps)}break;case 27:Nu(t,e),Mu(e),512&r&&(ku||null===n||fu(n,n.return)),null!==n&&4&r&&pu(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Nu(t,e),Mu(e),512&r&&(ku||null===n||fu(n,n.return)),32&e.flags){a=e.stateNode;try{wt(a,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&pu(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Su=!0);break;case 6:if(Nu(t,e),Mu(e),4&r){if(null===e.stateNode)throw Error(l(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(Df=null,a=Lu,Lu=Ef(t.containerInfo),Nu(t,e),Lu=a,Mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Td(t.containerInfo)}catch(t){cc(e,e.return,t)}Su&&(Su=!1,Ru(e));break;case 4:r=Lu,Lu=Ef(e.stateNode.containerInfo),Nu(t,e),Mu(e),Lu=r;break;case 12:default:Nu(t,e),Mu(e);break;case 13:Nu(t,e),Mu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(Ss=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ou(e,r));break;case 22:a=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=vu,f=ku;if(vu=c||a,ku=f||s,Nu(t,e),ku=f,vu=c,Mu(e),8192&r)e:for(t=e.stateNode,t._visibility=a?-2&t._visibility:1|t._visibility,a&&(null===n||s||vu||ku||ju(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(o=s.stateNode,a)"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=a?"":s.memoizedProps}catch(e){cc(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Ou(e,n));break;case 19:Nu(t,e),Mu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ou(e,r));case 30:case 21:}}function Mu(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(mu(r)){n=r;break}r=r.return}if(null==n)throw Error(l(160));switch(n.tag){case 27:var a=n.stateNode;yu(e,hu(e),a);break;case 5:var o=n.stateNode;32&n.flags&&(wt(o,""),n.flags&=-33),yu(e,hu(e),o);break;case 3:case 4:var i=n.stateNode.containerInfo;gu(e,hu(e),i);break;default:throw Error(l(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Ru(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Ru(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Fu(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cu(e,t.alternate,t),t=t.sibling}function ju(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:iu(4,t,t.return),ju(t);break;case 1:fu(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&su(t,t.return,n),ju(t);break;case 27:wf(t.stateNode);case 26:case 5:fu(t,t.return),ju(t);break;case 22:null===t.memoizedState&&ju(t);break;default:ju(t)}e=e.sibling}}function Du(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,o=t,l=o.flags;switch(o.tag){case 0:case 11:case 15:Du(a,o,n),lu(4,o);break;case 1:if(Du(a,o,n),"function"==typeof(a=(r=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(a=(r=o).updateQueue)){var i=r.stateNode;try{var u=a.shared.hiddenCallbacks;if(null!==u)for(a.shared.hiddenCallbacks=null,a=0;a<u.length;a++)fo(u[a],i)}catch(e){cc(r,r.return,e)}}n&&64&l&&uu(o),cu(o,o.return);break;case 27:bu(o);case 26:case 5:Du(a,o,n),n&&null===r&&4&l&&du(o),cu(o,o.return);break;case 12:Du(a,o,n);break;case 13:Du(a,o,n),n&&4&l&&Au(a,o);break;case 22:null===o.memoizedState&&Du(a,o,n),cu(o,o.return);break;case 30:break;default:Du(a,o,n)}t=t.sibling}}function Iu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&$a(n))}function Bu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&$a(e))}function Hu(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Uu(e,t,n,r),t=t.sibling}function Uu(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Hu(e,t,n,r),2048&a&&lu(9,t);break;case 1:case 13:default:Hu(e,t,n,r);break;case 3:Hu(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&$a(e)));break;case 12:if(2048&a){Hu(e,t,n,r),e=t.stateNode;try{var o=t.memoizedProps,l=o.id,i=o.onPostCommit;"function"==typeof i&&i(l,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else Hu(e,t,n,r);break;case 23:break;case 22:o=t.stateNode,l=t.alternate,null!==t.memoizedState?2&o._visibility?Hu(e,t,n,r):Vu(e,t):2&o._visibility?Hu(e,t,n,r):(o._visibility|=2,Wu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&Iu(l,t);break;case 24:Hu(e,t,n,r),2048&a&&Bu(t.alternate,t)}}function Wu(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var o=e,l=t,i=n,u=r,s=l.flags;switch(l.tag){case 0:case 11:case 15:Wu(o,l,i,u,a),lu(8,l);break;case 23:break;case 22:var c=l.stateNode;null!==l.memoizedState?2&c._visibility?Wu(o,l,i,u,a):Vu(o,l):(c._visibility|=2,Wu(o,l,i,u,a)),a&&2048&s&&Iu(l.alternate,l);break;case 24:Wu(o,l,i,u,a),a&&2048&s&&Bu(l.alternate,l);break;default:Wu(o,l,i,u,a)}t=t.sibling}}function Vu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Vu(n,r),2048&a&&Iu(r.alternate,r);break;case 24:Vu(n,r),2048&a&&Bu(r.alternate,r);break;default:Vu(n,r)}t=t.sibling}}var qu=8192;function Ku(e){if(e.subtreeFlags&qu)for(e=e.child;null!==e;)Qu(e),e=e.sibling}function Qu(e){switch(e.tag){case 26:Ku(e),e.flags&qu&&null!==e.memoizedState&&function(e,t,n){if(null===Uf)throw Error(l(475));var r=Uf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=Af(n.href),o=e.querySelector(Of(a));if(o)return null!==(e=o._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Vf.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=o,void Ve(o);o=e.ownerDocument||e,n=Nf(n),(a=xf.get(a))&&Ff(n,a),Ve(o=o.createElement("link"));var i=o;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ef(o,"link",n),t.instance=o}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Vf.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Lu,e.memoizedState,e.memoizedProps);break;case 5:default:Ku(e);break;case 3:case 4:var t=Lu;Lu=Ef(e.stateNode.containerInfo),Ku(e),Lu=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=qu,qu=16777216,Ku(e),qu=t):Ku(e))}}function Gu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Yu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];xu=r,Zu(r,e)}Gu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Xu(e),e=e.sibling}function Xu(e){switch(e.tag){case 0:case 11:case 15:Yu(e),2048&e.flags&&iu(9,e,e.return);break;case 3:case 12:default:Yu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Ju(e)):Yu(e)}}function Ju(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];xu=r,Zu(r,e)}Gu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:iu(8,t,t.return),Ju(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Ju(t));break;default:Ju(t)}e=e.sibling}}function Zu(e,t){for(;null!==xu;){var n=xu;switch(n.tag){case 0:case 11:case 15:iu(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:$a(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,xu=r;else e:for(n=e;null!==xu;){var a=(r=xu).sibling,o=r.return;if(Eu(r),r===n){xu=null;break e}if(null!==a){a.return=o,xu=a;break e}xu=o}}}var es={getCacheForType:function(e){var t=Pa(Na),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},ts="function"==typeof WeakMap?WeakMap:Map,ns=0,rs=null,as=null,os=0,ls=0,is=null,us=!1,ss=!1,cs=!1,fs=0,ds=0,ps=0,ms=0,hs=0,gs=0,ys=0,bs=null,vs=null,ks=!1,Ss=0,ws=1/0,xs=null,Cs=null,Es=0,Ps=null,_s=null,Ts=0,zs=0,As=null,Os=null,Ns=0,Ls=null;function $s(){return 2&ns&&0!==os?os&-os:null!==$.T?0!==Fa?Fa:zc():Ae()}function Ms(){0===gs&&(gs=536870912&os&&!oa?536870912:we());var e=ai.current;return null!==e&&(e.flags|=32),gs}function Rs(e,t,n){(e!==rs||2!==ls&&9!==ls)&&null===e.cancelPendingCommit||(Us(e,0),Is(e,os,gs,!1)),Ee(e,n),2&ns&&e===rs||(e===rs&&(!(2&ns)&&(ms|=n),4===ds&&Is(e,os,gs,!1)),wc(e))}function Fs(e,t,n){if(6&ns)throw Error(l(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||ke(e,t),a=r?function(e,t){var n=ns;ns|=2;var r=Vs(),a=qs();rs!==e||os!==t?(xs=null,ws=te()+500,Us(e,t)):ss=ke(e,t);e:for(;;)try{if(0!==ls&&null!==as){t=as;var o=is;t:switch(ls){case 1:ls=0,is=null,Zs(e,t,o,1);break;case 2:case 9:if(Ga(o)){ls=0,is=null,Js(t);break}t=function(){2!==ls&&9!==ls||rs!==e||(ls=7),wc(e)},o.then(t,t);break e;case 3:ls=7;break e;case 4:ls=5;break e;case 7:Ga(o)?(ls=0,is=null,Js(t)):(ls=0,is=null,Zs(e,t,o,7));break;case 5:var i=null;switch(as.tag){case 26:i=as.memoizedState;case 5:case 27:var u=as;if(!i||Hf(i)){ls=0,is=null;var s=u.sibling;if(null!==s)as=s;else{var c=u.return;null!==c?(as=c,ec(c)):as=null}break t}}ls=0,is=null,Zs(e,t,o,5);break;case 6:ls=0,is=null,Zs(e,t,o,6);break;case 8:Hs(),ds=6;break e;default:throw Error(l(462))}}Ys();break}catch(t){Ws(e,t)}return ba=ya=null,$.H=r,$.A=a,ns=n,null!==as?0:(rs=null,os=0,Tr(),ds)}(e,t):Qs(e,t,!0),o=r;;){if(0===a){ss&&!r&&Is(e,t,0,!1);break}if(n=e.current.alternate,!o||Ds(n)){if(2===a){if(o=t,e.errorRecoveryDisabledLanes&o)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;a=bs;var s=u.current.memoizedState.isDehydrated;if(s&&(Us(u,i).flags|=256),2!==(i=Qs(u,i,!1))){if(cs&&!s){u.errorRecoveryDisabledLanes|=o,ms|=o,a=4;break e}o=vs,vs=a,null!==o&&(null===vs?vs=o:vs.push.apply(vs,o))}a=i}if(o=!1,2!==a)continue}}if(1===a){Us(e,0),Is(e,t,0,!0);break}e:{switch(r=e,o=a){case 0:case 1:throw Error(l(345));case 4:if((4194048&t)!==t)break;case 6:Is(r,t,gs,!us);break e;case 2:vs=null;break;case 3:case 5:break;default:throw Error(l(329))}if((62914560&t)===t&&10<(a=Ss+300-te())){if(Is(r,t,gs,!us),0!==ve(r,0,!0))break e;r.timeoutHandle=sf(js.bind(null,r,n,vs,xs,ks,t,gs,ms,ys,us,o,2,-0,0),a)}else js(r,n,vs,xs,ks,t,gs,ms,ys,us,o,0,-0,0)}break}a=Qs(e,t,!1),o=!1}wc(e)}function js(e,t,n,r,a,o,i,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(Uf={stylesheets:null,count:0,unsuspend:Wf},Qu(t),null!==(d=function(){if(null===Uf)throw Error(l(475));var e=Uf;return e.stylesheets&&0===e.count&&Kf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Kf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(nc.bind(null,e,t,o,n,r,a,i,u,s,f,1,p,m)),void Is(e,o,i,!c);nc(e,t,o,n,r,a,i,u,s)}function Ds(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!Gn(o(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Is(e,t,n,r){t&=~hs,t&=~ms,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var o=31-pe(a),l=1<<o;r[o]=-1,a&=~l}0!==n&&Pe(e,n,t)}function Bs(){return!!(6&ns)||(xc(0,!1),!1)}function Hs(){if(null!==as){if(0===ls)var e=as.return;else ba=ya=null,jo(e=as),Gl=null,Yl=0,e=as;for(;null!==e;)ou(e.alternate,e),e=e.return;as=null}}function Us(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,cf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Hs(),rs=e,as=n=jr(e.current,null),os=t,ls=0,is=null,us=!1,ss=ke(e,t),cs=!1,ys=gs=hs=ms=ps=ds=0,vs=bs=null,ks=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-pe(r),o=1<<a;t|=e[a],r&=~o}return fs=t,Tr(),n}function Ws(e,t){ko=null,$.H=Vl,t===Va||t===Ka?(t=Za(),ls=3):t===qa?(t=Za(),ls=4):ls=t===Pi?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,is=t,null===as&&(ds=1,Si(e,Cr(t,e.current)))}function Vs(){var e=$.H;return $.H=Vl,null===e?Vl:e}function qs(){var e=$.A;return $.A=es,e}function Ks(){ds=4,us||(4194048&os)!==os&&null!==ai.current||(ss=!0),!(134217727&ps)&&!(134217727&ms)||null===rs||Is(rs,os,gs,!1)}function Qs(e,t,n){var r=ns;ns|=2;var a=Vs(),o=qs();rs===e&&os===t||(xs=null,Us(e,t)),t=!1;var l=ds;e:for(;;)try{if(0!==ls&&null!==as){var i=as,u=is;switch(ls){case 8:Hs(),l=6;break e;case 3:case 2:case 9:case 6:null===ai.current&&(t=!0);var s=ls;if(ls=0,is=null,Zs(e,i,u,s),n&&ss){l=0;break e}break;default:s=ls,ls=0,is=null,Zs(e,i,u,s)}}Gs(),l=ds;break}catch(t){Ws(e,t)}return t&&e.shellSuspendCounter++,ba=ya=null,ns=r,$.H=a,$.A=o,null===as&&(rs=null,os=0,Tr()),l}function Gs(){for(;null!==as;)Xs(as)}function Ys(){for(;null!==as&&!Z();)Xs(as)}function Xs(e){var t=Xi(e.alternate,e,fs);e.memoizedProps=e.pendingProps,null===t?ec(e):as=t}function Js(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Ri(n,t,t.pendingProps,t.type,void 0,os);break;case 11:t=Ri(n,t,t.pendingProps,t.type.render,t.ref,os);break;case 5:jo(t);default:ou(n,t),t=Xi(n,t=as=Dr(t,fs),fs)}e.memoizedProps=e.pendingProps,null===t?ec(e):as=t}function Zs(e,t,n,r){ba=ya=null,jo(t),Gl=null,Yl=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&xa(t,n,a,!0),null!==(n=ai.current)){switch(n.tag){case 13:return null===oi?Ks():null===n.alternate&&0===ds&&(ds=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===Qa?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),fc(e,r,a)),!1;case 22:return n.flags|=65536,r===Qa?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),fc(e,r,a)),!1}throw Error(l(435,n.tag))}return fc(e,r,a),Ks(),!1}if(oa)return null!==(t=ai.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==ua&&ha(Cr(e=Error(l(422),{cause:r}),n))):(r!==ua&&ha(Cr(t=Error(l(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Cr(r,n),io(e,a=xi(e.stateNode,r,a)),4!==ds&&(ds=2)),!1;var o=Error(l(520),{cause:r});if(o=Cr(o,n),null===bs?bs=[o]:bs.push(o),4!==ds&&(ds=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,io(n,e=xi(n.stateNode,r,e)),!1;case 1:if(t=n.type,o=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===o||"function"!=typeof o.componentDidCatch||null!==Cs&&Cs.has(o))))return n.flags|=65536,a&=-a,n.lanes|=a,Ei(a=Ci(a),e,n,r),io(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,os))return ds=1,Si(e,Cr(n,e.current)),void(as=null)}catch(t){if(null!==a)throw as=a,t;return ds=1,Si(e,Cr(n,e.current)),void(as=null)}32768&t.flags?(oa||1===r?e=!0:ss||536870912&os?e=!1:(us=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ai.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,us);e=t.return;var n=ru(t.alternate,t,fs);if(null!==n)return void(as=n);if(null!==(t=t.sibling))return void(as=t);as=t=e}while(null!==t);0===ds&&(ds=5)}function tc(e,t){do{var n=au(e.alternate,e);if(null!==n)return n.flags&=32767,void(as=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(as=e);as=e=n}while(null!==e);ds=6,as=null}function nc(e,t,n,r,a,o,i,u,s){e.cancelPendingCommit=null;do{ic()}while(0!==Es);if(6&ns)throw Error(l(327));if(null!==t){if(t===e.current)throw Error(l(177));if(o=t.lanes|t.childLanes,function(e,t,n,r,a,o){var l=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=l&~n;0<n;){var c=31-pe(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Pe(e,r,0),0!==o&&0===a&&0!==e.tag&&(e.suspendedLanes|=o&~(l&~t))}(e,n,o|=_r,i,u,s),e===rs&&(as=rs=null,os=0),_s=t,Ps=e,Ts=n,zs=o,As=a,Os=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,X(oe,(function(){return uc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=$.T,$.T=null,a=M.p,M.p=2,i=ns,ns|=4;try{!function(e,t){if(e=e.containerInfo,tf=rd,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==o||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===o&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(nf={focusedElem:e,selectionRange:n},rd=!1,xu=t;null!==xu;)if(e=(t=xu).child,1024&t.subtreeFlags&&null!==e)e.return=t,xu=e;else for(;null!==xu;){switch(o=(t=xu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var h=gi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))gf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":gf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(l(163))}if(null!==(e=t.sibling)){e.return=t.return,xu=e;break}xu=t.return}}(e,t)}finally{ns=i,M.p=a,$.T=r}}Es=1,rc(),ac(),oc()}}function rc(){if(1===Es){Es=0;var e=Ps,t=_s,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=$.T,$.T=null;var r=M.p;M.p=2;var a=ns;ns|=4;try{$u(t,e);var o=nf,l=er(e.containerInfo),i=o.focusedElem,u=o.selectionRange;if(l!==i&&i&&i.ownerDocument&&Zn(i.ownerDocument.documentElement,i)){if(null!==u&&tr(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(l=g,g=h,h=l);var y=Jn(i,h),b=Jn(i,g);if(y&&b&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==b.node||p.focusOffset!==b.offset)){var v=f.createRange();v.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(v),p.extend(b.node,b.offset)):(v.setEnd(b.node,b.offset),p.addRange(v))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var k=f[i];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}rd=!!tf,nf=tf=null}finally{ns=a,M.p=r,$.T=n}}e.current=t,Es=2}}function ac(){if(2===Es){Es=0;var e=Ps,t=_s,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=$.T,$.T=null;var r=M.p;M.p=2;var a=ns;ns|=4;try{Cu(e,t.alternate,t)}finally{ns=a,M.p=r,$.T=n}}Es=3}}function oc(){if(4===Es||3===Es){Es=0,ee();var e=Ps,t=_s,n=Ts,r=Os;10256&t.subtreeFlags||10256&t.flags?Es=5:(Es=0,_s=Ps=null,lc(e,e.pendingLanes));var a=e.pendingLanes;if(0===a&&(Cs=null),ze(n),t=t.stateNode,fe&&"function"==typeof fe.onCommitFiberRoot)try{fe.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=$.T,a=M.p,M.p=2,$.T=null;try{for(var o=e.onRecoverableError,l=0;l<r.length;l++){var i=r[l];o(i.value,{componentStack:i.stack})}}finally{$.T=t,M.p=a}}3&Ts&&ic(),wc(e),a=e.pendingLanes,4194090&n&&42&a?e===Ls?Ns++:(Ns=0,Ls=e):Ns=0,xc(0,!1)}}function lc(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,$a(t))}function ic(e){return rc(),ac(),oc(),uc()}function uc(){if(5!==Es)return!1;var e=Ps,t=zs;zs=0;var n=ze(Ts),r=$.T,a=M.p;try{M.p=32>n?32:n,$.T=null,n=As,As=null;var o=Ps,i=Ts;if(Es=0,_s=Ps=null,Ts=0,6&ns)throw Error(l(331));var u=ns;if(ns|=4,Xu(o.current),Uu(o,o.current,i,n),ns=u,xc(0,!1),fe&&"function"==typeof fe.onPostCommitFiberRoot)try{fe.onPostCommitFiberRoot(ce,o)}catch(e){}return!0}finally{M.p=a,$.T=r,lc(e,t)}}function sc(e,t,n){t=Cr(n,t),null!==(e=oo(e,t=xi(e.stateNode,t,2),2))&&(Ee(e,2),wc(e))}function cc(e,t,n){if(3===e.tag)sc(e,e,n);else for(;null!==t;){if(3===t.tag){sc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cs||!Cs.has(r))){e=Cr(n,e),null!==(r=oo(t,n=Ci(2),2))&&(Ei(n,r,t,e),Ee(r,2),wc(r));break}}t=t.return}}function fc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ts;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(cs=!0,a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,rs===e&&(os&n)===n&&(4===ds||3===ds&&(62914560&os)===os&&300>te()-Ss?!(2&ns)&&Us(e,0):hs|=n,ys===os&&(ys=0)),wc(e)}function pc(e,t){0===t&&(t=xe()),null!==(e=Or(e,t))&&(Ee(e,t),wc(e))}function mc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(l(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,yc=null,bc=!1,vc=!1,kc=!1,Sc=0;function wc(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),vc=!0,bc||(bc=!0,df((function(){6&ns?X(re,Cc):Ec()})))}function xc(e,t){if(!kc&&vc){kc=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var o=0;else{var l=r.suspendedLanes,i=r.pingedLanes;o=(1<<31-pe(42|e)+1)-1,o=201326741&(o&=a&~(l&~i))?201326741&o|1:o?2|o:0}0!==o&&(n=!0,Tc(r,o))}else o=os,!(3&(o=ve(r,r===rs?o:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ke(r,o)||(n=!0,Tc(r,o));r=r.next}}while(n);kc=!1}}function Cc(){Ec()}function Ec(){vc=bc=!1;var e,t=0;0!==Sc&&(((e=window.event)&&"popstate"===e.type?e!==uf&&(uf=e,!0):(uf=null,!1))&&(t=Sc),Sc=0);for(var n=te(),r=null,a=gc;null!==a;){var o=a.next,l=Pc(a,n);0===l?(a.next=null,null===r?gc=o:r.next=o,null===o&&(yc=r)):(r=a,(0!==t||3&l)&&(vc=!0)),a=o}xc(t,!1)}function Pc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=-62914561&e.pendingLanes;0<o;){var l=31-pe(o),i=1<<l,u=a[l];-1===u?0!==(i&n)&&0===(i&r)||(a[l]=Se(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}if(n=os,n=ve(e,e===(t=rs)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===ls||9===ls)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&J(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||ke(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&J(r),ze(n)){case 2:case 8:n=ae;break;case 32:default:n=oe;break;case 268435456:n=ie}return r=_c.bind(null,e),n=X(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&J(r),e.callbackPriority=2,e.callbackNode=null,2}function _c(e,t){if(0!==Es&&5!==Es)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ic()&&e.callbackNode!==n)return null;var r=os;return 0===(r=ve(e,e===rs?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Fs(e,r,t),Pc(e,te()),null!=e.callbackNode&&e.callbackNode===n?_c.bind(null,e):null)}function Tc(e,t){if(ic())return null;Fs(e,t,!0)}function zc(){return 0===Sc&&(Sc=we()),Sc}function Ac(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:zt(""+e)}function Oc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Nc=0;Nc<Sr.length;Nc++){var Lc=Sr[Nc];wr(Lc.toLowerCase(),"on"+(Lc[0].toUpperCase()+Lc.slice(1)))}wr(pr,"onAnimationEnd"),wr(mr,"onAnimationIteration"),wr(hr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(gr,"onTransitionRun"),wr(yr,"onTransitionStart"),wr(br,"onTransitionCancel"),wr(vr,"onTransitionEnd"),Ge("onMouseEnter",["mouseout","mouseover"]),Ge("onMouseLeave",["mouseout","mouseover"]),Ge("onPointerEnter",["pointerout","pointerover"]),Ge("onPointerLeave",["pointerout","pointerover"]),Qe("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Qe("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Qe("onBeforeInput",["compositionend","keypress","textInput","paste"]),Qe("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var $c="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat($c));function Rc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;o=i,a.currentTarget=s;try{o(a)}catch(e){yi(e)}a.currentTarget=null,o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;o=i,a.currentTarget=s;try{o(a)}catch(e){yi(e)}a.currentTarget=null,o=u}}}}function Fc(e,t){var n=t[Me];void 0===n&&(n=t[Me]=new Set);var r=e+"__bubble";n.has(r)||(Bc(t,e,2,!1),n.add(r))}function jc(e,t,n){var r=0;t&&(r|=4),Bc(n,e,r,t)}var Dc="_reactListening"+Math.random().toString(36).slice(2);function Ic(e){if(!e[Dc]){e[Dc]=!0,qe.forEach((function(t){"selectionchange"!==t&&(Mc.has(t)||jc(t,!1,e),jc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Dc]||(t[Dc]=!0,jc("selectionchange",!1,t))}}function Bc(e,t,n,r){switch(cd(t)){case 2:var a=ad;break;case 8:a=od;break;default:a=ld}n=a.bind(null,t,n,e),a=void 0,!Dt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Hc(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a)break;if(4===l)for(l=r.return;null!==l;){var s=l.tag;if((3===s||4===s)&&l.stateNode.containerInfo===a)return;l=l.return}for(;null!==i;){if(null===(l=Be(i)))return;if(5===(s=l.tag)||6===s||26===s||27===s){r=o=l;continue e}i=i.parentNode}}r=r.return}Rt((function(){var r=o,a=Ot(n),l=[];e:{var i=kr.get(e);if(void 0!==i){var s=Zt,c=e;switch(e){case"keypress":if(0===Vt(n))break e;case"keydown":case"keyup":s=hn;break;case"focusin":c="focus",s=on;break;case"focusout":c="blur",s=on;break;case"beforeblur":case"afterblur":s=on;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=an;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=yn;break;case pr:case mr:case hr:s=ln;break;case vr:s=bn;break;case"scroll":case"scrollend":s=tn;break;case"wheel":s=vn;break;case"copy":case"cut":case"paste":s=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=gn;break;case"toggle":case"beforetoggle":s=kn}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==i?i+"Capture":null:i;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=Ft(h,p))&&f.push(Uc(h,g,m)),d)break;h=h.return}0<f.length&&(i=new s(i,c,null,n,a),l.push({event:i,listeners:f}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===At||!(c=n.relatedTarget||n.fromElement)||!Be(c)&&!c[$e])&&(s||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?Be(c):null)&&(d=u(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(s=null,c=r),s!==c)){if(f=rn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=gn,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==s?i:Ue(s),m=null==c?i:Ue(c),(i=new f(g,h+"leave",s,n,a)).target=d,i.relatedTarget=m,g=null,Be(a)===r&&((f=new f(p,h+"enter",c,n,a)).target=m,f.relatedTarget=d,g=f),d=g,s&&c)e:{for(p=c,h=0,m=f=s;m;m=Vc(m))h++;for(m=0,g=p;g;g=Vc(g))m++;for(;0<h-m;)f=Vc(f),h--;for(;0<m-h;)p=Vc(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break e;f=Vc(f),p=Vc(p)}f=null}else f=null;null!==s&&qc(l,i,s,f,!1),null!==c&&null!==d&&qc(l,d,c,f,!0)}if("select"===(s=(i=r?Ue(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var y=jn;else if(Nn(i))if(Dn)y=Qn;else{y=qn;var b=Vn}else!(s=i.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Pt(r.elementType)&&(y=jn):y=Kn;switch(y&&(y=y(e,r))?Ln(l,y,n,a):(b&&b(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&bt(i,"number",i.value)),b=r?Ue(r):window,e){case"focusin":(Nn(b)||"true"===b.contentEditable)&&(rr=b,ar=r,or=null);break;case"focusout":or=ar=rr=null;break;case"mousedown":lr=!0;break;case"contextmenu":case"mouseup":case"dragend":lr=!1,ir(l,n,a);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(l,n,a)}var v;if(wn)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else An?Tn(e,n)&&(k="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(k="onCompositionStart");k&&(En&&"ko"!==n.locale&&(An||"onCompositionStart"!==k?"onCompositionEnd"===k&&An&&(v=Wt()):(Ht="value"in(Bt=a)?Bt.value:Bt.textContent,An=!0)),0<(b=Wc(r,k)).length&&(k=new sn(k,e,null,n,a),l.push({event:k,listeners:b}),(v||null!==(v=zn(n)))&&(k.data=v))),(v=Cn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(_n=!0,Pn);case"textInput":return(e=t.data)===Pn&&_n?null:e;default:return null}}(e,n):function(e,t){if(An)return"compositionend"===e||!wn&&Tn(e,t)?(e=Wt(),Ut=Ht=Bt=null,An=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(k=Wc(r,"onBeforeInput")).length&&(b=new sn("onBeforeInput","beforeinput",null,n,a),l.push({event:b,listeners:k}),b.data=v),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var o=Ac((a[Le]||null).action),l=r.submitter;l&&null!==(t=(t=l[Le]||null)?Ac(t.formAction):l.getAttribute("formAction"))&&(o=t,l=null);var i=new Zt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==Sc){var e=l?Oc(a,l):new FormData(a);Ol(n,{pending:!0,data:e,method:a.method,action:o},null,e)}}else"function"==typeof o&&(i.preventDefault(),e=l?Oc(a,l):new FormData(a),Ol(n,{pending:!0,data:e,method:a.method,action:o},o,e))},currentTarget:a}]})}}(l,e,r,n,a)}Rc(l,t)}))}function Uc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wc(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;if(5!==(a=a.tag)&&26!==a&&27!==a||null===o||(null!=(a=Ft(e,n))&&r.unshift(Uc(e,a,o)),null!=(a=Ft(e,t))&&r.push(Uc(e,a,o))),3===e.tag)return r;e=e.return}return[]}function Vc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function qc(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,a?null!=(s=Ft(n,o))&&l.unshift(Uc(n,s,u)):a||null!=(s=Ft(n,o))&&l.push(Uc(n,s,u))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Kc=/\r\n?/g,Qc=/\u0000|\uFFFD/g;function Gc(e){return("string"==typeof e?e:""+e).replace(Kc,"\n").replace(Qc,"")}function Yc(e,t){return t=Gc(t),Gc(e)===t}function Xc(){}function Jc(e,t,n,r,a,o){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":Et(e,r,o);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=zt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof o&&("formAction"===n?("input"!==t&&Jc(e,t,"name",a.name,a,null),Jc(e,t,"formEncType",a.formEncType,a,null),Jc(e,t,"formMethod",a.formMethod,a,null),Jc(e,t,"formTarget",a.formTarget,a,null)):(Jc(e,t,"encType",a.encType,a,null),Jc(e,t,"method",a.method,a,null),Jc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=zt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"onScroll":null!=r&&Fc("scroll",e);break;case"onScrollEnd":null!=r&&Fc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(l(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=zt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Fc("beforetoggle",e),Fc("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=_t.get(n)||n,r)}}function Zc(e,t,n,r,a,o){switch(n){case"style":Et(e,r,o);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(l(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Fc("scroll",e);break;case"onScrollEnd":null!=r&&Fc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ke.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(o=null!=(o=e[Le]||null)?o[n]:null)&&e.removeEventListener(t,o,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof o&&null!==o&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function ef(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Fc("error",e),Fc("load",e);var r,a=!1,o=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":o=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Jc(e,t,r,i,n,null)}}return o&&Jc(e,t,"srcSet",n.srcSet,n,null),void(a&&Jc(e,t,"src",n.src,n,null));case"input":Fc("invalid",e);var u=r=i=o=null,s=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":o=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(l(137,t));break;default:Jc(e,t,a,f,n,null)}}return yt(e,r,u,s,c,i,o,!1),void ft(e);case"select":for(o in Fc("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(o)&&null!=(u=n[o]))switch(o){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":a=u;default:Jc(e,t,o,u,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?vt(e,!!a,t,!1):null!=n&&vt(e,!!a,n,!0));case"textarea":for(i in Fc("invalid",e),r=o=a=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":a=u;break;case"defaultValue":o=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(l(91));break;default:Jc(e,t,i,u,n,null)}return St(e,a,o,r),void ft(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&("selected"===s?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Jc(e,t,s,a,n,null));return;case"dialog":Fc("beforetoggle",e),Fc("toggle",e),Fc("cancel",e),Fc("close",e);break;case"iframe":case"object":Fc("load",e);break;case"video":case"audio":for(a=0;a<$c.length;a++)Fc($c[a],e);break;case"image":Fc("error",e),Fc("load",e);break;case"details":Fc("toggle",e);break;case"embed":case"source":case"link":Fc("error",e),Fc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Jc(e,t,c,a,n,null)}return;default:if(Pt(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&Zc(e,t,f,a,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&Jc(e,t,u,a,n,null)}var tf=null,nf=null;function rf(e){return 9===e.nodeType?e:e.ownerDocument}function af(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function of(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function lf(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var uf=null,sf="function"==typeof setTimeout?setTimeout:void 0,cf="function"==typeof clearTimeout?clearTimeout:void 0,ff="function"==typeof Promise?Promise:void 0,df="function"==typeof queueMicrotask?queueMicrotask:void 0!==ff?function(e){return ff.resolve(null).then(e).catch(pf)}:sf;function pf(e){setTimeout((function(){throw e}))}function mf(e){return"head"===e}function hf(e,t){var n=t,r=0,a=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0<r&&8>r){n=r;var l=e.ownerDocument;if(1&n&&wf(l.documentElement),2&n&&wf(l.body),4&n)for(wf(n=l.head),l=n.firstChild;l;){var i=l.nextSibling,u=l.nodeName;l[De]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===l.rel.toLowerCase()||n.removeChild(l),l=i}}if(0===a)return e.removeChild(o),void Td(t);a--}else"$"===n||"$?"===n||"$!"===n?a++:r=n.charCodeAt(0)-48;else r=0;n=o}while(n);Td(t)}function gf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":gf(n),Ie(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function yf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function bf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vf=null;function kf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function Sf(e,t,n){switch(t=rf(n),e){case"html":if(!(e=t.documentElement))throw Error(l(452));return e;case"head":if(!(e=t.head))throw Error(l(453));return e;case"body":if(!(e=t.body))throw Error(l(454));return e;default:throw Error(l(451))}}function wf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);Ie(e)}var xf=new Map,Cf=new Set;function Ef(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Pf=M.d;M.d={f:function(){var e=Pf.f(),t=Bs();return e||t},r:function(e){var t=He(e);null!==t&&5===t.tag&&"form"===t.type?Ll(t):Pf.r(e)},D:function(e){Pf.D(e),Tf("dns-prefetch",e,null)},C:function(e,t){Pf.C(e,t),Tf("preconnect",e,t)},L:function(e,t,n){Pf.L(e,t,n);var r=_f;if(r&&e&&t){var a='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+ht(n.imageSizes)+'"]')):a+='[href="'+ht(e)+'"]';var o=a;switch(t){case"style":o=Af(e);break;case"script":o=Lf(e)}xf.has(o)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),xf.set(o,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(Of(o))||"script"===t&&r.querySelector($f(o))||(ef(t=r.createElement("link"),"link",e),Ve(t),r.head.appendChild(t)))}},m:function(e,t){Pf.m(e,t);var n=_f;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',o=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":o=Lf(e)}if(!xf.has(o)&&(e=d({rel:"modulepreload",href:e},t),xf.set(o,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector($f(o)))return}ef(r=n.createElement("link"),"link",e),Ve(r),n.head.appendChild(r)}}},X:function(e,t){Pf.X(e,t);var n=_f;if(n&&e){var r=We(n).hoistableScripts,a=Lf(e),o=r.get(a);o||((o=n.querySelector($f(a)))||(e=d({src:e,async:!0},t),(t=xf.get(a))&&jf(e,t),Ve(o=n.createElement("script")),ef(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}},S:function(e,t,n){Pf.S(e,t,n);var r=_f;if(r&&e){var a=We(r).hoistableStyles,o=Af(e);t=t||"default";var l=a.get(o);if(!l){var i={loading:0,preload:null};if(l=r.querySelector(Of(o)))i.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=xf.get(o))&&Ff(e,n);var u=l=r.createElement("link");Ve(u),ef(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Rf(l,t,r)}l={type:"stylesheet",instance:l,count:1,state:i},a.set(o,l)}}},M:function(e,t){Pf.M(e,t);var n=_f;if(n&&e){var r=We(n).hoistableScripts,a=Lf(e),o=r.get(a);o||((o=n.querySelector($f(a)))||(e=d({src:e,async:!0,type:"module"},t),(t=xf.get(a))&&jf(e,t),Ve(o=n.createElement("script")),ef(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}}};var _f="undefined"==typeof document?null:document;function Tf(e,t,n){var r=_f;if(r&&"string"==typeof t&&t){var a=ht(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),Cf.has(a)||(Cf.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(ef(t=r.createElement("link"),"link",e),Ve(t),r.head.appendChild(t)))}}function zf(e,t,n,r){var a,o,i,u,s=(s=W.current)?Ef(s):null;if(!s)throw Error(l(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Af(n.href),(r=(n=We(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Af(n.href);var c=We(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(Of(e)))&&!c._p&&(f.instance=c,f.state.loading=5),xf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},xf.set(e,n),c||(a=s,o=e,i=n,u=f.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?u.loading=1:(o=a.createElement("link"),u.preload=o,o.addEventListener("load",(function(){return u.loading|=1})),o.addEventListener("error",(function(){return u.loading|=2})),ef(o,"link",i),Ve(o),a.head.appendChild(o))))),t&&null===r)throw Error(l(528,""));return f}if(t&&null!==r)throw Error(l(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Lf(n),(r=(n=We(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(l(444,e))}}function Af(e){return'href="'+ht(e)+'"'}function Of(e){return'link[rel="stylesheet"]['+e+"]"}function Nf(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function Lf(e){return'[src="'+ht(e)+'"]'}function $f(e){return"script[async]"+e}function Mf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ve(r),r;var a=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ve(r=(e.ownerDocument||e).createElement("style")),ef(r,"style",a),Rf(r,n.precedence,e),t.instance=r;case"stylesheet":a=Af(n.href);var o=e.querySelector(Of(a));if(o)return t.state.loading|=4,t.instance=o,Ve(o),o;r=Nf(n),(a=xf.get(a))&&Ff(r,a),Ve(o=(e.ownerDocument||e).createElement("link"));var i=o;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ef(o,"link",r),t.state.loading|=4,Rf(o,n.precedence,e),t.instance=o;case"script":return o=Lf(n.src),(a=e.querySelector($f(o)))?(t.instance=a,Ve(a),a):(r=n,(a=xf.get(o))&&jf(r=d({},n),a),Ve(a=(e=e.ownerDocument||e).createElement("script")),ef(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(l(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Rf(r,n.precedence,e));return t.instance}function Rf(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,o=a,l=0;l<r.length;l++){var i=r[l];if(i.dataset.precedence===t)o=i;else if(o!==a)break}o?o.parentNode.insertBefore(e,o.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Ff(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function jf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Df=null;function If(e,t,n){if(null===Df){var r=new Map,a=Df=new Map;a.set(n,r)}else(r=(a=Df).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var o=n[a];if(!(o[De]||o[Ne]||"link"===e&&"stylesheet"===o.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==o.namespaceURI){var l=o.getAttribute(t)||"";l=e+l;var i=r.get(l);i?i.push(o):r.set(l,[o])}}return r}function Bf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Hf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Uf=null;function Wf(){}function Vf(){if(this.count--,0===this.count)if(this.stylesheets)Kf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var qf=null;function Kf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,qf=new Map,t.forEach(Qf,e),qf=null,Vf.call(e))}function Qf(e,t){if(!(4&t.state.loading)){var n=qf.get(e);if(n)var r=n.get(null);else{n=new Map,qf.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),o=0;o<a.length;o++){var l=a[o];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(n.set(l.dataset.precedence,l),r=l)}r&&n.set(null,r)}l=(a=t.instance).getAttribute("data-precedence"),(o=n.get(l)||r)===r&&n.set(null,a),n.set(l,a),this.count++,r=Vf.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),o?o.parentNode.insertBefore(a,o.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Gf={$$typeof:S,Provider:null,Consumer:null,_currentValue:R,_currentValue2:R,_threadCount:0};function Yf(e,t,n,r,a,o,l,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=o,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Xf(e,t,n,r,a,o,l,i,u,s,c,f){return e=new Yf(e,t,n,l,i,u,s,f),t=1,!0===o&&(t|=24),o=Rr(3,null,null,t),e.current=o,o.stateNode=e,(t=La()).refCount++,e.pooledCache=t,t.refCount++,o.memoizedState={element:r,isDehydrated:n,cache:t},no(o),e}function Jf(e){return e?e=$r:$r}function Zf(e,t,n,r,a,o){a=Jf(a),null===r.context?r.context=a:r.pendingContext=a,(r=ao(t)).payload={element:n},null!==(o=void 0===o?null:o)&&(r.callback=o),null!==(n=oo(e,r,t))&&(Rs(n,0,t),lo(n,e,t))}function ed(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function td(e,t){ed(e,t),(e=e.alternate)&&ed(e,t)}function nd(e){if(13===e.tag){var t=Or(e,67108864);null!==t&&Rs(t,0,67108864),td(e,67108864)}}var rd=!0;function ad(e,t,n,r){var a=$.T;$.T=null;var o=M.p;try{M.p=2,ld(e,t,n,r)}finally{M.p=o,$.T=a}}function od(e,t,n,r){var a=$.T;$.T=null;var o=M.p;try{M.p=8,ld(e,t,n,r)}finally{M.p=o,$.T=a}}function ld(e,t,n,r){if(rd){var a=id(r);if(null===a)Hc(e,t,r,ud,n),vd(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return dd=kd(dd,e,t,n,r,a),!0;case"dragenter":return pd=kd(pd,e,t,n,r,a),!0;case"mouseover":return md=kd(md,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return hd.set(o,kd(hd.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,gd.set(o,kd(gd.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(vd(e,r),4&t&&-1<bd.indexOf(e)){for(;null!==a;){var o=He(a);if(null!==o)switch(o.tag){case 3:if((o=o.stateNode).current.memoizedState.isDehydrated){var l=be(o.pendingLanes);if(0!==l){var i=o;for(i.pendingLanes|=2,i.entangledLanes|=2;l;){var u=1<<31-pe(l);i.entanglements[1]|=u,l&=~u}wc(o),!(6&ns)&&(ws=te()+500,xc(0,!1))}}break;case 13:null!==(i=Or(o,2))&&Rs(i,0,2),Bs(),td(o,2)}if(null===(o=id(r))&&Hc(e,t,r,ud,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Hc(e,t,r,null,n)}}function id(e){return sd(e=Ot(e))}var ud=null;function sd(e){if(ud=null,null!==(e=Be(e))){var t=u(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=s(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return ud=e,null}function cd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case ae:return 8;case oe:case le:return 32;case ie:return 268435456;default:return 32}default:return 32}}var fd=!1,dd=null,pd=null,md=null,hd=new Map,gd=new Map,yd=[],bd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function vd(e,t){switch(e){case"focusin":case"focusout":dd=null;break;case"dragenter":case"dragleave":pd=null;break;case"mouseover":case"mouseout":md=null;break;case"pointerover":case"pointerout":hd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gd.delete(t.pointerId)}}function kd(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=He(t))&&nd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Sd(e){var t=Be(e.target);if(null!==t){var n=u(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=s(n)))return e.blockedOn=t,void function(e){var t=M.p;try{return M.p=e,function(){if(13===n.tag){var e=$s();e=Te(e);var t=Or(n,e);null!==t&&Rs(t,0,e),td(n,e)}}()}finally{M.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function wd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=id(e.nativeEvent);if(null!==n)return null!==(t=He(n))&&nd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);At=r,n.target.dispatchEvent(r),At=null,t.shift()}return!0}function xd(e,t,n){wd(e)&&n.delete(t)}function Cd(){fd=!1,null!==dd&&wd(dd)&&(dd=null),null!==pd&&wd(pd)&&(pd=null),null!==md&&wd(md)&&(md=null),hd.forEach(xd),gd.forEach(xd)}function Ed(e,t){e.blockedOn===t&&(e.blockedOn=null,fd||(fd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Cd)))}var Pd=null;function _d(e){Pd!==e&&(Pd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Pd===e&&(Pd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===sd(r||n))continue;break}var o=He(n);null!==o&&(e.splice(t,3),t-=3,Ol(o,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function Td(e){function t(t){return Ed(t,e)}null!==dd&&Ed(dd,e),null!==pd&&Ed(pd,e),null!==md&&Ed(md,e),hd.forEach(t),gd.forEach(t);for(var n=0;n<yd.length;n++){var r=yd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<yd.length&&null===(n=yd[0]).blockedOn;)Sd(n),null===n.blockedOn&&yd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],o=n[r+1],l=a[Le]||null;if("function"==typeof o)l||_d(n);else if(l){var i=null;if(o&&o.hasAttribute("formAction")){if(a=o,l=o[Le]||null)i=l.formAction;else if(null!==sd(a))continue}else i=l.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),_d(n)}}}function zd(e){this._internalRoot=e}function Ad(e){this._internalRoot=e}Ad.prototype.render=zd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Zf(t.current,$s(),e,t,null,null)},Ad.prototype.unmount=zd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Zf(e.current,2,null,e,null,null),Bs(),t[$e]=null}},Ad.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ae();e={blockedOn:null,target:e,priority:t};for(var n=0;n<yd.length&&0!==t&&t<yd[n].priority;n++);yd.splice(n,0,e),0===n&&Sd(e)}};var Od=a.version;if("19.1.0"!==Od)throw Error(l(527,Od,"19.1.0"));M.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=u(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return c(a),e;if(o===r)return c(a),t;o=o.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=o;else{for(var i=!1,s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}if(!i){for(s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?f(e):null)?null:e.stateNode};var Nd={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:$,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Ld=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ld.isDisabled&&Ld.supportsFiber)try{ce=Ld.inject(Nd),fe=Ld}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(l(299));var n=!1,r="",a=bi,o=vi,u=ki;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(o=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Xf(e,1,!1,null,0,n,r,a,o,u,0,null),e[$e]=t.current,Ic(e),new zd(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(l(299));var r=!1,a="",o=bi,u=vi,s=ki,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(o=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Xf(e,1,!0,t,0,r,a,o,u,s,0,c)).context=Jf(null),n=t.current,(a=ao(r=Te(r=$s()))).callback=null,oo(n,a,r),n=r,t.current.lanes=n,Ee(t,n),wc(t),e[$e]=t.current,Ic(e),new Ad(t)},t.version="19.1.0"},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},404:(e,t,n)=>{e.exports=n(72)},405:(e,t)=>{Symbol.for("react.transitional.element"),Symbol.for("react.portal");var n=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler");Symbol.for("react.provider");var o=Symbol.for("react.consumer"),l=Symbol.for("react.context"),i=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),s=Symbol.for("react.suspense_list"),c=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),d=(Symbol.for("react.view_transition"),Symbol.for("react.client.reference"));t.Hy=function(e){return"string"==typeof e||"function"==typeof e||e===n||e===a||e===r||e===u||e===s||"object"==typeof e&&null!==e&&(e.$$typeof===f||e.$$typeof===c||e.$$typeof===l||e.$$typeof===o||e.$$typeof===i||e.$$typeof===d||void 0!==e.getModuleId)}},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y=!1,b="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,k="undefined"!=typeof setImmediate?setImmediate:null;function S(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(g=!1,S(e),!h)if(null!==r(s))h=!0,C||(C=!0,x());else{var t=r(c);null!==t&&N(w,t.startTime-e)}}var x,C=!1,E=-1,P=5,_=-1;function T(){return!(!y&&t.unstable_now()-_<P)}function z(){if(y=!1,C){var e=t.unstable_now();_=e;var n=!0;try{e:{h=!1,g&&(g=!1,v(E),E=-1),m=!0;var o=p;try{t:{for(S(e),d=r(s);null!==d&&!(d.expirationTime>e&&T());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,S(e),n=!0;break t}d===r(s)&&a(s),S(e)}else a(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&N(w,u.startTime-e),n=!1}}break e}finally{d=null,p=o,m=!1}n=void 0}}finally{n?x():C=!1}}}if("function"==typeof k)x=function(){k(z)};else if("undefined"!=typeof MessageChannel){var A=new MessageChannel,O=A.port2;A.port1.onmessage=z,x=function(){O.postMessage(null)}}else x=function(){b(z,0)};function N(e,n){E=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(v(E),E=-1):g=!0,N(w,o-l))):(e.sortIndex=i,n(s,e),h||m||(h=!0,C||(C=!0,x()))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},698:(e,t)=>{var n=Symbol.for("react.transitional.element");function r(e,t,r){var a=null;if(void 0!==r&&(a=""+r),void 0!==t.key&&(a=""+t.key),"key"in t)for(var o in r={},t)"key"!==o&&(r[o]=t[o]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:a,ref:void 0!==t?t:null,props:r}}Symbol.for("react.fragment"),t.jsx=r,t.jsxs=r},848:(e,t,n)=>{e.exports=n(698)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function b(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var k=v.prototype=new b;k.constructor=v,h(k,y.prototype),k.isPureReactComponent=!0;var S=Array.isArray,w={H:null,A:null,T:null,S:null,V:null},x=Object.prototype.hasOwnProperty;function C(e,t,r,a,o,l){return r=l.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:l}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function T(){}function z(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return z((c=e._init)(e._payload),t,a,o,l)}}if(c)return l=l(e),c=""===o?"."+_(e,0):o,S(l)?(a="",null!=c&&(a=c.replace(P,"$&/")+"/"),z(l,t,a,"",(function(e){return e}))):null!=l&&(E(l)&&(u=l,s=a+(null==l.key||e&&e.key===l.key?"":(""+l.key).replace(P,"$&/")+"/")+c,l=C(u.type,s,void 0,0,0,u.props)),t.push(l)),1;c=0;var f,m=""===o?".":o+":";if(S(e))for(var h=0;h<e.length;h++)c+=z(o=e[h],t,a,i=m+_(o,h),l);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(o=e.next()).done;)c+=z(o=o.value,t,a,i=m+_(o,h++),l);else if("object"===i){if("function"==typeof e.then)return z(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(T,T):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,o,l);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function A(e,t,n){if(null==e)return e;var r=[],a=0;return z(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function L(){}t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=l,t.PureComponent=v,t.StrictMode=o,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=w,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return w.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),a=e.key;if(null!=t)for(o in t.ref,void 0!==t.key&&(a=""+t.key),t)!x.call(t,o)||"key"===o||"__self"===o||"__source"===o||"ref"===o&&void 0===t.ref||(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var l=Array(o),i=0;i<o;i++)l[i]=arguments[i+2];r.children=l}return C(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},o=null;if(null!=t)for(r in void 0!==t.key&&(o=""+t.key),t)x.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var i=Array(l),u=0;u<l;u++)i[u]=arguments[u+2];a.children=i}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return C(e,o,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=w.T,n={};w.T=n;try{var r=e(),a=w.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(L,N)}catch(e){N(e)}finally{w.T=t}},t.unstable_useCacheRefresh=function(){return w.H.useCacheRefresh()},t.use=function(e){return w.H.use(e)},t.useActionState=function(e,t,n){return w.H.useActionState(e,t,n)},t.useCallback=function(e,t){return w.H.useCallback(e,t)},t.useContext=function(e){return w.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return w.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=w.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return w.H.useId()},t.useImperativeHandle=function(e,t,n){return w.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return w.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return w.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return w.H.useMemo(e,t)},t.useOptimistic=function(e,t){return w.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return w.H.useReducer(e,t,n)},t.useRef=function(e){return w.H.useRef(e)},t.useState=function(e){return w.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return w.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return w.H.useTransition()},t.version="19.1.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,a),o.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(o,l),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o=a(848),l=a(540),i=a.t(l,2),u=a(338);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(null,arguments)}var c=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),f=Math.abs,d=String.fromCharCode,p=Object.assign;function m(e){return e.trim()}function h(e,t,n){return e.replace(t,n)}function g(e,t){return e.indexOf(t)}function y(e,t){return 0|e.charCodeAt(t)}function b(e,t,n){return e.slice(t,n)}function v(e){return e.length}function k(e){return e.length}function S(e,t){return t.push(e),e}var w=1,x=1,C=0,E=0,P=0,_="";function T(e,t,n,r,a,o,l){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:w,column:x,length:l,return:""}}function z(e,t){return p(T("",null,null,"",null,null,0),e,{length:-e.length},t)}function A(){return P=E>0?y(_,--E):0,x--,10===P&&(x=1,w--),P}function O(){return P=E<C?y(_,E++):0,x++,10===P&&(x=1,w++),P}function N(){return y(_,E)}function L(){return E}function $(e,t){return b(_,e,t)}function M(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function R(e){return w=x=1,C=v(_=e),E=0,[]}function F(e){return _="",e}function j(e){return m($(E-1,B(91===e?e+2:40===e?e+1:e)))}function D(e){for(;(P=N())&&P<33;)O();return M(e)>2||M(P)>3?"":" "}function I(e,t){for(;--t&&O()&&!(P<48||P>102||P>57&&P<65||P>70&&P<97););return $(e,L()+(t<6&&32==N()&&32==O()))}function B(e){for(;O();)switch(P){case e:return E;case 34:case 39:34!==e&&39!==e&&B(P);break;case 40:41===e&&B(e);break;case 92:O()}return E}function H(e,t){for(;O()&&e+P!==57&&(e+P!==84||47!==N()););return"/*"+$(t,E-1)+"*"+d(47===e?e:O())}function U(e){for(;!M(N());)O();return $(e,E)}var W="-ms-",V="-moz-",q="-webkit-",K="comm",Q="rule",G="decl",Y="@keyframes";function X(e,t){for(var n="",r=k(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function J(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case G:return e.return=e.return||e.value;case K:return"";case Y:return e.return=e.value+"{"+X(e.children,r)+"}";case Q:e.value=e.props.join(",")}return v(n=X(e.children,r))?e.return=e.value+"{"+n+"}":""}function Z(e){return F(ee("",null,null,null,[""],e=R(e),0,[0],e))}function ee(e,t,n,r,a,o,l,i,u){for(var s=0,c=0,f=l,p=0,m=0,b=0,k=1,w=1,x=1,C=0,E="",P=a,_=o,T=r,z=E;w;)switch(b=C,C=O()){case 40:if(108!=b&&58==y(z,f-1)){-1!=g(z+=h(j(C),"&","&\f"),"&\f")&&(x=-1);break}case 34:case 39:case 91:z+=j(C);break;case 9:case 10:case 13:case 32:z+=D(b);break;case 92:z+=I(L()-1,7);continue;case 47:switch(N()){case 42:case 47:S(ne(H(O(),L()),t,n),u);break;default:z+="/"}break;case 123*k:i[s++]=v(z)*x;case 125*k:case 59:case 0:switch(C){case 0:case 125:w=0;case 59+c:-1==x&&(z=h(z,/\f/g,"")),m>0&&v(z)-f&&S(m>32?re(z+";",r,n,f-1):re(h(z," ","")+";",r,n,f-2),u);break;case 59:z+=";";default:if(S(T=te(z,t,n,s,c,a,i,E,P=[],_=[],f),o),123===C)if(0===c)ee(z,t,T,T,P,o,f,i,_);else switch(99===p&&110===y(z,3)?100:p){case 100:case 108:case 109:case 115:ee(e,T,T,r&&S(te(e,T,T,0,0,a,i,E,a,P=[],f),_),a,_,f,i,r?P:_);break;default:ee(z,T,T,T,[""],_,0,i,_)}}s=c=m=0,k=x=1,E=z="",f=l;break;case 58:f=1+v(z),m=b;default:if(k<1)if(123==C)--k;else if(125==C&&0==k++&&125==A())continue;switch(z+=d(C),C*k){case 38:x=c>0?1:(z+="\f",-1);break;case 44:i[s++]=(v(z)-1)*x,x=1;break;case 64:45===N()&&(z+=j(O())),p=N(),c=f=v(E=z+=U(L())),C++;break;case 45:45===b&&2==v(z)&&(k=0)}}return o}function te(e,t,n,r,a,o,l,i,u,s,c){for(var d=a-1,p=0===a?o:[""],g=k(p),y=0,v=0,S=0;y<r;++y)for(var w=0,x=b(e,d+1,d=f(v=l[y])),C=e;w<g;++w)(C=m(v>0?p[w]+" "+x:h(x,/&\f/g,p[w])))&&(u[S++]=C);return T(e,t,n,0===a?Q:i,u,s,c)}function ne(e,t,n){return T(e,t,n,K,d(P),b(e,2,-2),0)}function re(e,t,n,r){return T(e,t,n,G,b(e,0,r),b(e,r+1,-1),r)}var ae=function(e,t,n){for(var r=0,a=0;r=a,a=N(),38===r&&12===a&&(t[n]=1),!M(a);)O();return $(e,E)},oe=new WeakMap,le=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||oe.get(n))&&!r){oe.set(e,!0);for(var a=[],o=function(e,t){return F(function(e,t){var n=-1,r=44;do{switch(M(r)){case 0:38===r&&12===N()&&(t[n]=1),e[n]+=ae(E-1,t,n);break;case 2:e[n]+=j(r);break;case 4:if(44===r){e[++n]=58===N()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=d(r)}}while(r=O());return e}(R(e),t))}(t,a),l=n.props,i=0,u=0;i<o.length;i++)for(var s=0;s<l.length;s++,u++)e.props[u]=a[i]?o[i].replace(/&\f/g,l[s]):l[s]+" "+o[i]}}},ie=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ue(e,t){switch(function(e,t){return 45^y(e,0)?(((t<<2^y(e,0))<<2^y(e,1))<<2^y(e,2))<<2^y(e,3):0}(e,t)){case 5103:return q+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return q+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return q+e+V+e+W+e+e;case 6828:case 4268:return q+e+W+e+e;case 6165:return q+e+W+"flex-"+e+e;case 5187:return q+e+h(e,/(\w+).+(:[^]+)/,q+"box-$1$2"+W+"flex-$1$2")+e;case 5443:return q+e+W+"flex-item-"+h(e,/flex-|-self/,"")+e;case 4675:return q+e+W+"flex-line-pack"+h(e,/align-content|flex-|-self/,"")+e;case 5548:return q+e+W+h(e,"shrink","negative")+e;case 5292:return q+e+W+h(e,"basis","preferred-size")+e;case 6060:return q+"box-"+h(e,"-grow","")+q+e+W+h(e,"grow","positive")+e;case 4554:return q+h(e,/([^-])(transform)/g,"$1"+q+"$2")+e;case 6187:return h(h(h(e,/(zoom-|grab)/,q+"$1"),/(image-set)/,q+"$1"),e,"")+e;case 5495:case 3959:return h(e,/(image-set\([^]*)/,q+"$1$`$1");case 4968:return h(h(e,/(.+:)(flex-)?(.*)/,q+"box-pack:$3"+W+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+q+e+e;case 4095:case 3583:case 4068:case 2532:return h(e,/(.+)-inline(.+)/,q+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(v(e)-1-t>6)switch(y(e,t+1)){case 109:if(45!==y(e,t+4))break;case 102:return h(e,/(.+:)(.+)-([^]+)/,"$1"+q+"$2-$3$1"+V+(108==y(e,t+3)?"$3":"$2-$3"))+e;case 115:return~g(e,"stretch")?ue(h(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==y(e,t+1))break;case 6444:switch(y(e,v(e)-3-(~g(e,"!important")&&10))){case 107:return h(e,":",":"+q)+e;case 101:return h(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+q+(45===y(e,14)?"inline-":"")+"box$3$1"+q+"$2$3$1"+W+"$2box$3")+e}break;case 5936:switch(y(e,t+11)){case 114:return q+e+W+h(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return q+e+W+h(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return q+e+W+h(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return q+e+W+e+e}return e}var se=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case G:e.return=ue(e.value,e.length);break;case Y:return X([z(e,{value:h(e.value,"@","@"+q)})],r);case Q:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return X([z(e,{props:[h(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return X([z(e,{props:[h(t,/:(plac\w+)/,":"+q+"input-$1")]}),z(e,{props:[h(t,/:(plac\w+)/,":-moz-$1")]}),z(e,{props:[h(t,/:(plac\w+)/,W+"input-$1")]})],r)}return""}))}}],ce=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,a,o=e.stylisPlugins||se,l={},i=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;i.push(e)}));var u,s,f,d,p=[J,(d=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],m=(s=[le,ie].concat(o,p),f=k(s),function(e,t,n,r){for(var a="",o=0;o<f;o++)a+=s[o](e,t,n,r)||"";return a});a=function(e,t,n,r){u=n,X(Z(e?e+"{"+t.styles+"}":t.styles),m),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new c({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:a};return h.sheet.hydrate(i),h};function fe(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}var de=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},pe=function(e,t,n){de(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}},me={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function he(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var ge=/[A-Z]|^ms/g,ye=/_EMO_([^_]+?)_([^]*?)_EMO_/g,be=function(e){return 45===e.charCodeAt(1)},ve=function(e){return null!=e&&"boolean"!=typeof e},ke=he((function(e){return be(e)?e:e.replace(ge,"-$&").toLowerCase()})),Se=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(ye,(function(e,t,n){return xe={name:t,styles:n,next:xe},t}))}return 1===me[e]||be(e)||"number"!=typeof t||0===t?t:t+"px"};function we(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var a=n;if(1===a.anim)return xe={name:a.name,styles:a.styles,next:xe},a.name;var o=n;if(void 0!==o.styles){var l=o.next;if(void 0!==l)for(;void 0!==l;)xe={name:l.name,styles:l.styles,next:xe},l=l.next;return o.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=we(e,t,n[a])+";";else for(var o in n){var l=n[o];if("object"!=typeof l){var i=l;null!=t&&void 0!==t[i]?r+=o+"{"+t[i]+"}":ve(i)&&(r+=ke(o)+":"+Se(o,i)+";")}else if(!Array.isArray(l)||"string"!=typeof l[0]||null!=t&&void 0!==t[l[0]]){var u=we(e,t,l);switch(o){case"animation":case"animationName":r+=ke(o)+":"+u+";";break;default:r+=o+"{"+u+"}"}}else for(var s=0;s<l.length;s++)ve(l[s])&&(r+=ke(o)+":"+Se(o,l[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=xe,u=n(e);return xe=i,we(e,t,u)}}var s=n;if(null==t)return s;var c=t[s];return void 0!==c?c:s}var xe,Ce=/label:\s*([^\s;{]+)\s*(;|$)/g;function Ee(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";xe=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=we(n,t,o)):a+=o[0];for(var l=1;l<e.length;l++)a+=we(n,t,e[l]),r&&(a+=o[l]);Ce.lastIndex=0;for(var i,u="";null!==(i=Ce.exec(a));)u+="-"+i[1];var s=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(a)+u;return{name:s,styles:a,next:xe}}var Pe=!!i.useInsertionEffect&&i.useInsertionEffect,_e=Pe||function(e){return e()},Te=Pe||l.useLayoutEffect,ze=l.createContext("undefined"!=typeof HTMLElement?ce({key:"css"}):null),Ae=(ze.Provider,function(e){return(0,l.forwardRef)((function(t,n){var r=(0,l.useContext)(ze);return e(t,r,n)}))}),Oe=l.createContext({}),Ne={}.hasOwnProperty,Le="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",$e=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return de(t,n,r),_e((function(){return pe(t,n,r)})),null},Me=Ae((function(e,t,n){var r=e.css;"string"==typeof r&&void 0!==t.registered[r]&&(r=t.registered[r]);var a=e[Le],o=[r],i="";"string"==typeof e.className?i=fe(t.registered,o,e.className):null!=e.className&&(i=e.className+" ");var u=Ee(o,void 0,l.useContext(Oe));i+=t.key+"-"+u.name;var s={};for(var c in e)Ne.call(e,c)&&"css"!==c&&c!==Le&&(s[c]=e[c]);return s.className=i,n&&(s.ref=n),l.createElement(l.Fragment,null,l.createElement($e,{cache:t,serialized:u,isStringTag:"string"==typeof a}),l.createElement(a,s))})),Re=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Fe=he((function(e){return Re.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),je=function(e){return"theme"!==e},De=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Fe:je},Ie=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Be=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return de(t,n,r),_e((function(){return pe(t,n,r)})),null},He=function e(t,n){var r,a,o=t.__emotion_real===t,i=o&&t.__emotion_base||t;void 0!==n&&(r=n.label,a=n.target);var u=Ie(t,n,o),c=u||De(i),f=!c("as");return function(){var d=arguments,p=o&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&p.push("label:"+r+";"),null==d[0]||void 0===d[0].raw)p.push.apply(p,d);else{var m=d[0];p.push(m[0]);for(var h=d.length,g=1;g<h;g++)p.push(d[g],m[g])}var y=Ae((function(e,t,n){var r=f&&e.as||i,o="",s=[],d=e;if(null==e.theme){for(var m in d={},e)d[m]=e[m];d.theme=l.useContext(Oe)}"string"==typeof e.className?o=fe(t.registered,s,e.className):null!=e.className&&(o=e.className+" ");var h=Ee(p.concat(s),t.registered,d);o+=t.key+"-"+h.name,void 0!==a&&(o+=" "+a);var g=f&&void 0===u?De(r):c,y={};for(var b in e)f&&"as"===b||g(b)&&(y[b]=e[b]);return y.className=o,n&&(y.ref=n),l.createElement(l.Fragment,null,l.createElement(Be,{cache:t,serialized:h,isStringTag:"string"==typeof r}),l.createElement(r,y))}));return y.displayName=void 0!==r?r:"Styled("+("string"==typeof i?i:i.displayName||i.name||"Component")+")",y.defaultProps=t.defaultProps,y.__emotion_real=y,y.__emotion_base=i,y.__emotion_styles=p,y.__emotion_forwardProp=u,Object.defineProperty(y,"toString",{value:function(){return"."+a}}),y.withComponent=function(t,r){return e(t,s({},n,r,{shouldForwardProp:Ie(y,r,!0)})).apply(void 0,p)},y}}.bind(null);["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){He[e]=He(e)}));const Ue=[];function We(e){return Ue[0]=e,Ee(Ue)}var Ve=a(405);function qe(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function Ke(e){if(l.isValidElement(e)||(0,Ve.Hy)(e)||!qe(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=Ke(e[n])})),t}function Qe(e,t,n={clone:!0}){const r=n.clone?{...e}:e;return qe(e)&&qe(t)&&Object.keys(t).forEach((a=>{l.isValidElement(t[a])||(0,Ve.Hy)(t[a])?r[a]=t[a]:qe(t[a])&&Object.prototype.hasOwnProperty.call(e,a)&&qe(e[a])?r[a]=Qe(e[a],t[a],n):n.clone?r[a]=qe(t[a])?Ke(t[a]):t[a]:r[a]=t[a]})),r}function Ge(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...a}=e,o=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),l=Object.keys(o);function i(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function s(e,a){const o=l.indexOf(a);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[l[o]]?t[l[o]]:a)-r/100}${n})`}return{keys:l,values:o,up:i,down:u,between:s,only:function(e){return l.indexOf(e)+1<l.length?s(e,l[l.indexOf(e)+1]):i(e)},not:function(e){const t=l.indexOf(e);return 0===t?i(l[1]):t===l.length-1?u(l[t]):s(e,l[l.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...a}}const Ye={borderRadius:4},Xe={xs:0,sm:600,md:900,lg:1200,xl:1536},Je={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Xe[e]}px)`},Ze={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:Xe[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function et(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||Je;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||Je;return Object.keys(t).reduce(((a,o)=>{if(l=e.keys,"@"===(i=o)||i.startsWith("@")&&(l.some((e=>i.startsWith(`@${e}`)))||i.match(/^@\d/))){const e=function(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,a]=n,o=Number.isNaN(+r)?r||0:+r;return e.containerQueries(a).up(o)}(r.containerQueries?r:Ze,o);e&&(a[e]=n(t[o],o))}else if(Object.keys(e.values||Xe).includes(o))a[e.up(o)]=n(t[o],o);else{const e=o;a[e]=t[e]}var l,i;return a}),{})}return n(t)}function tt(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}function nt(e){if("string"!=typeof e)throw new Error(tt(7));return e.charAt(0).toUpperCase()+e.slice(1)}function rt(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function at(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:rt(e,n)||r,t&&(a=t(a,r,e)),a}const ot=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:a}=e,o=e=>{if(null==e[t])return null;const o=e[t],l=rt(e.theme,r)||{};return et(e,o,(e=>{let r=at(l,a,e);return e===r&&"string"==typeof e&&(r=at(l,a,`${t}${"default"===e?"":nt(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},lt=function(e,t){return t?Qe(e,t,{clone:!1}):e},it={m:"margin",p:"padding"},ut={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},st={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},ct=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!st[e])return[e];e=st[e]}const[t,n]=e.split(""),r=it[t],a=ut[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(t)),e[t])}(),ft=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],dt=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],pt=[...ft,...dt];function mt(e,t,n,r){const a=rt(e,t,!0)??n;return"number"==typeof a||"string"==typeof a?e=>"string"==typeof e?e:"string"==typeof a?a.startsWith("var(")&&0===e?0:a.startsWith("var(")&&1===e?a:`calc(${e} * ${a})`:a*e:Array.isArray(a)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=a[t];return e>=0?n:"number"==typeof n?-n:"string"==typeof n&&n.startsWith("var(")?`calc(-1 * ${n})`:`-${n}`}:"function"==typeof a?a:()=>{}}function ht(e){return mt(e,"spacing",8)}function gt(e,t){return"string"==typeof t||null==t?t:e(t)}function yt(e,t){const n=ht(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(!t.includes(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=gt(t,n),e)),{})}(ct(n),r);return et(e,e[n],a)}(e,t,r,n))).reduce(lt,{})}function bt(e){return yt(e,ft)}function vt(e){return yt(e,dt)}function kt(e){return yt(e,pt)}function St(e=8,t=ht({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}bt.propTypes={},bt.filterProps=ft,vt.propTypes={},vt.filterProps=dt,kt.propTypes={},kt.filterProps=pt;const wt=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?lt(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function xt(e){return"number"!=typeof e?e:`${e}px solid`}function Ct(e,t){return ot({prop:e,themeKey:"borders",transform:t})}const Et=Ct("border",xt),Pt=Ct("borderTop",xt),_t=Ct("borderRight",xt),Tt=Ct("borderBottom",xt),zt=Ct("borderLeft",xt),At=Ct("borderColor"),Ot=Ct("borderTopColor"),Nt=Ct("borderRightColor"),Lt=Ct("borderBottomColor"),$t=Ct("borderLeftColor"),Mt=Ct("outline",xt),Rt=Ct("outlineColor"),Ft=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=mt(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:gt(t,e)});return et(e,e.borderRadius,n)}return null};Ft.propTypes={},Ft.filterProps=["borderRadius"],wt(Et,Pt,_t,Tt,zt,At,Ot,Nt,Lt,$t,Ft,Mt,Rt);const jt=e=>{if(void 0!==e.gap&&null!==e.gap){const t=mt(e.theme,"spacing",8),n=e=>({gap:gt(t,e)});return et(e,e.gap,n)}return null};jt.propTypes={},jt.filterProps=["gap"];const Dt=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=mt(e.theme,"spacing",8),n=e=>({columnGap:gt(t,e)});return et(e,e.columnGap,n)}return null};Dt.propTypes={},Dt.filterProps=["columnGap"];const It=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=mt(e.theme,"spacing",8),n=e=>({rowGap:gt(t,e)});return et(e,e.rowGap,n)}return null};function Bt(e,t){return"grey"===t?t:e}function Ht(e){return e<=1&&0!==e?100*e+"%":e}It.propTypes={},It.filterProps=["rowGap"],wt(jt,Dt,It,ot({prop:"gridColumn"}),ot({prop:"gridRow"}),ot({prop:"gridAutoFlow"}),ot({prop:"gridAutoColumns"}),ot({prop:"gridAutoRows"}),ot({prop:"gridTemplateColumns"}),ot({prop:"gridTemplateRows"}),ot({prop:"gridTemplateAreas"}),ot({prop:"gridArea"})),wt(ot({prop:"color",themeKey:"palette",transform:Bt}),ot({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:Bt}),ot({prop:"backgroundColor",themeKey:"palette",transform:Bt}));const Ut=ot({prop:"width",transform:Ht}),Wt=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||Xe[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:Ht(t)}};return et(e,e.maxWidth,t)}return null};Wt.filterProps=["maxWidth"];const Vt=ot({prop:"minWidth",transform:Ht}),qt=ot({prop:"height",transform:Ht}),Kt=ot({prop:"maxHeight",transform:Ht}),Qt=ot({prop:"minHeight",transform:Ht}),Gt=(ot({prop:"size",cssProperty:"width",transform:Ht}),ot({prop:"size",cssProperty:"height",transform:Ht}),wt(Ut,Wt,Vt,qt,Kt,Qt,ot({prop:"boxSizing"})),{border:{themeKey:"borders",transform:xt},borderTop:{themeKey:"borders",transform:xt},borderRight:{themeKey:"borders",transform:xt},borderBottom:{themeKey:"borders",transform:xt},borderLeft:{themeKey:"borders",transform:xt},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:xt},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Ft},color:{themeKey:"palette",transform:Bt},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:Bt},backgroundColor:{themeKey:"palette",transform:Bt},p:{style:vt},pt:{style:vt},pr:{style:vt},pb:{style:vt},pl:{style:vt},px:{style:vt},py:{style:vt},padding:{style:vt},paddingTop:{style:vt},paddingRight:{style:vt},paddingBottom:{style:vt},paddingLeft:{style:vt},paddingX:{style:vt},paddingY:{style:vt},paddingInline:{style:vt},paddingInlineStart:{style:vt},paddingInlineEnd:{style:vt},paddingBlock:{style:vt},paddingBlockStart:{style:vt},paddingBlockEnd:{style:vt},m:{style:bt},mt:{style:bt},mr:{style:bt},mb:{style:bt},ml:{style:bt},mx:{style:bt},my:{style:bt},margin:{style:bt},marginTop:{style:bt},marginRight:{style:bt},marginBottom:{style:bt},marginLeft:{style:bt},marginX:{style:bt},marginY:{style:bt},marginInline:{style:bt},marginInlineStart:{style:bt},marginInlineEnd:{style:bt},marginBlock:{style:bt},marginBlockStart:{style:bt},marginBlockEnd:{style:bt},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:jt},rowGap:{style:It},columnGap:{style:Dt},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:Ht},maxWidth:{style:Wt},minWidth:{transform:Ht},height:{transform:Ht},maxHeight:{transform:Ht},minHeight:{transform:Ht},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Yt=function(){function e(e,t,n,r){const a={[e]:t,theme:n},o=r[e];if(!o)return{[e]:t};const{cssProperty:l=e,themeKey:i,transform:u,style:s}=o;if(null==t)return null;if("typography"===i&&"inherit"===t)return{[e]:t};const c=rt(n,i)||{};return s?s(a):et(a,t,(t=>{let n=at(c,u,t);return t===n&&"string"==typeof t&&(n=at(c,u,`${e}${"default"===t?"":nt(t)}`,t)),!1===l?n:{[l]:n}}))}return function t(n){const{sx:r,theme:a={}}=n||{};if(!r)return null;const o=a.unstable_sxConfig??Gt;function l(n){let r=n;if("function"==typeof n)r=n(a);else if("object"!=typeof n)return n;if(!r)return null;const l=function(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}(a.breakpoints),i=Object.keys(l);let u=l;return Object.keys(r).forEach((n=>{const l="function"==typeof(i=r[n])?i(a):i;var i;if(null!=l)if("object"==typeof l)if(o[n])u=lt(u,e(n,l,a,o));else{const e=et({theme:a},l,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,l)?u=lt(u,e):u[n]=t({sx:l,theme:a})}else u=lt(u,e(n,l,a,o))})),function(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}(a,(s=u,i.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),s)));var s}return Array.isArray(r)?r.map(l):l(r)}}();Yt.filterProps=["sx"];const Xt=Yt;function Jt(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const Zt=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:a,shape:o={},...l}=e;let i=Qe({breakpoints:Ge(n),direction:"ltr",components:{},palette:{mode:"light",...r},spacing:St(a),shape:{...Ye,...o}},l);return i=function(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const a=t(e.breakpoints.not(...n),r);return a.includes("not all and")?a.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):a}}const r={},a=e=>(n(r,e),r);return n(a),{...e,containerQueries:a}}(i),i.applyStyles=Jt,i=t.reduce(((e,t)=>Qe(e,t)),i),i.unstable_sxConfig={...Gt,...l?.unstable_sxConfig},i.unstable_sx=function(e){return Xt({sx:e,theme:this})},i},en=Zt();function tn(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function nn(e){return e?(t,n)=>n[e]:null}function rn(e,t){const n="function"==typeof t?t(e):t;if(Array.isArray(n))return n.flatMap((t=>rn(e,t)));if(Array.isArray(n?.variants)){let t;if(n.isProcessed)t=n.style;else{const{variants:e,...r}=n;t=r}return an(e,n.variants,[t])}return n?.isProcessed?n.style:n}function an(e,t,n=[]){let r;e:for(let a=0;a<t.length;a+=1){const o=t[a];if("function"==typeof o.props){if(r??={...e,...e.ownerState,ownerState:e.ownerState},!o.props(r))continue}else for(const t in o.props)if(e[t]!==o.props[t]&&e.ownerState?.[t]!==o.props[t])continue e;"function"==typeof o.style?(r??={...e,...e.ownerState,ownerState:e.ownerState},n.push(o.style(r))):n.push(o.style)}return n}function on(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}function ln(e,t=0,n=1){return function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}(e,t,n)}function un(e){if(e.type)return e;if("#"===e.charAt(0))return un(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error(tt(9,e));let r,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),r=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(r))throw new Error(tt(10,r))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:r}}const sn=(e,t)=>{try{return(e=>{const t=un(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function cn(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function fn(e){e=un(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),l=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let i="rgb";const u=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(i+="a",u.push(t[3])),cn({type:i,values:u})}function dn(e){let t="hsl"===(e=un(e)).type||"hsla"===e.type?un(fn(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function pn(e,t,n){try{return function(e,t){return e=un(e),t=ln(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,cn(e)}(e,t)}catch(t){return e}}function mn(e,t){if(e=un(e),t=ln(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return cn(e)}function hn(e,t,n){try{return mn(e,t)}catch(t){return e}}function gn(e,t){if(e=un(e),t=ln(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return cn(e)}function yn(e,t,n){try{return gn(e,t)}catch(t){return e}}function bn(e,t,n){try{return function(e,t=.15){return dn(e)>.5?mn(e,t):gn(e,t)}(e,t)}catch(t){return e}}const vn={black:"#000",white:"#fff"},kn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Sn="#f3e5f5",wn="#ce93d8",xn="#ba68c8",Cn="#ab47bc",En="#9c27b0",Pn="#7b1fa2",_n="#e57373",Tn="#ef5350",zn="#f44336",An="#d32f2f",On="#c62828",Nn="#ffb74d",Ln="#ffa726",$n="#ff9800",Mn="#f57c00",Rn="#e65100",Fn="#e3f2fd",jn="#90caf9",Dn="#42a5f5",In="#1976d2",Bn="#1565c0",Hn="#4fc3f7",Un="#29b6f6",Wn="#03a9f4",Vn="#0288d1",qn="#01579b",Kn="#81c784",Qn="#66bb6a",Gn="#4caf50",Yn="#388e3c",Xn="#2e7d32",Jn="#1b5e20";function Zn(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:vn.white,default:vn.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const er=Zn();function tr(){return{text:{primary:vn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:vn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const nr=tr();function rr(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=gn(e.main,a):"dark"===t&&(e.dark=mn(e.main,o)))}function ar(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2,...a}=e,o=e.primary||function(e="light"){return"dark"===e?{main:jn,light:Fn,dark:Dn}:{main:In,light:Dn,dark:Bn}}(t),l=e.secondary||function(e="light"){return"dark"===e?{main:wn,light:Sn,dark:Cn}:{main:En,light:xn,dark:Pn}}(t),i=e.error||function(e="light"){return"dark"===e?{main:zn,light:_n,dark:An}:{main:An,light:Tn,dark:On}}(t),u=e.info||function(e="light"){return"dark"===e?{main:Un,light:Hn,dark:Vn}:{main:Vn,light:Wn,dark:qn}}(t),s=e.success||function(e="light"){return"dark"===e?{main:Qn,light:Kn,dark:Yn}:{main:Xn,light:Gn,dark:Jn}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:Ln,light:Nn,dark:Mn}:{main:"#ed6c02",light:$n,dark:Rn}}(t);function f(e){const t=function(e,t){const n=dn(e),r=dn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,nr.text.primary)>=n?nr.text.primary:er.text.primary;return t}const d=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:o=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(tt(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(tt(12,t?` (${t})`:"",JSON.stringify(e.main)));return rr(e,"light",a,r),rr(e,"dark",o,r),e.contrastText||(e.contrastText=f(e.main)),e};let p;return"light"===t?p=Zn():"dark"===t&&(p=tr()),Qe({common:{...vn},mode:t,primary:d({color:o,name:"primary"}),secondary:d({color:l,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:d({color:i,name:"error"}),warning:d({color:c,name:"warning"}),info:d({color:u,name:"info"}),success:d({color:s,name:"success"}),grey:kn,contrastThreshold:n,getContrastText:f,augmentColor:d,tonalOffset:r,...p},a)}function or(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function lr(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}const ir=(e,t,n,r=[])=>{let a=e;t.forEach(((e,o)=>{o===t.length-1?Array.isArray(a)?a[Number(e)]=n:a&&"object"==typeof a&&(a[e]=n):a&&"object"==typeof a&&(a[e]||(a[e]=r.includes(e)?[]:{}),a=a[e])}))};function ur(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},a={},o={},l={};var i,u;return i=(e,t,i)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,u=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(a,{[r]:u}),ir(o,e,`var(${r})`,i),ir(l,e,`var(${r}, ${u})`,i)}},u=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,a])=>{(!u||u&&!u([...n,t]))&&null!=a&&("object"==typeof a&&Object.keys(a).length>0?e(a,[...n,t],Array.isArray(a)?[...r,t]:r):i([...n,t],a,r))}))}(e),{css:a,vars:o,varsWithDefaults:l}}const sr={textTransform:"uppercase"},cr='"Roboto", "Helvetica", "Arial", sans-serif';function fr(e,t){const{fontFamily:n=cr,fontSize:r=14,fontWeightLight:a=300,fontWeightRegular:o=400,fontWeightMedium:l=500,fontWeightBold:i=700,htmlFontSize:u=16,allVariants:s,pxToRem:c,...f}="function"==typeof t?t(e):t,d=r/14,p=c||(e=>e/u*d+"rem"),m=(e,t,r,a,o)=>{return{fontFamily:n,fontWeight:e,fontSize:p(t),lineHeight:r,...n===cr?{letterSpacing:(l=a/t,Math.round(1e5*l)/1e5+"em")}:{},...o,...s};var l},h={h1:m(a,96,1.167,-1.5),h2:m(a,60,1.2,-.5),h3:m(o,48,1.167,0),h4:m(o,34,1.235,.25),h5:m(o,24,1.334,0),h6:m(l,20,1.6,.15),subtitle1:m(o,16,1.75,.15),subtitle2:m(l,14,1.57,.1),body1:m(o,16,1.5,.15),body2:m(o,14,1.43,.15),button:m(l,14,1.75,.4,sr),caption:m(o,12,1.66,.4),overline:m(o,12,2.66,1,sr),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return Qe({htmlFontSize:u,pxToRem:p,fontFamily:n,fontSize:r,fontWeightLight:a,fontWeightRegular:o,fontWeightMedium:l,fontWeightBold:i,...h},f,{clone:!1})}function dr(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const pr=["none",dr(0,2,1,-1,0,1,1,0,0,1,3,0),dr(0,3,1,-2,0,2,2,0,0,1,5,0),dr(0,3,3,-2,0,3,4,0,0,1,8,0),dr(0,2,4,-1,0,4,5,0,0,1,10,0),dr(0,3,5,-1,0,5,8,0,0,1,14,0),dr(0,3,5,-1,0,6,10,0,0,1,18,0),dr(0,4,5,-2,0,7,10,1,0,2,16,1),dr(0,5,5,-3,0,8,10,1,0,3,14,2),dr(0,5,6,-3,0,9,12,1,0,3,16,2),dr(0,6,6,-3,0,10,14,1,0,4,18,3),dr(0,6,7,-4,0,11,15,1,0,4,20,3),dr(0,7,8,-4,0,12,17,2,0,5,22,4),dr(0,7,8,-4,0,13,19,2,0,5,24,4),dr(0,7,9,-4,0,14,21,2,0,5,26,4),dr(0,8,9,-5,0,15,22,2,0,6,28,5),dr(0,8,10,-5,0,16,24,2,0,6,30,5),dr(0,8,11,-5,0,17,26,2,0,6,32,5),dr(0,9,11,-5,0,18,28,2,0,7,34,6),dr(0,9,12,-6,0,19,29,2,0,7,36,6),dr(0,10,13,-6,0,20,31,3,0,8,38,7),dr(0,10,13,-6,0,21,33,3,0,8,40,7),dr(0,10,14,-6,0,22,35,3,0,8,42,7),dr(0,11,14,-7,0,23,36,3,0,9,44,8),dr(0,11,15,-7,0,24,38,3,0,9,46,8)],mr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},hr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function gr(e){return`${Math.round(e)}ms`}function yr(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function br(e){const t={...mr,...e.easing},n={...hr,...e.duration};return{getAutoHeightDuration:yr,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:o=t.easeInOut,delay:l=0,...i}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:gr(a)} ${o} ${"string"==typeof l?l:gr(l)}`)).join(",")},...e,easing:t,duration:n}}const vr={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function kr(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let a=0;a<n.length;a++){const[o,l]=n[a];!qe(r=l)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||o.startsWith("unstable_")?delete t[o]:qe(l)&&(t[o]={...l},e(t[o]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const Sr=function(e={},...t){const{breakpoints:n,mixins:r={},spacing:a,palette:o={},transitions:l={},typography:i={},shape:u,...s}=e;if(e.vars&&void 0===e.generateThemeVars)throw new Error(tt(20));const c=ar(o),f=Zt(e);let d=Qe(f,{mixins:(p=f.breakpoints,m=r,{toolbar:{minHeight:56,[p.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[p.up("sm")]:{minHeight:64}},...m}),palette:c,shadows:pr.slice(),typography:fr(c,i),transitions:br(l),zIndex:{...vr}});var p,m;return d=Qe(d,s),d=t.reduce(((e,t)=>Qe(e,t)),d),d.unstable_sxConfig={...Gt,...s?.unstable_sxConfig},d.unstable_sx=function(e){return Xt({sx:e,theme:this})},d.toRuntimeSource=kr,d},wr=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=function(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function xr(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function Cr(e){return"dark"===e?wr:[]}function Er(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const Pr=e=>(t,n)=>{const r=e.rootSelector||":root",a=e.colorSchemeSelector;let o=a;if("class"===a&&(o=".%s"),"data"===a&&(o="[data-%s]"),a?.startsWith("data-")&&!a.includes("%s")&&(o=`[${a}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const a={};return(l=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${l?`${l}-`:""}overlays-${t}`)),`--${l?`${l}-`:""}palette-AppBar-darkBg`,`--${l?`${l}-`:""}palette-AppBar-darkColor`]).forEach((e=>{a[e]=n[e],delete n[e]})),"media"===o?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:a}}:o?{[o.replace("%s",t)]:a,[`${r}, ${o.replace("%s",t)}`]:n}:{[r]:{...n,...a}}}if(o&&"media"!==o)return`${r}, ${o.replace("%s",String(t))}`}else if(t){if("media"===o)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(o)return o.replace("%s",String(t))}var l;return r};function _r(e,t,n){!e[t]&&n&&(e[t]=n)}function Tr(e){return"string"==typeof e&&e.startsWith("hsl")?fn(e):e}function zr(e,t){`${t}Channel`in e||(e[`${t}Channel`]=sn(Tr(e[t])))}const Ar=e=>{try{return e()}catch(e){}};function Or(e,t,n,r){if(!t)return;t=!0===t?{}:t;const a="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...a}=e,o=ar(t);return{palette:o,opacity:{...xr(o.mode),...n},overlays:r||Cr(o.mode),...a}}({...t,palette:{mode:a,...t?.palette}}));const{palette:o,...l}=Sr({...n,palette:{mode:a,...t?.palette}});return e[r]={...t,palette:o,opacity:{...xr(a),...t?.opacity},overlays:t?.overlays||Cr(a)},l}function Nr(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:r,disableCssColorScheme:a=!1,cssVarPrefix:o="mui",shouldSkipGeneratingVar:l=Er,colorSchemeSelector:i=(n.light&&n.dark?"media":void 0),rootSelector:u=":root",...s}=e,c=Object.keys(n)[0],f=r||(n.light&&"light"!==c?"light":c),d=((e="mui")=>or(e))(o),{[f]:p,light:m,dark:h,...g}=n,y={...g};let b=p;if(("dark"===f&&!("dark"in n)||"light"===f&&!("light"in n))&&(b=!0),!b)throw new Error(tt(21,f));const v=Or(y,b,s,f);m&&!y.light&&Or(y,m,void 0,"light"),h&&!y.dark&&Or(y,h,void 0,"dark");let k={defaultColorScheme:f,...v,cssVarPrefix:o,colorSchemeSelector:i,rootSelector:u,getCssVar:d,colorSchemes:y,font:{...lr(v.typography),...v.font},spacing:(S=s.spacing,"number"==typeof S?`${S}px`:"string"==typeof S||"function"==typeof S||Array.isArray(S)?S:"8px")};var S;Object.keys(k.colorSchemes).forEach((e=>{const t=k.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],a=n[2];return d(e,t[r][a])};var r;if("light"===t.mode&&(_r(t.common,"background","#fff"),_r(t.common,"onBackground","#000")),"dark"===t.mode&&(_r(t.common,"background","#000"),_r(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){_r(t.Alert,"errorColor",hn(t.error.light,.6)),_r(t.Alert,"infoColor",hn(t.info.light,.6)),_r(t.Alert,"successColor",hn(t.success.light,.6)),_r(t.Alert,"warningColor",hn(t.warning.light,.6)),_r(t.Alert,"errorFilledBg",n("palette-error-main")),_r(t.Alert,"infoFilledBg",n("palette-info-main")),_r(t.Alert,"successFilledBg",n("palette-success-main")),_r(t.Alert,"warningFilledBg",n("palette-warning-main")),_r(t.Alert,"errorFilledColor",Ar((()=>t.getContrastText(t.error.main)))),_r(t.Alert,"infoFilledColor",Ar((()=>t.getContrastText(t.info.main)))),_r(t.Alert,"successFilledColor",Ar((()=>t.getContrastText(t.success.main)))),_r(t.Alert,"warningFilledColor",Ar((()=>t.getContrastText(t.warning.main)))),_r(t.Alert,"errorStandardBg",yn(t.error.light,.9)),_r(t.Alert,"infoStandardBg",yn(t.info.light,.9)),_r(t.Alert,"successStandardBg",yn(t.success.light,.9)),_r(t.Alert,"warningStandardBg",yn(t.warning.light,.9)),_r(t.Alert,"errorIconColor",n("palette-error-main")),_r(t.Alert,"infoIconColor",n("palette-info-main")),_r(t.Alert,"successIconColor",n("palette-success-main")),_r(t.Alert,"warningIconColor",n("palette-warning-main")),_r(t.AppBar,"defaultBg",n("palette-grey-100")),_r(t.Avatar,"defaultBg",n("palette-grey-400")),_r(t.Button,"inheritContainedBg",n("palette-grey-300")),_r(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),_r(t.Chip,"defaultBorder",n("palette-grey-400")),_r(t.Chip,"defaultAvatarColor",n("palette-grey-700")),_r(t.Chip,"defaultIconColor",n("palette-grey-700")),_r(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),_r(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),_r(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),_r(t.LinearProgress,"primaryBg",yn(t.primary.main,.62)),_r(t.LinearProgress,"secondaryBg",yn(t.secondary.main,.62)),_r(t.LinearProgress,"errorBg",yn(t.error.main,.62)),_r(t.LinearProgress,"infoBg",yn(t.info.main,.62)),_r(t.LinearProgress,"successBg",yn(t.success.main,.62)),_r(t.LinearProgress,"warningBg",yn(t.warning.main,.62)),_r(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),_r(t.Slider,"primaryTrack",yn(t.primary.main,.62)),_r(t.Slider,"secondaryTrack",yn(t.secondary.main,.62)),_r(t.Slider,"errorTrack",yn(t.error.main,.62)),_r(t.Slider,"infoTrack",yn(t.info.main,.62)),_r(t.Slider,"successTrack",yn(t.success.main,.62)),_r(t.Slider,"warningTrack",yn(t.warning.main,.62));const e=bn(t.background.default,.8);_r(t.SnackbarContent,"bg",e),_r(t.SnackbarContent,"color",Ar((()=>t.getContrastText(e)))),_r(t.SpeedDialAction,"fabHoverBg",bn(t.background.paper,.15)),_r(t.StepConnector,"border",n("palette-grey-400")),_r(t.StepContent,"border",n("palette-grey-400")),_r(t.Switch,"defaultColor",n("palette-common-white")),_r(t.Switch,"defaultDisabledColor",n("palette-grey-100")),_r(t.Switch,"primaryDisabledColor",yn(t.primary.main,.62)),_r(t.Switch,"secondaryDisabledColor",yn(t.secondary.main,.62)),_r(t.Switch,"errorDisabledColor",yn(t.error.main,.62)),_r(t.Switch,"infoDisabledColor",yn(t.info.main,.62)),_r(t.Switch,"successDisabledColor",yn(t.success.main,.62)),_r(t.Switch,"warningDisabledColor",yn(t.warning.main,.62)),_r(t.TableCell,"border",yn(pn(t.divider,1),.88)),_r(t.Tooltip,"bg",pn(t.grey[700],.92))}if("dark"===t.mode){_r(t.Alert,"errorColor",yn(t.error.light,.6)),_r(t.Alert,"infoColor",yn(t.info.light,.6)),_r(t.Alert,"successColor",yn(t.success.light,.6)),_r(t.Alert,"warningColor",yn(t.warning.light,.6)),_r(t.Alert,"errorFilledBg",n("palette-error-dark")),_r(t.Alert,"infoFilledBg",n("palette-info-dark")),_r(t.Alert,"successFilledBg",n("palette-success-dark")),_r(t.Alert,"warningFilledBg",n("palette-warning-dark")),_r(t.Alert,"errorFilledColor",Ar((()=>t.getContrastText(t.error.dark)))),_r(t.Alert,"infoFilledColor",Ar((()=>t.getContrastText(t.info.dark)))),_r(t.Alert,"successFilledColor",Ar((()=>t.getContrastText(t.success.dark)))),_r(t.Alert,"warningFilledColor",Ar((()=>t.getContrastText(t.warning.dark)))),_r(t.Alert,"errorStandardBg",hn(t.error.light,.9)),_r(t.Alert,"infoStandardBg",hn(t.info.light,.9)),_r(t.Alert,"successStandardBg",hn(t.success.light,.9)),_r(t.Alert,"warningStandardBg",hn(t.warning.light,.9)),_r(t.Alert,"errorIconColor",n("palette-error-main")),_r(t.Alert,"infoIconColor",n("palette-info-main")),_r(t.Alert,"successIconColor",n("palette-success-main")),_r(t.Alert,"warningIconColor",n("palette-warning-main")),_r(t.AppBar,"defaultBg",n("palette-grey-900")),_r(t.AppBar,"darkBg",n("palette-background-paper")),_r(t.AppBar,"darkColor",n("palette-text-primary")),_r(t.Avatar,"defaultBg",n("palette-grey-600")),_r(t.Button,"inheritContainedBg",n("palette-grey-800")),_r(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),_r(t.Chip,"defaultBorder",n("palette-grey-700")),_r(t.Chip,"defaultAvatarColor",n("palette-grey-300")),_r(t.Chip,"defaultIconColor",n("palette-grey-300")),_r(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),_r(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),_r(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),_r(t.LinearProgress,"primaryBg",hn(t.primary.main,.5)),_r(t.LinearProgress,"secondaryBg",hn(t.secondary.main,.5)),_r(t.LinearProgress,"errorBg",hn(t.error.main,.5)),_r(t.LinearProgress,"infoBg",hn(t.info.main,.5)),_r(t.LinearProgress,"successBg",hn(t.success.main,.5)),_r(t.LinearProgress,"warningBg",hn(t.warning.main,.5)),_r(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),_r(t.Slider,"primaryTrack",hn(t.primary.main,.5)),_r(t.Slider,"secondaryTrack",hn(t.secondary.main,.5)),_r(t.Slider,"errorTrack",hn(t.error.main,.5)),_r(t.Slider,"infoTrack",hn(t.info.main,.5)),_r(t.Slider,"successTrack",hn(t.success.main,.5)),_r(t.Slider,"warningTrack",hn(t.warning.main,.5));const e=bn(t.background.default,.98);_r(t.SnackbarContent,"bg",e),_r(t.SnackbarContent,"color",Ar((()=>t.getContrastText(e)))),_r(t.SpeedDialAction,"fabHoverBg",bn(t.background.paper,.15)),_r(t.StepConnector,"border",n("palette-grey-600")),_r(t.StepContent,"border",n("palette-grey-600")),_r(t.Switch,"defaultColor",n("palette-grey-300")),_r(t.Switch,"defaultDisabledColor",n("palette-grey-600")),_r(t.Switch,"primaryDisabledColor",hn(t.primary.main,.55)),_r(t.Switch,"secondaryDisabledColor",hn(t.secondary.main,.55)),_r(t.Switch,"errorDisabledColor",hn(t.error.main,.55)),_r(t.Switch,"infoDisabledColor",hn(t.info.main,.55)),_r(t.Switch,"successDisabledColor",hn(t.success.main,.55)),_r(t.Switch,"warningDisabledColor",hn(t.warning.main,.55)),_r(t.TableCell,"border",hn(pn(t.divider,1),.68)),_r(t.Tooltip,"bg",pn(t.grey[700],.92))}zr(t.background,"default"),zr(t.background,"paper"),zr(t.common,"background"),zr(t.common,"onBackground"),zr(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];"tonalOffset"!==e&&n&&"object"==typeof n&&(n.main&&_r(t[e],"mainChannel",sn(Tr(n.main))),n.light&&_r(t[e],"lightChannel",sn(Tr(n.light))),n.dark&&_r(t[e],"darkChannel",sn(Tr(n.dark))),n.contrastText&&_r(t[e],"contrastTextChannel",sn(Tr(n.contrastText))),"text"===e&&(zr(t[e],"primary"),zr(t[e],"secondary")),"action"===e&&(n.active&&zr(t[e],"active"),n.selected&&zr(t[e],"selected")))}))})),k=t.reduce(((e,t)=>Qe(e,t)),k);const w={prefix:o,disableCssColorScheme:a,shouldSkipGeneratingVar:l,getSelector:Pr(k)},{vars:x,generateThemeVars:C,generateStyleSheets:E}=function(e,t={}){const{getSelector:n=g,disableCssColorScheme:r,colorSchemeSelector:a}=t,{colorSchemes:o={},components:l,defaultColorScheme:i="light",...u}=e,{vars:s,css:c,varsWithDefaults:f}=ur(u,t);let d=f;const p={},{[i]:m,...h}=o;if(Object.entries(h||{}).forEach((([e,n])=>{const{vars:r,css:a,varsWithDefaults:o}=ur(n,t);d=Qe(d,o),p[e]={css:a,vars:r}})),m){const{css:e,vars:n,varsWithDefaults:r}=ur(m,t);d=Qe(d,r),p[i]={css:e,vars:n}}function g(t,n){let r=a;if("class"===a&&(r=".%s"),"data"===a&&(r="[data-%s]"),a?.startsWith("data-")&&!a.includes("%s")&&(r=`[${a}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=o[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:d,generateThemeVars:()=>{let e={...s};return Object.entries(p).forEach((([,{vars:t}])=>{e=Qe(e,t)})),e},generateStyleSheets:()=>{const t=[],a=e.defaultColorScheme||"light";function l(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}l(n(void 0,{...c}),c);const{[a]:i,...u}=p;if(i){const{css:e}=i,t=o[a]?.palette?.mode,u=!r&&t?{colorScheme:t,...e}:{...e};l(n(a,{...u}),u)}return Object.entries(u).forEach((([e,{css:t}])=>{const a=o[e]?.palette?.mode,i=!r&&a?{colorScheme:a,...t}:{...t};l(n(e,{...i}),i)})),t}}}(k,w);return k.vars=x,Object.entries(k.colorSchemes[k.defaultColorScheme]).forEach((([e,t])=>{k[e]=t})),k.generateThemeVars=C,k.generateStyleSheets=E,k.generateSpacing=function(){return St(s.spacing,ht(this))},k.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(i),k.spacing=k.generateSpacing(),k.shouldSkipGeneratingVar=l,k.unstable_sxConfig={...Gt,...s?.unstable_sxConfig},k.unstable_sx=function(e){return Xt({sx:e,theme:this})},k.toRuntimeSource=kr,k}function Lr(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:ar({...!0===n?{}:n.palette,mode:t})})}function $r(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:a=(n?void 0:{light:!0}),defaultColorScheme:o=n?.mode,...l}=e,i=o||"light",u=a?.[i],s={...a,...n?{[i]:{..."boolean"!=typeof u&&u,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return Sr(e,...t);let r=n;"palette"in e||s[i]&&(!0!==s[i]?r=s[i].palette:"dark"===i&&(r={mode:"dark"}));const a=Sr({...e,palette:r},...t);return a.defaultColorScheme=i,a.colorSchemes=s,"light"===a.palette.mode&&(a.colorSchemes.light={...!0!==s.light&&s.light,palette:a.palette},Lr(a,"dark",s.dark)),"dark"===a.palette.mode&&(a.colorSchemes.dark={...!0!==s.dark&&s.dark,palette:a.palette},Lr(a,"light",s.light)),a}return n||"light"in s||"light"!==i||(s.light=!0),Nr({...l,colorSchemes:s,defaultColorScheme:i,..."boolean"!=typeof r&&r},...t)}const Mr=$r(),Rr="$$material",Fr=function(e={}){const{themeId:t,defaultTheme:n=en,rootShouldForwardProp:r=tn,slotShouldForwardProp:a=tn}=e;function o(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{!function(e){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>e!==Xt)))}(e);const{name:n,slot:l,skipVariantsResolver:i,skipSx:u,overridesResolver:s=nn(on(l)),...c}=t,f=void 0!==i?i:l&&"Root"!==l&&"root"!==l||!1,d=u||!1;let p=tn;"Root"===l||"root"===l?p=r:l?p=a:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(p=void 0);const m=function(e,t){return He(e,t)}(e,{shouldForwardProp:p,label:void 0,...c}),h=e=>{if("function"==typeof e&&e.__emotion_real!==e)return function(t){return rn(t,e)};if(qe(e)){const t=function(e){const{variants:t,...n}=e,r={variants:t,style:We(n),isProcessed:!0};return r.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=We(e.style))})),r}(e);return t.variants?function(e){return rn(e,t)}:t.style}return e},g=(...t)=>{const r=[],a=t.map(h),l=[];if(r.push(o),n&&s&&l.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const a={};for(const t in r)a[t]=rn(e,r[t]);return s(e,a)})),n&&!f&&l.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?an(e,r):null})),d||l.push(Xt),Array.isArray(a[0])){const e=a.shift(),t=new Array(r.length).fill(""),n=new Array(l.length).fill("");let o;o=[...t,...e,...n],o.raw=[...t,...e.raw,...n],r.unshift(o)}const i=[...r,...a,...l],u=m(...i);return e.muiName&&(u.muiName=e.muiName),u};return m.withConfig&&(g.withConfig=m.withConfig),g}}({themeId:Rr,defaultTheme:Mr,rootShouldForwardProp:e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e}),jr=Fr,Dr=l.createContext(null);function Ir(){return l.useContext(Dr)}const Br="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Hr=function(e){const{children:t,theme:n}=e,r=Ir(),a=l.useMemo((()=>{const e=null===r?{...n}:function(e,t){return"function"==typeof t?t(e):{...e,...t}}(r,n);return null!=e&&(e[Br]=null!==r),e}),[n,r]);return(0,o.jsx)(Dr.Provider,{value:a,children:t})},Ur=l.createContext(),Wr=function({value:e,...t}){return(0,o.jsx)(Ur.Provider,{value:e??!0,...t})},Vr=l.createContext(void 0),qr=function({value:e,children:t}){return(0,o.jsx)(Vr.Provider,{value:e,children:t})},Kr={};function Qr(e,t,n,r=!1){return l.useMemo((()=>{const a=e&&t[e]||t;if("function"==typeof n){const o=n(a),l=e?{...t,[e]:o}:o;return r?()=>l:l}return e?{...t,[e]:n}:{...t,...n}}),[e,t,n,r])}const Gr=function(e){const{children:t,theme:n,themeId:r}=e,a=function(e=null){const t=l.useContext(Oe);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(Kr),i=Ir()||Kr,u=Qr(r,a,n),s=Qr(r,i,n,!0),c="rtl"===(r?u[r]:u).direction;return(0,o.jsx)(Hr,{theme:s,children:(0,o.jsx)(Oe.Provider,{value:u,children:(0,o.jsx)(Wr,{value:c,children:(0,o.jsx)(qr,{value:r?u[r].components:u.components,children:t})})})})};function Yr({theme:e,...t}){const n=Rr in e?e[Rr]:void 0;return(0,o.jsx)(Gr,{...t,themeId:n?Rr:void 0,theme:n||e})}a(146);var Xr,Jr,Zr=function(e,t){var n=arguments;if(null==t||!Ne.call(t,"css"))return l.createElement.apply(void 0,n);var r=n.length,a=new Array(r);a[0]=Me,a[1]=function(e,t){var n={};for(var r in t)Ne.call(t,r)&&(n[r]=t[r]);return n[Le]=e,n}(e,t);for(var o=2;o<r;o++)a[o]=n[o];return l.createElement.apply(null,a)};Xr=Zr||(Zr={}),Jr||(Jr=Xr.JSX||(Xr.JSX={}));var ea=Ae((function(e,t){var n=Ee([e.styles],void 0,l.useContext(Oe)),r=l.useRef();return Te((function(){var e=t.key+"-global",a=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),o=!1,l=document.querySelector('style[data-emotion="'+e+" "+n.name+'"]');return t.sheet.tags.length&&(a.before=t.sheet.tags[0]),null!==l&&(o=!0,l.setAttribute("data-emotion",e),a.hydrate([l])),r.current=[a,o],function(){a.flush()}}),[t]),Te((function(){var e=r.current,a=e[0];if(e[1])e[1]=!1;else{if(void 0!==n.next&&pe(t,n.next,!0),a.tags.length){var o=a.tags[a.tags.length-1].nextElementSibling;a.before=o,a.flush()}t.insert("",n,a,!1)}}),[t,n.name]),null}));function ta(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,o.jsx)(ea,{styles:r})}const na="undefined"!=typeof window?l.useLayoutEffect:l.useEffect,ra="mode",aa="color-scheme",oa="data-color-scheme";function la(){}const ia=({key:e,storageWindow:t})=>(t||"undefined"==typeof window||(t=window),{get(n){if("undefined"==typeof window)return;if(!t)return n;let r;try{r=t.localStorage.getItem(e)}catch{}return r||n},set:n=>{if(t)try{t.localStorage.setItem(e,n)}catch{}},subscribe:n=>{if(!t)return la;const r=t=>{const r=t.newValue;t.key===e&&n(r)};return t.addEventListener("storage",r),()=>{t.removeEventListener("storage",r)}}});function ua(){}function sa(e){if("undefined"!=typeof window&&"function"==typeof window.matchMedia&&"system"===e)return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function ca(e,t){return"light"===e.mode||"system"===e.mode&&"light"===e.systemMode?t("light"):"dark"===e.mode||"system"===e.mode&&"dark"===e.systemMode?t("dark"):void 0}const fa="mui-color-scheme",da="light",pa="dark",ma="mui-mode",{CssVarsProvider:ha,useColorScheme:ga,getInitColorSchemeScript:ya}=function(e){const{themeId:t,theme:n={},modeStorageKey:r=ra,colorSchemeStorageKey:a=aa,disableTransitionOnChange:i=!1,defaultColorScheme:u,resolveTheme:s}=e,c={allColorSchemes:[],colorScheme:void 0,darkColorScheme:void 0,lightColorScheme:void 0,mode:void 0,setColorScheme:()=>{},setMode:()=>{},systemMode:void 0},f=l.createContext(void 0),d={},p={},m="string"==typeof u?u:u.light,h="string"==typeof u?u:u.dark;return{CssVarsProvider:function(e){const{children:c,theme:m,modeStorageKey:h=r,colorSchemeStorageKey:g=a,disableTransitionOnChange:y=i,storageManager:b,storageWindow:v=("undefined"==typeof window?void 0:window),documentNode:k=("undefined"==typeof document?void 0:document),colorSchemeNode:S=("undefined"==typeof document?void 0:document.documentElement),disableNestedContext:w=!1,disableStyleSheetGeneration:x=!1,defaultMode:C="system",forceThemeRerender:E=!1,noSsr:P}=e,_=l.useRef(!1),T=Ir(),z=l.useContext(f),A=!!z&&!w,O=l.useMemo((()=>m||("function"==typeof n?n():n)),[m]),N=O[t],L=N||O,{colorSchemes:$=d,components:M=p,cssVarPrefix:R}=L,F=Object.keys($).filter((e=>!!$[e])).join(","),j=l.useMemo((()=>F.split(",")),[F]),D="string"==typeof u?u:u.light,I="string"==typeof u?u:u.dark,B=$[D]&&$[I]?C:$[L.defaultColorScheme]?.palette?.mode||L.palette?.mode,{mode:H,setMode:U,systemMode:W,lightColorScheme:V,darkColorScheme:q,colorScheme:K,setColorScheme:Q}=function(e){const{defaultMode:t="light",defaultLightColorScheme:n,defaultDarkColorScheme:r,supportedColorSchemes:a=[],modeStorageKey:o=ra,colorSchemeStorageKey:i=aa,storageWindow:u=("undefined"==typeof window?void 0:window),storageManager:s=ia,noSsr:c=!1}=e,f=a.join(","),d=a.length>1,p=l.useMemo((()=>s?.({key:o,storageWindow:u})),[s,o,u]),m=l.useMemo((()=>s?.({key:`${i}-light`,storageWindow:u})),[s,i,u]),h=l.useMemo((()=>s?.({key:`${i}-dark`,storageWindow:u})),[s,i,u]),[g,y]=l.useState((()=>{const e=p?.get(t)||t,a=m?.get(n)||n,o=h?.get(r)||r;return{mode:e,systemMode:sa(e),lightColorScheme:a,darkColorScheme:o}})),[b,v]=l.useState(c||!d);l.useEffect((()=>{v(!0)}),[]);const k=function(e){return ca(e,(t=>"light"===t?e.lightColorScheme:"dark"===t?e.darkColorScheme:void 0))}(g),S=l.useCallback((e=>{y((n=>{if(e===n.mode)return n;const r=e??t;return p?.set(r),{...n,mode:r,systemMode:sa(r)}}))}),[p,t]),w=l.useCallback((e=>{e?"string"==typeof e?e&&!f.includes(e)?console.error(`\`${e}\` does not exist in \`theme.colorSchemes\`.`):y((t=>{const n={...t};return ca(t,(t=>{"light"===t&&(m?.set(e),n.lightColorScheme=e),"dark"===t&&(h?.set(e),n.darkColorScheme=e)})),n})):y((t=>{const a={...t},o=null===e.light?n:e.light,l=null===e.dark?r:e.dark;return o&&(f.includes(o)?(a.lightColorScheme=o,m?.set(o)):console.error(`\`${o}\` does not exist in \`theme.colorSchemes\`.`)),l&&(f.includes(l)?(a.darkColorScheme=l,h?.set(l)):console.error(`\`${l}\` does not exist in \`theme.colorSchemes\`.`)),a})):y((e=>(m?.set(n),h?.set(r),{...e,lightColorScheme:n,darkColorScheme:r})))}),[f,m,h,n,r]),x=l.useCallback((e=>{"system"===g.mode&&y((t=>{const n=e?.matches?"dark":"light";return t.systemMode===n?t:{...t,systemMode:n}}))}),[g.mode]),C=l.useRef(x);return C.current=x,l.useEffect((()=>{if("function"!=typeof window.matchMedia||!d)return;const e=(...e)=>C.current(...e),t=window.matchMedia("(prefers-color-scheme: dark)");return t.addListener(e),e(t),()=>{t.removeListener(e)}}),[d]),l.useEffect((()=>{if(d){const e=p?.subscribe((e=>{e&&!["light","dark","system"].includes(e)||S(e||t)}))||ua,n=m?.subscribe((e=>{e&&!f.match(e)||w({light:e})}))||ua,r=h?.subscribe((e=>{e&&!f.match(e)||w({dark:e})}))||ua;return()=>{e(),n(),r()}}}),[w,S,f,t,u,d,p,m,h]),{...g,mode:b?g.mode:void 0,systemMode:b?g.systemMode:void 0,colorScheme:b?k:void 0,setMode:S,setColorScheme:w}}({supportedColorSchemes:j,defaultLightColorScheme:D,defaultDarkColorScheme:I,modeStorageKey:h,colorSchemeStorageKey:g,defaultMode:B,storageManager:b,storageWindow:v,noSsr:P});let G=H,Y=K;A&&(G=z.mode,Y=z.colorScheme);let X=Y||L.defaultColorScheme;L.vars&&!E&&(X=L.defaultColorScheme);const J=l.useMemo((()=>{const e=L.generateThemeVars?.()||L.vars,t={...L,components:M,colorSchemes:$,cssVarPrefix:R,vars:e};if("function"==typeof t.generateSpacing&&(t.spacing=t.generateSpacing()),X){const e=$[X];e&&"object"==typeof e&&Object.keys(e).forEach((n=>{e[n]&&"object"==typeof e[n]?t[n]={...t[n],...e[n]}:t[n]=e[n]}))}return s?s(t):t}),[L,X,M,$,R]),Z=L.colorSchemeSelector;na((()=>{if(Y&&S&&Z&&"media"!==Z){const e=Z;let t=Z;if("class"===e&&(t=".%s"),"data"===e&&(t="[data-%s]"),e?.startsWith("data-")&&!e.includes("%s")&&(t=`[${e}="%s"]`),t.startsWith("."))S.classList.remove(...j.map((e=>t.substring(1).replace("%s",e)))),S.classList.add(t.substring(1).replace("%s",Y));else{const e=t.replace("%s",Y).match(/\[([^\]]+)\]/);if(e){const[t,n]=e[1].split("=");n||j.forEach((e=>{S.removeAttribute(t.replace(Y,e))})),S.setAttribute(t,n?n.replace(/"|'/g,""):"")}else S.setAttribute(t,Y)}}}),[Y,Z,S,j]),l.useEffect((()=>{let e;if(y&&_.current&&k){const t=k.createElement("style");t.appendChild(k.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),k.head.appendChild(t),window.getComputedStyle(k.body),e=setTimeout((()=>{k.head.removeChild(t)}),1)}return()=>{clearTimeout(e)}}),[Y,y,k]),l.useEffect((()=>(_.current=!0,()=>{_.current=!1})),[]);const ee=l.useMemo((()=>({allColorSchemes:j,colorScheme:Y,darkColorScheme:q,lightColorScheme:V,mode:G,setColorScheme:Q,setMode:U,systemMode:W})),[j,Y,q,V,G,Q,U,W,J.colorSchemeSelector]);let te=!0;(x||!1===L.cssVariables||A&&T?.cssVarPrefix===R)&&(te=!1);const ne=(0,o.jsxs)(l.Fragment,{children:[(0,o.jsx)(Gr,{themeId:N?t:void 0,theme:J,children:c}),te&&(0,o.jsx)(ta,{styles:J.generateStyleSheets?.()||[]})]});return A?ne:(0,o.jsx)(f.Provider,{value:ee,children:ne})},useColorScheme:()=>l.useContext(f)||c,getInitColorSchemeScript:e=>function(e){const{defaultMode:t="system",defaultLightColorScheme:n="light",defaultDarkColorScheme:r="dark",modeStorageKey:a=ra,colorSchemeStorageKey:l=aa,attribute:i=oa,colorSchemeNode:u="document.documentElement",nonce:s}=e||{};let c="",f=i;if("class"===i&&(f=".%s"),"data"===i&&(f="[data-%s]"),f.startsWith(".")){const e=f.substring(1);c+=`${u}.classList.remove('${e}'.replace('%s', light), '${e}'.replace('%s', dark));\n      ${u}.classList.add('${e}'.replace('%s', colorScheme));`}const d=f.match(/\[([^\]]+)\]/);if(d){const[e,t]=d[1].split("=");t||(c+=`${u}.removeAttribute('${e}'.replace('%s', light));\n      ${u}.removeAttribute('${e}'.replace('%s', dark));`),c+=`\n      ${u}.setAttribute('${e}'.replace('%s', colorScheme), ${t?`${t}.replace('%s', colorScheme)`:'""'});`}else c+=`${u}.setAttribute('${f}', colorScheme);`;return(0,o.jsx)("script",{suppressHydrationWarning:!0,nonce:"undefined"==typeof window?s:"",dangerouslySetInnerHTML:{__html:`(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('${a}') || '${t}';\n  const dark = localStorage.getItem('${l}-dark') || '${r}';\n  const light = localStorage.getItem('${l}-light') || '${n}';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    ${c}\n  }\n} catch(e){}})();`}},"mui-color-scheme-init")}({colorSchemeStorageKey:a,defaultLightColorScheme:m,defaultDarkColorScheme:h,modeStorageKey:r,...e})}}({themeId:Rr,theme:()=>$r({cssVariables:!0}),colorSchemeStorageKey:fa,modeStorageKey:ma,defaultColorScheme:{light:da,dark:pa},resolveTheme:e=>{const t={...e,typography:fr(e.palette,e.typography)};return t.unstable_sx=function(e){return Xt({sx:e,theme:this})},t}}),ba=ha;function va({theme:e,...t}){const n=l.useMemo((()=>{if("function"==typeof e)return e;const t=Rr in e?e[Rr]:e;return"colorSchemes"in t?null:"vars"in t?e:{...e,vars:null}}),[e]);return n?(0,o.jsx)(Yr,{theme:n,...t}):(0,o.jsx)(ba,{theme:e,...t})}const ka=JSON.parse('{"UU":"Lens for Google Calendar","rE":"1.0.0"}'),Sa=JSON.parse('{"Jk":{"O":"https://github.com/cal5barton/google-calendar-selector.git"}}');var wa=ka.rE,xa=Sa.Jk.O.replace(/\.git$/,""),Ca=ka.UU.replace(/^@.*\//,""),Ea=$r({palette:{primary:{main:"#1a73e8",dark:"#174ea6"},text:{primary:"#202124",secondary:"#5f6368"}},typography:{fontFamily:"'Google Sans', Roboto, Arial, sans-serif"}}),Pa=jr("div")((function(e){return e.theme,{minWidth:350,padding:20,fontFamily:"'Google Sans', Roboto, Arial, sans-serif",color:"#202124"}})),_a=jr("div")({display:"flex",alignItems:"center",padding:"16px 20px",marginBottom:10,marginLeft:-20,marginRight:-20,marginTop:-20,borderBottom:"1px solid rgba(0, 0, 0, 0.08)"}),Ta=jr("img")({width:32,height:32,marginRight:12}),za=jr("h1")({fontSize:18,fontWeight:500,color:"#1a73e8"}),Aa=jr("h2")({fontSize:16,fontWeight:500,margin:"20px 0 10px 0",color:"#202124"}),Oa=jr("ul")({listStyle:"none",padding:0,margin:0}),Na=jr("li")({marginBottom:10,display:"flex",alignItems:"center"}),La=jr("span")({background:"#f1f3f4",border:"1px solid #dadce0",borderRadius:4,padding:"2px 8px",fontFamily:"monospace",fontSize:14,marginRight:10,color:"#174ea6",minWidth:60,textAlign:"center",display:"inline-block"}),$a=jr("div")({fontSize:14,color:"#5f6368",margin:"15px 0",lineHeight:1.4}),Ma=jr("div")({fontSize:12,color:"#80868b",marginTop:25,borderTop:"1px solid #dadce0",paddingTop:10,textAlign:"center",lineHeight:1.5}),Ra=jr("a")({color:"#1a73e8",textDecoration:"none","&:hover":{textDecoration:"underline"},marginLeft:4,marginRight:4});u.createRoot(document.getElementById("root")).render((0,o.jsx)(l.StrictMode,{children:(0,o.jsx)((function(){return(0,o.jsx)(va,{theme:Ea,children:(0,o.jsxs)(Pa,{children:[(0,o.jsxs)(_a,{children:[(0,o.jsx)(Ta,{src:"icons/icon128.png",alt:"Extension Icon"}),(0,o.jsx)(za,{children:Ca})]}),(0,o.jsx)(Aa,{children:"Shortcuts & Hotkeys"}),(0,o.jsxs)(Oa,{children:[(0,o.jsxs)(Na,{children:[(0,o.jsx)(La,{children:"Ctrl + Shift + S"}),(0,o.jsx)("span",{children:"Select current calendar event"})]}),(0,o.jsxs)(Na,{children:[(0,o.jsx)(La,{children:"Ctrl + Shift + C"}),(0,o.jsx)("span",{children:"Clear selected event"})]}),(0,o.jsxs)(Na,{children:[(0,o.jsx)(La,{children:"Ctrl + Shift + O"}),(0,o.jsx)("span",{children:"Open Google Calendar"})]})]}),(0,o.jsxs)($a,{children:["Use these shortcuts while viewing Google Calendar to quickly select or clear events.",(0,o.jsx)("br",{}),"You can customize hotkeys in your browser's extension settings."]}),(0,o.jsx)(Aa,{children:"Support"}),(0,o.jsxs)($a,{children:["Need help or want to report an issue?",(0,o.jsx)("br",{}),(0,o.jsx)(Ra,{href:"".concat(xa,"/issues"),target:"_blank",rel:"noopener noreferrer",children:"Get Support"})]}),(0,o.jsxs)(Ma,{children:["© ",(new Date).getFullYear()," ",Ca," ",wa,(0,o.jsx)("br",{}),"Not affiliated with Google LLC.",(0,o.jsx)("br",{}),(0,o.jsx)(Ra,{href:xa,target:"_blank",rel:"noopener noreferrer",children:"View Source"})]})]})})}),{})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,