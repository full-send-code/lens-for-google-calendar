/*! For license information please see content.js.LICENSE.txt */
(()=>{var e,t,n={72:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case g:case h:case s:return e;default:return t}}case o:return t}}}function x(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return x(e)||S(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===p},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===h},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===f||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===p||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},146:(e,t,n)=>{"use strict";var r=n(404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=f(n);o&&o!==m&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),h=s(n),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||r&&r[y]||h&&h[y]||l&&l[y])){var v=p(n,y);try{u(t,y,v)}catch(e){}}}}return t}},221:(e,t,n)=>{"use strict";var r=n(540);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var i={d:{f:a,r:function(){throw Error(o(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(o(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=t,i.p=n,i.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,i.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),o="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?i.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:a}):"script"===n&&i.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);i.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&i.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);i.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);i.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else i.d.m(e)},t.requestFormReset=function(e){i.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{"use strict";var r=n(982),o=n(540),a=n(961);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function s(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function u(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(s(e)!==e)throw Error(i(188))}function d(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=d(e)))return t;e=e.sibling}return null}var p=Object.assign,f=Symbol.for("react.element"),m=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),w=Symbol.for("react.consumer"),S=Symbol.for("react.context"),x=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),E=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope");var T=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var O=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var R=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var z=Symbol.for("react.client.reference");function A(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===z?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case v:return"Profiler";case y:return"StrictMode";case k:return"Suspense";case C:return"SuspenseList";case T:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case S:return(e.displayName||"Context")+".Provider";case w:return(e._context.displayName||"Context")+".Consumer";case x:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case E:return null!==(t=e.displayName||null)?t:A(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return A(e(t))}catch(e){}}return null}var N=Array.isArray,L=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,$=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,_={pending:!1,data:null,method:null,action:null},I=[],j=-1;function F(e){return{current:e}}function D(e){0>j||(e.current=I[j],I[j]=null,j--)}function B(e,t){j++,I[j]=e.current,e.current=t}var W=F(null),H=F(null),V=F(null),U=F(null);function q(e,t){switch(B(V,t),B(H,e),B(W,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?od(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=ad(t=od(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}D(W),B(W,e)}function K(){D(W),D(H),D(V)}function G(e){null!==e.memoizedState&&B(U,e);var t=W.current,n=ad(t,e.type);t!==n&&(B(H,e),B(W,n))}function Q(e){H.current===e&&(D(W),D(H)),U.current===e&&(D(U),Gd._currentValue=_)}var X=Object.prototype.hasOwnProperty,Y=r.unstable_scheduleCallback,Z=r.unstable_cancelCallback,J=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,oe=r.unstable_UserBlockingPriority,ae=r.unstable_NormalPriority,ie=r.unstable_LowPriority,le=r.unstable_IdlePriority,se=r.log,ue=r.unstable_setDisableYieldValue,ce=null,de=null;function pe(e){if("function"==typeof se&&ue(e),de&&"function"==typeof de.setStrictMode)try{de.setStrictMode(ce,e)}catch(e){}}var fe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(me(e)/he|0)|0},me=Math.log,he=Math.LN2,ge=256,ye=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var o=0,a=e.suspendedLanes,i=e.pingedLanes;e=e.warmLanes;var l=134217727&r;return 0!==l?0!==(r=l&~a)?o=ve(r):0!==(i&=l)?o=ve(i):n||0!==(n=l&~e)&&(o=ve(n)):0!==(l=r&~a)?o=ve(l):0!==i?o=ve(i):n||0!==(n=r&~e)&&(o=ve(n)),0===o?0:0!==t&&t!==o&&0===(t&a)&&((a=o&-o)>=(n=t&-t)||32===a&&4194048&n)?t:o}function we(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Se(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function xe(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function ke(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ee(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Pe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-fe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Te(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-fe(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function Oe(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Re(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Me(){var e=$.p;return 0!==e?e:void 0===(e=window.event)?32:up(e.type)}var ze=Math.random().toString(36).slice(2),Ae="__reactFiber$"+ze,Ne="__reactProps$"+ze,Le="__reactContainer$"+ze,$e="__reactEvents$"+ze,_e="__reactListeners$"+ze,Ie="__reactHandles$"+ze,je="__reactResources$"+ze,Fe="__reactMarker$"+ze;function De(e){delete e[Ae],delete e[Ne],delete e[$e],delete e[_e],delete e[Ie]}function Be(e){var t=e[Ae];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Le]||n[Ae]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=bd(e);null!==e;){if(n=e[Ae])return n;e=bd(e)}return t}n=(e=n).parentNode}return null}function We(e){if(e=e[Ae]||e[Le]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function He(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function Ve(e){var t=e[je];return t||(t=e[je]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ue(e){e[Fe]=!0}var qe=new Set,Ke={};function Ge(e,t){Qe(e,t),Qe(e+"Capture",t)}function Qe(e,t){for(Ke[e]=t,e=0;e<t.length;e++)qe.add(t[e])}var Xe,Ye,Ze=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Je={},et={};function tt(e,t,n){if(o=t,X.call(et,o)||!X.call(Je,o)&&(Ze.test(o)?et[o]=!0:(Je[o]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var o}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ot(e){if(void 0===Xe)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Xe=t&&t[1]||"",Ye=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xe+e+Ye}var at=!1;function it(e,t){if(!e||at)return"";at=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),i=a[0],l=a[1];if(i&&l){var s=i.split("\n"),u=l.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<u.length&&!u[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===u.length)for(r=s.length-1,o=u.length-1;1<=r&&0<=o&&s[r]!==u[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==u[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==u[o]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{at=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?ot(n):""}function lt(e){switch(e.tag){case 26:case 27:case 5:return ot(e.type);case 16:return ot("Lazy");case 13:return ot("Suspense");case 19:return ot("SuspenseList");case 0:case 15:return it(e.type,!1);case 11:return it(e.type.render,!1);case 1:return it(e.type,!0);case 31:return ot("Activity");default:return""}}function st(e){try{var t="";do{t+=lt(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function dt(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function pt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,o,a,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?vt(e,i,ut(t)):null!=n?vt(e,i,ut(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+ut(l):e.removeAttribute("name")}function yt(e,t,n,r,o,a,i,l){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function vt(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function wt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function St(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(N(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function xt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Et(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in t)r=t[o],t.hasOwnProperty(o)&&n[o]!==r&&Ct(e,o,r)}else for(var a in t)t.hasOwnProperty(a)&&Ct(e,a,t[a])}function Pt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Tt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Ot=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Rt(e){return Ot.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Mt=null;function zt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var At=null,Nt=null;function Lt(e){var t=We(e);if(t&&(e=t.stateNode)){var n=e[Ne]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[Ne]||null;if(!o)throw Error(i(90));gt(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&pt(r)}break e;case"textarea":wt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var $t=!1;function _t(e,t,n){if($t)return e(t,n);$t=!0;try{return e(t)}finally{if($t=!1,(null!==At||null!==Nt)&&(Bu(),At&&(t=At,e=Nt,Nt=At=null,Lt(t),e)))for(t=0;t<e.length;t++)Lt(e[t])}}function It(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Ne]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var jt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ft=!1;if(jt)try{var Dt={};Object.defineProperty(Dt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",Dt,Dt),window.removeEventListener("test",Dt,Dt)}catch(e){Ft=!1}var Bt=null,Wt=null,Ht=null;function Vt(){if(Ht)return Ht;var e,t,n=Wt,r=n.length,o="value"in Bt?Bt.value:Bt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Ht=o.slice(e,1<t?1-t:void 0)}function Ut(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function qt(){return!0}function Kt(){return!1}function Gt(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?qt:Kt,this.isPropagationStopped=Kt,this}return p(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qt)},persist:function(){},isPersistent:qt}),t}var Qt,Xt,Yt,Zt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jt=Gt(Zt),en=p({},Zt,{view:0,detail:0}),tn=Gt(en),nn=p({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Yt&&(Yt&&"mousemove"===e.type?(Qt=e.screenX-Yt.screenX,Xt=e.screenY-Yt.screenY):Xt=Qt=0,Yt=e),Qt)},movementY:function(e){return"movementY"in e?e.movementY:Xt}}),rn=Gt(nn),on=Gt(p({},nn,{dataTransfer:0})),an=Gt(p({},en,{relatedTarget:0})),ln=Gt(p({},Zt,{animationName:0,elapsedTime:0,pseudoElement:0})),sn=Gt(p({},Zt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Gt(p({},Zt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=pn[e])&&!!t[e]}function mn(){return fn}var hn=Gt(p({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ut(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?dn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:mn,charCode:function(e){return"keypress"===e.type?Ut(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ut(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Gt(p({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yn=Gt(p({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:mn})),vn=Gt(p({},Zt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Gt(p({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),wn=Gt(p({},Zt,{newState:0,oldState:0})),Sn=[9,13,27,32],xn=jt&&"CompositionEvent"in window,kn=null;jt&&"documentMode"in document&&(kn=document.documentMode);var Cn=jt&&"TextEvent"in window&&!kn,En=jt&&(!xn||kn&&8<kn&&11>=kn),Pn=String.fromCharCode(32),Tn=!1;function On(e,t){switch(e){case"keyup":return-1!==Sn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Rn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Mn=!1,zn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function An(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!zn[e.type]:"textarea"===t}function Nn(e,t,n,r){At?Nt?Nt.push(r):Nt=[r]:At=r,0<(t=Vc(t,"onChange")).length&&(n=new Jt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Ln=null,$n=null;function _n(e){_c(e,0)}function In(e){if(pt(He(e)))return e}function jn(e,t){if("change"===e)return t}var Fn=!1;if(jt){var Dn;if(jt){var Bn="oninput"in document;if(!Bn){var Wn=document.createElement("div");Wn.setAttribute("oninput","return;"),Bn="function"==typeof Wn.oninput}Dn=Bn}else Dn=!1;Fn=Dn&&(!document.documentMode||9<document.documentMode)}function Hn(){Ln&&(Ln.detachEvent("onpropertychange",Vn),$n=Ln=null)}function Vn(e){if("value"===e.propertyName&&In($n)){var t=[];Nn(t,$n,e,zt(e)),_t(_n,t)}}function Un(e,t,n){"focusin"===e?(Hn(),$n=n,(Ln=t).attachEvent("onpropertychange",Vn)):"focusout"===e&&Hn()}function qn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return In($n)}function Kn(e,t){if("click"===e)return In(t)}function Gn(e,t){if("input"===e||"change"===e)return In(t)}var Qn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Xn(e,t){if(Qn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!X.call(t,o)||!Qn(e[o],t[o]))return!1}return!0}function Yn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Zn(e,t){var n,r=Yn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Yn(r)}}function Jn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Jn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=jt&&"documentMode"in document&&11>=document.documentMode,rr=null,or=null,ar=null,ir=!1;function lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ir||null==rr||rr!==ft(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Xn(ar,r)||(ar=r,0<(r=Vc(or,"onSelect")).length&&(t=new Jt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:sr("Animation","AnimationEnd"),animationiteration:sr("Animation","AnimationIteration"),animationstart:sr("Animation","AnimationStart"),transitionrun:sr("Transition","TransitionRun"),transitionstart:sr("Transition","TransitionStart"),transitioncancel:sr("Transition","TransitionCancel"),transitionend:sr("Transition","TransitionEnd")},cr={},dr={};function pr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in dr)return cr[e]=n[t];return e}jt&&(dr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var fr=pr("animationend"),mr=pr("animationiteration"),hr=pr("animationstart"),gr=pr("transitionrun"),yr=pr("transitionstart"),vr=pr("transitioncancel"),br=pr("transitionend"),wr=new Map,Sr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function xr(e,t){wr.set(e,t),Ge(t,[e])}Sr.push("scrollEnd");var kr=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=kr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:st(t)},kr.set(e,t),t)}return{value:e,source:t,stack:st(t)}}var Er=[],Pr=0,Tr=0;function Or(){for(var e=Pr,t=Tr=Pr=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var o=Er[t];Er[t++]=null;var a=Er[t];if(Er[t++]=null,null!==r&&null!==o){var i=r.pending;null===i?o.next=o:(o.next=i.next,i.next=o),r.pending=o}0!==a&&Ar(n,o,a)}}function Rr(e,t,n,r){Er[Pr++]=e,Er[Pr++]=t,Er[Pr++]=n,Er[Pr++]=r,Tr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Mr(e,t,n,r){return Rr(e,t,n,r),Nr(e)}function zr(e,t){return Rr(e,null,null,t),Nr(e)}function Ar(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(o=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,o&&null!==t&&(o=31-fe(n),null===(r=(e=a.hiddenUpdates)[o])?e[o]=[t]:r.push(t),t.lane=536870912|n),a):null}function Nr(e){if(50<Au)throw Au=0,Nu=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={};function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _r(e,t,n,r){return new $r(e,t,n,r)}function Ir(e){return!(!(e=e.prototype)||!e.isReactComponent)}function jr(e,t){var n=e.alternate;return null===n?((n=_r(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Fr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Dr(e,t,n,r,o,a){var l=0;if(r=e,"function"==typeof e)Ir(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,W.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case T:return(e=_r(31,n,t,o)).elementType=T,e.lanes=a,e;case g:return Br(n.children,o,a,t);case y:l=8,o|=24;break;case v:return(e=_r(12,n,t,2|o)).elementType=v,e.lanes=a,e;case k:return(e=_r(13,n,t,o)).elementType=k,e.lanes=a,e;case C:return(e=_r(19,n,t,o)).elementType=C,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case S:l=10;break e;case w:l=9;break e;case x:l=11;break e;case E:l=14;break e;case P:l=16,r=null;break e}l=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=_r(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Br(e,t,n,r){return(e=_r(7,e,r,t)).lanes=n,e}function Wr(e,t,n){return(e=_r(6,e,null,t)).lanes=n,e}function Hr(e,t,n){return(t=_r(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Vr=[],Ur=0,qr=null,Kr=0,Gr=[],Qr=0,Xr=null,Yr=1,Zr="";function Jr(e,t){Vr[Ur++]=Kr,Vr[Ur++]=qr,qr=e,Kr=t}function eo(e,t,n){Gr[Qr++]=Yr,Gr[Qr++]=Zr,Gr[Qr++]=Xr,Xr=e;var r=Yr;e=Zr;var o=32-fe(r)-1;r&=~(1<<o),n+=1;var a=32-fe(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Yr=1<<32-fe(t)+o|n<<o|r,Zr=a+e}else Yr=1<<a|n<<o|r,Zr=e}function to(e){null!==e.return&&(Jr(e,1),eo(e,1,0))}function no(e){for(;e===qr;)qr=Vr[--Ur],Vr[Ur]=null,Kr=Vr[--Ur],Vr[Ur]=null;for(;e===Xr;)Xr=Gr[--Qr],Gr[Qr]=null,Zr=Gr[--Qr],Gr[Qr]=null,Yr=Gr[--Qr],Gr[Qr]=null}var ro=null,oo=null,ao=!1,io=null,lo=!1,so=Error(i(519));function uo(e){throw go(Cr(Error(i(418,"")),e)),so}function co(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ae]=e,t[Ne]=r,n){case"dialog":Ic("cancel",t),Ic("close",t);break;case"iframe":case"object":case"embed":Ic("load",t);break;case"video":case"audio":for(n=0;n<Lc.length;n++)Ic(Lc[n],t);break;case"source":Ic("error",t);break;case"img":case"image":case"link":Ic("error",t),Ic("load",t);break;case"details":Ic("toggle",t);break;case"input":Ic("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dt(t);break;case"select":Ic("invalid",t);break;case"textarea":Ic("invalid",t),St(t,r.value,r.defaultValue,r.children),dt(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Xc(t.textContent,n)?(null!=r.popover&&(Ic("beforetoggle",t),Ic("toggle",t)),null!=r.onScroll&&Ic("scroll",t),null!=r.onScrollEnd&&Ic("scrollend",t),null!=r.onClick&&(t.onclick=Yc),t=!0):t=!1,t||uo(e)}function po(e){for(ro=e.return;ro;)switch(ro.tag){case 5:case 13:return void(lo=!1);case 27:case 3:return void(lo=!0);default:ro=ro.return}}function fo(e){if(e!==ro)return!1;if(!ao)return po(e),ao=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||id(e.type,e.memoizedProps)),t=!t),t&&oo&&uo(e),po(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){oo=yd(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}oo=null}}else 27===n?(n=oo,fd(e.type)?(e=vd,vd=null,oo=e):oo=n):oo=ro?yd(e.stateNode.nextSibling):null;return!0}function mo(){oo=ro=null,ao=!1}function ho(){var e=io;return null!==e&&(null===bu?bu=e:bu.push.apply(bu,e),io=null),e}function go(e){null===io?io=[e]:io.push(e)}var yo=F(null),vo=null,bo=null;function wo(e,t,n){B(yo,t._currentValue),t._currentValue=n}function So(e){e._currentValue=yo.current,D(yo)}function xo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ko(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var l=o.child;a=a.firstContext;e:for(;null!==a;){var s=a;a=o;for(var u=0;u<t.length;u++)if(s.context===t[u]){a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),xo(a.return,n,e),r||(l=null);break e}a=s.next}}else if(18===o.tag){if(null===(l=o.return))throw Error(i(341));l.lanes|=n,null!==(a=l.alternate)&&(a.lanes|=n),xo(l,n,e),l=null}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===e){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}}function Co(e,t,n,r){e=null;for(var o=t,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var l=o.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=o.type;Qn(o.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(o===U.current){if(null===(l=o.alternate))throw Error(i(387));l.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Gd):e=[Gd])}o=o.return}null!==e&&ko(t,e,n,r),t.flags|=262144}function Eo(e){for(e=e.firstContext;null!==e;){if(!Qn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Po(e){vo=e,bo=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function To(e){return Ro(vo,e)}function Oo(e,t){return null===vo&&Po(e),Ro(e,t)}function Ro(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===bo){if(null===e)throw Error(i(308));bo=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else bo=bo.next=t;return n}var Mo="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},zo=r.unstable_scheduleCallback,Ao=r.unstable_NormalPriority,No={$$typeof:S,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Lo(){return{controller:new Mo,data:new Map,refCount:0}}function $o(e){e.refCount--,0===e.refCount&&zo(Ao,(function(){e.controller.abort()}))}var _o=null,Io=0,jo=0,Fo=null;function Do(){if(0===--Io&&null!==_o){null!==Fo&&(Fo.status="fulfilled");var e=_o;_o=null,jo=0,Fo=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Bo=L.S;L.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===_o){var n=_o=[];Io=0,jo=Rc(),Fo={status:"pending",value:void 0,then:function(e){n.push(e)}}}Io++,t.then(Do,Do)}(0,t),null!==Bo&&Bo(e,t)};var Wo=F(null);function Ho(){var e=Wo.current;return null!==e?e:ru.pooledCache}function Vo(e,t){B(Wo,null===t?Wo.current:t.pool)}function Uo(){var e=Ho();return null===e?null:{parent:No._currentValue,pool:e}}var qo=Error(i(460)),Ko=Error(i(474)),Go=Error(i(542)),Qo={then:function(){}};function Xo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Yo(){}function Zo(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Yo,Yo),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw ta(e=t.reason),e;default:if("string"==typeof t.status)t.then(Yo,Yo);else{if(null!==(e=ru)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw ta(e=t.reason),e}throw Jo=t,qo}}var Jo=null;function ea(){if(null===Jo)throw Error(i(459));var e=Jo;return Jo=null,e}function ta(e){if(e===qo||e===Go)throw Error(i(483))}var na=!1;function ra(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function oa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function aa(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&nu){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=Nr(e),Ar(e,null,n),t}return Rr(e,r,t,n),Nr(e)}function la(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var ua=!1;function ca(){if(ua&&null!==Fo)throw Fo}function da(e,t,n,r){ua=!1;var o=e.updateQueue;na=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var f=-536870913&l.lane,m=f!==l.lane;if(m?(au&f)===f:(r&f)===f){0!==f&&f===jo&&(ua=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var h=e,g=l;f=t;var y=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(y,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=g.payload)?h.call(y,d,f):h))break e;d=p({},d,f);break e;case 2:na=!0}}null!==(f=l.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=o.callbacks)?o.callbacks=[f]:m.push(f))}else m={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=m,s=d):c=c.next=m,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(m=l).next,m.next=null,o.lastBaseUpdate=m,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),fu|=i,e.lanes=i,e.memoizedState=d}}function pa(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function fa(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)pa(n[e],t)}var ma=F(null),ha=F(0);function ga(e,t){B(ha,e=du),B(ma,t),du=e|t.baseLanes}function ya(){B(ha,du),B(ma,ma.current)}function va(){du=ha.current,D(ma),D(ha)}var ba=0,wa=null,Sa=null,xa=null,ka=!1,Ca=!1,Ea=!1,Pa=0,Ta=0,Oa=null,Ra=0;function Ma(){throw Error(i(321))}function za(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Qn(e[n],t[n]))return!1;return!0}function Aa(e,t,n,r,o,a){return ba=a,wa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,L.H=null===e||null===e.memoizedState?qi:Ki,Ea=!1,a=n(r,o),Ea=!1,Ca&&(a=La(t,n,r,o)),Na(e),a}function Na(e){L.H=Ui;var t=null!==Sa&&null!==Sa.next;if(ba=0,xa=Sa=wa=null,ka=!1,Ta=0,Oa=null,t)throw Error(i(300));null===e||Tl||null!==(e=e.dependencies)&&Eo(e)&&(Tl=!0)}function La(e,t,n,r){wa=e;var o=0;do{if(Ca&&(Oa=null),Ta=0,Ca=!1,25<=o)throw Error(i(301));if(o+=1,xa=Sa=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}L.H=Gi,a=t(n,r)}while(Ca);return a}function $a(){var e=L.H,t=e.useState()[0];return t="function"==typeof t.then?Ba(t):t,e=e.useState()[0],(null!==Sa?Sa.memoizedState:null)!==e&&(wa.flags|=1024),t}function _a(){var e=0!==Pa;return Pa=0,e}function Ia(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function ja(e){if(ka){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}ka=!1}ba=0,xa=Sa=wa=null,Ca=!1,Ta=Pa=0,Oa=null}function Fa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===xa?wa.memoizedState=xa=e:xa=xa.next=e,xa}function Da(){if(null===Sa){var e=wa.alternate;e=null!==e?e.memoizedState:null}else e=Sa.next;var t=null===xa?wa.memoizedState:xa.next;if(null!==t)xa=t,Sa=e;else{if(null===e){if(null===wa.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(Sa=e).memoizedState,baseState:Sa.baseState,baseQueue:Sa.baseQueue,queue:Sa.queue,next:null},null===xa?wa.memoizedState=xa=e:xa=xa.next=e}return xa}function Ba(e){var t=Ta;return Ta+=1,null===Oa&&(Oa=[]),e=Zo(Oa,e,t),t=wa,null===(null===xa?t.memoizedState:xa.next)&&(t=t.alternate,L.H=null===t||null===t.memoizedState?qi:Ki),e}function Wa(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ba(e);if(e.$$typeof===S)return To(e)}throw Error(i(438,String(e)))}function Ha(e){var t=null,n=wa.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=wa.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},wa.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=O;return t.index++,n}function Va(e,t){return"function"==typeof t?t(e):t}function Ua(e){return qa(Da(),Sa,e)}function qa(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}t.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var s=l=null,u=null,c=t=o.next,d=!1;do{var p=-536870913&c.lane;if(p!==c.lane?(au&p)===p:(ba&p)===p){var f=c.revertLane;if(0===f)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),p===jo&&(d=!0);else{if((ba&f)===f){c=c.next,f===jo&&(d=!0);continue}p={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,l=a):u=u.next=p,wa.lanes|=f,fu|=f}p=c.action,Ea&&n(a,p),a=c.hasEagerState?c.eagerState:n(a,p)}else f={lane:p,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,l=a):u=u.next=f,wa.lanes|=p,fu|=p;c=c.next}while(null!==c&&c!==t);if(null===u?l=a:u.next=s,!Qn(a,e.memoizedState)&&(Tl=!0,d&&null!==(n=Fo)))throw n;e.memoizedState=a,e.baseState=l,e.baseQueue=u,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ka(e){var t=Da(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Qn(a,t.memoizedState)||(Tl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ga(e,t,n){var r=wa,o=Da(),a=ao;if(a){if(void 0===n)throw Error(i(407));n=n()}else n=t();var l=!Qn((Sa||o).memoizedState,n);if(l&&(o.memoizedState=n,Tl=!0),o=o.queue,yi(2048,8,Ya.bind(null,r,o,e),[e]),o.getSnapshot!==t||l||null!==xa&&1&xa.memoizedState.tag){if(r.flags|=2048,mi(9,{destroy:void 0,resource:void 0},Xa.bind(null,r,o,n,t),null),null===ru)throw Error(i(349));a||124&ba||Qa(r,t,n)}return n}function Qa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=wa.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},wa.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Xa(e,t,n,r){t.value=n,t.getSnapshot=r,Za(t)&&Ja(e)}function Ya(e,t,n){return n((function(){Za(t)&&Ja(e)}))}function Za(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Qn(e,n)}catch(e){return!0}}function Ja(e){var t=zr(e,2);null!==t&&_u(t,0,2)}function ei(e){var t=Fa();if("function"==typeof e){var n=e;if(e=n(),Ea){pe(!0);try{n()}finally{pe(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:e},t}function ti(e,t,n,r){return e.baseState=n,qa(e,Sa,"function"==typeof r?r:Va)}function ni(e,t,n,r,o){if(Wi(e))throw Error(i(485));if(null!==(e=t.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==L.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,ri(t,a)):(a.next=n.next,t.pending=n.next=a)}}function ri(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var a=L.T,i={};L.T=i;try{var l=n(o,r),s=L.S;null!==s&&s(i,l),oi(e,t,l)}catch(n){ii(e,t,n)}finally{L.T=a}}else try{oi(e,t,a=n(o,r))}catch(n){ii(e,t,n)}}function oi(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){ai(e,t,n)}),(function(n){return ii(e,t,n)})):ai(e,t,n)}function ai(e,t,n){t.status="fulfilled",t.value=n,li(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,ri(e,n)))}function ii(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,li(t),t=t.next}while(t!==r)}e.action=null}function li(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function si(e,t){return t}function ui(e,t){if(ao){var n=ru.formState;if(null!==n){e:{var r=wa;if(ao){if(oo){t:{for(var o=oo,a=lo;8!==o.nodeType;){if(!a){o=null;break t}if(null===(o=yd(o.nextSibling))){o=null;break t}}o="F!"===(a=o.data)||"F"===a?o:null}if(o){oo=yd(o.nextSibling),r="F!"===o.data;break e}}uo(r)}r=!1}r&&(t=n[0])}}return(n=Fa()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:si,lastRenderedState:t},n.queue=r,n=Fi.bind(null,wa,r),r.dispatch=n,r=ei(!1),a=Bi.bind(null,wa,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=Fa()).queue=o,n=ni.bind(null,wa,o,a,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function ci(e){return di(Da(),Sa,e)}function di(e,t,n){if(t=qa(e,t,si)[0],e=Ua(Va)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Ba(t)}catch(e){if(e===qo)throw Go;throw e}else r=t;var o=(t=Da()).queue,a=o.dispatch;return n!==t.memoizedState&&(wa.flags|=2048,mi(9,{destroy:void 0,resource:void 0},pi.bind(null,o,n),null)),[r,a,e]}function pi(e,t){e.action=t}function fi(e){var t=Da(),n=Sa;if(null!==n)return di(t,n,e);Da(),t=t.memoizedState;var r=(n=Da()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function mi(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=wa.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},wa.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(){return Da().memoizedState}function gi(e,t,n,r){var o=Fa();r=void 0===r?null:r,wa.flags|=e,o.memoizedState=mi(1|t,{destroy:void 0,resource:void 0},n,r)}function yi(e,t,n,r){var o=Da();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==Sa&&null!==r&&za(r,Sa.memoizedState.deps)?o.memoizedState=mi(t,a,n,r):(wa.flags|=e,o.memoizedState=mi(1|t,a,n,r))}function vi(e,t){gi(8390656,8,e,t)}function bi(e,t){yi(2048,8,e,t)}function wi(e,t){return yi(4,2,e,t)}function Si(e,t){return yi(4,4,e,t)}function xi(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ki(e,t,n){n=null!=n?n.concat([e]):null,yi(4,4,xi.bind(null,t,e),n)}function Ci(){}function Ei(e,t){var n=Da();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&za(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pi(e,t){var n=Da();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&za(t,r[1]))return r[0];if(r=e(),Ea){pe(!0);try{e()}finally{pe(!1)}}return n.memoizedState=[r,t],r}function Ti(e,t,n){return void 0===n||1073741824&ba?e.memoizedState=t:(e.memoizedState=n,e=$u(),wa.lanes|=e,fu|=e,n)}function Oi(e,t,n,r){return Qn(n,t)?n:null!==ma.current?(e=Ti(e,n,r),Qn(e,t)||(Tl=!0),e):42&ba?(e=$u(),wa.lanes|=e,fu|=e,t):(Tl=!0,e.memoizedState=n)}function Ri(e,t,n,r,o){var a=$.p;$.p=0!==a&&8>a?a:8;var i,l,s,u=L.T,c={};L.T=c,Bi(e,!1,t,n);try{var d=o(),p=L.S;null!==p&&p(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?Di(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),Lu()):Di(e,t,r,Lu())}catch(n){Di(e,t,{then:function(){},status:"rejected",reason:n},Lu())}finally{$.p=a,L.T=u}}function Mi(){}function zi(e,t,n,r){if(5!==e.tag)throw Error(i(476));var o=Ai(e).queue;Ri(e,o,t,_,null===n?Mi:function(){return Ni(e),n(r)})}function Ai(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:_,baseState:_,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:_},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Ni(e){Di(e,Ai(e).next.queue,{},Lu())}function Li(){return To(Gd)}function $i(){return Da().memoizedState}function _i(){return Da().memoizedState}function Ii(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Lu(),r=ia(t,e=aa(n),n);return null!==r&&(_u(r,0,n),la(r,t,n)),t={cache:Lo()},void(e.payload=t)}t=t.return}}function ji(e,t,n){var r=Lu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Wi(e)?Hi(t,n):null!==(n=Mr(e,t,n,r))&&(_u(n,0,r),Vi(n,t,r))}function Fi(e,t,n){Di(e,t,n,Lu())}function Di(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Wi(e))Hi(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,Qn(l,i))return Rr(e,t,o,0),null===ru&&Or(),!1}catch(e){}if(null!==(n=Mr(e,t,o,r)))return _u(n,0,r),Vi(n,t,r),!0}return!1}function Bi(e,t,n,r){if(r={lane:2,revertLane:Rc(),action:r,hasEagerState:!1,eagerState:null,next:null},Wi(e)){if(t)throw Error(i(479))}else null!==(t=Mr(e,n,r,2))&&_u(t,0,2)}function Wi(e){var t=e.alternate;return e===wa||null!==t&&t===wa}function Hi(e,t){Ca=ka=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Vi(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}var Ui={readContext:To,use:Wa,useCallback:Ma,useContext:Ma,useEffect:Ma,useImperativeHandle:Ma,useLayoutEffect:Ma,useInsertionEffect:Ma,useMemo:Ma,useReducer:Ma,useRef:Ma,useState:Ma,useDebugValue:Ma,useDeferredValue:Ma,useTransition:Ma,useSyncExternalStore:Ma,useId:Ma,useHostTransitionStatus:Ma,useFormState:Ma,useActionState:Ma,useOptimistic:Ma,useMemoCache:Ma,useCacheRefresh:Ma},qi={readContext:To,use:Wa,useCallback:function(e,t){return Fa().memoizedState=[e,void 0===t?null:t],e},useContext:To,useEffect:vi,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,gi(4194308,4,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gi(4194308,4,e,t)},useInsertionEffect:function(e,t){gi(4,2,e,t)},useMemo:function(e,t){var n=Fa();t=void 0===t?null:t;var r=e();if(Ea){pe(!0);try{e()}finally{pe(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Fa();if(void 0!==n){var o=n(t);if(Ea){pe(!0);try{n(t)}finally{pe(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=ji.bind(null,wa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Fa().memoizedState=e},useState:function(e){var t=(e=ei(e)).queue,n=Fi.bind(null,wa,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Ci,useDeferredValue:function(e,t){return Ti(Fa(),e,t)},useTransition:function(){var e=ei(!1);return e=Ri.bind(null,wa,e.queue,!0,!1),Fa().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=wa,o=Fa();if(ao){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===ru)throw Error(i(349));124&au||Qa(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,vi(Ya.bind(null,r,a,e),[e]),r.flags|=2048,mi(9,{destroy:void 0,resource:void 0},Xa.bind(null,r,a,n,t),null),n},useId:function(){var e=Fa(),t=ru.identifierPrefix;if(ao){var n=Zr;t="«"+t+"R"+(n=(Yr&~(1<<32-fe(Yr)-1)).toString(32)+n),0<(n=Pa++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Ra++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Li,useFormState:ui,useActionState:ui,useOptimistic:function(e){var t=Fa();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Bi.bind(null,wa,!0,n),n.dispatch=t,[e,t]},useMemoCache:Ha,useCacheRefresh:function(){return Fa().memoizedState=Ii.bind(null,wa)}},Ki={readContext:To,use:Wa,useCallback:Ei,useContext:To,useEffect:bi,useImperativeHandle:ki,useInsertionEffect:wi,useLayoutEffect:Si,useMemo:Pi,useReducer:Ua,useRef:hi,useState:function(){return Ua(Va)},useDebugValue:Ci,useDeferredValue:function(e,t){return Oi(Da(),Sa.memoizedState,e,t)},useTransition:function(){var e=Ua(Va)[0],t=Da().memoizedState;return["boolean"==typeof e?e:Ba(e),t]},useSyncExternalStore:Ga,useId:$i,useHostTransitionStatus:Li,useFormState:ci,useActionState:ci,useOptimistic:function(e,t){return ti(Da(),0,e,t)},useMemoCache:Ha,useCacheRefresh:_i},Gi={readContext:To,use:Wa,useCallback:Ei,useContext:To,useEffect:bi,useImperativeHandle:ki,useInsertionEffect:wi,useLayoutEffect:Si,useMemo:Pi,useReducer:Ka,useRef:hi,useState:function(){return Ka(Va)},useDebugValue:Ci,useDeferredValue:function(e,t){var n=Da();return null===Sa?Ti(n,e,t):Oi(n,Sa.memoizedState,e,t)},useTransition:function(){var e=Ka(Va)[0],t=Da().memoizedState;return["boolean"==typeof e?e:Ba(e),t]},useSyncExternalStore:Ga,useId:$i,useHostTransitionStatus:Li,useFormState:fi,useActionState:fi,useOptimistic:function(e,t){var n=Da();return null!==Sa?ti(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Ha,useCacheRefresh:_i},Qi=null,Xi=0;function Yi(e){var t=Xi;return Xi+=1,null===Qi&&(Qi=[]),Zo(Qi,e,t)}function Zi(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Ji(e,t){if(t.$$typeof===f)throw Error(i(525));throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function el(e){return(0,e._init)(e._payload)}function tl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=jr(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Wr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===g?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===P&&el(a)===t.type)?(Zi(t=o(t,n.props),n),t.return=e,t):(Zi(t=Dr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Br(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Wr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case m:return Zi(n=Dr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Hr(t,e.mode,n)).return=e,t;case P:return p(e,t=(0,t._init)(t._payload),n)}if(N(t)||M(t))return(t=Br(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return p(e,Yi(t),n);if(t.$$typeof===S)return p(e,Oo(e,t),n);Ji(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case m:return n.key===o?u(e,t,n,r):null;case h:return n.key===o?c(e,t,n,r):null;case P:return f(e,t,n=(o=n._init)(n._payload),r)}if(N(n)||M(n))return null!==o?null:d(e,t,n,r,null);if("function"==typeof n.then)return f(e,t,Yi(n),r);if(n.$$typeof===S)return f(e,t,Oo(e,n),r);Ji(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case m:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case P:return y(e,t,n,r=(0,r._init)(r._payload),o)}if(N(r)||M(r))return d(t,e=e.get(n)||null,r,o,null);if("function"==typeof r.then)return y(e,t,n,Yi(r),o);if(r.$$typeof===S)return y(e,t,n,Oo(t,r),o);Ji(t,r)}return null}function v(s,u,c,d){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case m:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===g){if(7===u.tag){n(s,u.sibling),(d=o(u,c.props.children)).return=s,s=d;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===P&&el(b)===u.type){n(s,u.sibling),Zi(d=o(u,c.props),c),d.return=s,s=d;break e}n(s,u);break}t(s,u),u=u.sibling}c.type===g?((d=Br(c.props.children,s.mode,d,c.key)).return=s,s=d):(Zi(d=Dr(c.type,c.key,c.props,null,s.mode,d),c),d.return=s,s=d)}return l(s);case h:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){n(s,u.sibling),(d=o(u,c.children||[])).return=s,s=d;break e}n(s,u);break}t(s,u),u=u.sibling}(d=Hr(c,s.mode,d)).return=s,s=d}return l(s);case P:return v(s,u,c=(b=c._init)(c._payload),d)}if(N(c))return function(o,i,l,s){for(var u=null,c=null,d=i,m=i=0,h=null;null!==d&&m<l.length;m++){d.index>m?(h=d,d=null):h=d.sibling;var g=f(o,d,l[m],s);if(null===g){null===d&&(d=h);break}e&&d&&null===g.alternate&&t(o,d),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g,d=h}if(m===l.length)return n(o,d),ao&&Jr(o,m),u;if(null===d){for(;m<l.length;m++)null!==(d=p(o,l[m],s))&&(i=a(d,i,m),null===c?u=d:c.sibling=d,c=d);return ao&&Jr(o,m),u}for(d=r(d);m<l.length;m++)null!==(h=y(d,o,m,l[m],s))&&(e&&null!==h.alternate&&d.delete(null===h.key?m:h.key),i=a(h,i,m),null===c?u=h:c.sibling=h,c=h);return e&&d.forEach((function(e){return t(o,e)})),ao&&Jr(o,m),u}(s,u,c,d);if(M(c)){if("function"!=typeof(b=M(c)))throw Error(i(150));return function(o,l,s,u){if(null==s)throw Error(i(151));for(var c=null,d=null,m=l,h=l=0,g=null,v=s.next();null!==m&&!v.done;h++,v=s.next()){m.index>h?(g=m,m=null):g=m.sibling;var b=f(o,m,v.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,h),null===d?c=b:d.sibling=b,d=b,m=g}if(v.done)return n(o,m),ao&&Jr(o,h),c;if(null===m){for(;!v.done;h++,v=s.next())null!==(v=p(o,v.value,u))&&(l=a(v,l,h),null===d?c=v:d.sibling=v,d=v);return ao&&Jr(o,h),c}for(m=r(m);!v.done;h++,v=s.next())null!==(v=y(m,o,h,v.value,u))&&(e&&null!==v.alternate&&m.delete(null===v.key?h:v.key),l=a(v,l,h),null===d?c=v:d.sibling=v,d=v);return e&&m.forEach((function(e){return t(o,e)})),ao&&Jr(o,h),c}(s,u,c=b.call(c),d)}if("function"==typeof c.then)return v(s,u,Yi(c),d);if(c.$$typeof===S)return v(s,u,Oo(s,c),d);Ji(s,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(n(s,u.sibling),(d=o(u,c)).return=s,s=d):(n(s,u),(d=Wr(c,s.mode,d)).return=s,s=d),l(s)):n(s,u)}return function(e,t,n,r){try{Xi=0;var o=v(e,t,n,r);return Qi=null,o}catch(t){if(t===qo||t===Go)throw t;var a=_r(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var nl=tl(!0),rl=tl(!1),ol=F(null),al=null;function il(e){var t=e.alternate;B(cl,1&cl.current),B(ol,e),null===al&&(null===t||null!==ma.current||null!==t.memoizedState)&&(al=e)}function ll(e){if(22===e.tag){if(B(cl,cl.current),B(ol,e),null===al){var t=e.alternate;null!==t&&null!==t.memoizedState&&(al=e)}}else sl()}function sl(){B(cl,cl.current),B(ol,ol.current)}function ul(e){D(ol),al===e&&(al=null),D(cl)}var cl=F(0);function dl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||gd(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function pl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:p({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var fl={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Lu(),o=aa(r);o.payload=t,null!=n&&(o.callback=n),null!==(t=ia(e,o,r))&&(_u(t,0,r),la(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Lu(),o=aa(r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=ia(e,o,r))&&(_u(t,0,r),la(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Lu(),r=aa(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ia(e,r,n))&&(_u(t,0,n),la(t,e,n))}};function ml(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&Xn(n,r)&&Xn(o,a))}function hl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&fl.enqueueReplaceState(t,t.state,null)}function gl(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=p({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}var yl="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function vl(e){yl(e)}function bl(e){console.error(e)}function wl(e){yl(e)}function Sl(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function xl(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function kl(e,t,n){return(n=aa(n)).tag=3,n.payload={element:null},n.callback=function(){Sl(e,t)},n}function Cl(e){return(e=aa(e)).tag=3,e}function El(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){xl(t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){xl(t,n,r),"function"!=typeof o&&(null===Cu?Cu=new Set([this]):Cu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Pl=Error(i(461)),Tl=!1;function Ol(e,t,n,r){t.child=null===e?rl(t,null,n,r):nl(t,e.child,n,r)}function Rl(e,t,n,r,o){n=n.render;var a=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return Po(t),r=Aa(e,t,n,i,a,o),l=_a(),null===e||Tl?(ao&&l&&to(t),t.flags|=1,Ol(e,t,r,o),t.child):(Ia(e,t,o),Ql(e,t,o))}function Ml(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ir(a)||void 0!==a.defaultProps||null!==n.compare?((e=Dr(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,zl(e,t,a,r,o))}if(a=e.child,!Xl(e,o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:Xn)(i,r)&&e.ref===t.ref)return Ql(e,t,o)}return t.flags|=1,(e=jr(a,r)).ref=t.ref,e.return=t,t.child=e}function zl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(Xn(a,r)&&e.ref===t.ref){if(Tl=!1,t.pendingProps=r=a,!Xl(e,o))return t.lanes=e.lanes,Ql(e,t,o);131072&e.flags&&(Tl=!0)}}return $l(e,t,n,r,o)}function Al(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(o=t.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Nl(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Nl(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Vo(0,null!==a?a.cachePool:null),null!==a?ga(t,a):ya(),ll(t)}else null!==a?(Vo(0,a.cachePool),ga(t,a),sl(),t.memoizedState=null):(null!==e&&Vo(0,null),ya(),sl());return Ol(e,t,o,n),t.child}function Nl(e,t,n,r){var o=Ho();return o=null===o?null:{parent:No._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&Vo(0,null),ya(),ll(t),null!==e&&Co(e,t,r,!0),null}function Ll(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function $l(e,t,n,r,o){return Po(t),n=Aa(e,t,n,r,void 0,o),r=_a(),null===e||Tl?(ao&&r&&to(t),t.flags|=1,Ol(e,t,n,o),t.child):(Ia(e,t,o),Ql(e,t,o))}function _l(e,t,n,r,o,a){return Po(t),t.updateQueue=null,n=La(t,r,n,o),Na(e),r=_a(),null===e||Tl?(ao&&r&&to(t),t.flags|=1,Ol(e,t,n,a),t.child):(Ia(e,t,a),Ql(e,t,a))}function Il(e,t,n,r,o){if(Po(t),null===t.stateNode){var a=Lr,i=n.contextType;"object"==typeof i&&null!==i&&(a=To(i)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=fl,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},ra(t),i=n.contextType,a.context="object"==typeof i&&null!==i?To(i):Lr,a.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(pl(t,n,i,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(i=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),i!==a.state&&fl.enqueueReplaceState(a,a.state,null),da(t,r,a,o),ca(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var l=t.memoizedProps,s=gl(n,l);a.props=s;var u=a.context,c=n.contextType;i=Lr,"object"==typeof c&&null!==c&&(i=To(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,l=t.pendingProps!==l,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l||u!==i)&&hl(t,a,r,i),na=!1;var p=t.memoizedState;a.state=p,da(t,r,a,o),ca(),u=t.memoizedState,l||p!==u||na?("function"==typeof d&&(pl(t,n,d,r),u=t.memoizedState),(s=na||ml(t,n,s,r,p,u,i))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=i,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,oa(e,t),c=gl(n,i=t.memoizedProps),a.props=c,d=t.pendingProps,p=a.context,u=n.contextType,s=Lr,"object"==typeof u&&null!==u&&(s=To(u)),(u="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==d||p!==s)&&hl(t,a,r,s),na=!1,p=t.memoizedState,a.state=p,da(t,r,a,o),ca();var f=t.memoizedState;i!==d||p!==f||na||null!==e&&null!==e.dependencies&&Eo(e.dependencies)?("function"==typeof l&&(pl(t,n,l,r),f=t.memoizedState),(c=na||ml(t,n,c,r,p,f,s)||null!==e&&null!==e.dependencies&&Eo(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,f,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,f,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Ll(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=nl(t,e.child,null,o),t.child=nl(t,null,n,o)):Ol(e,t,n,o),t.memoizedState=a.state,e=t.child):e=Ql(e,t,o),e}function jl(e,t,n,r){return mo(),t.flags|=256,Ol(e,t,n,r),t.child}var Fl={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Dl(e){return{baseLanes:e,cachePool:Uo()}}function Bl(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gu),e}function Wl(e,t,n){var r,o=t.pendingProps,a=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&cl.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(ao){if(a?il(t):sl(),ao){var s,u=oo;if(s=u){e:{for(s=u,u=lo;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=yd(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Xr?{id:Yr,overflow:Zr}:null,retryLane:536870912,hydrationErrors:null},(s=_r(18,null,null,0)).stateNode=u,s.return=t,t.child=s,ro=t,oo=null,s=!0):s=!1}s||uo(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return gd(u)?t.lanes=32:t.lanes=536870912,null;ul(t)}return u=o.children,o=o.fallback,a?(sl(),u=Vl({mode:"hidden",children:u},a=t.mode),o=Br(o,a,n,null),u.return=t,o.return=t,u.sibling=o,t.child=u,(a=t.child).memoizedState=Dl(n),a.childLanes=Bl(e,r,n),t.memoizedState=Fl,o):(il(t),Hl(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&t.flags?(il(t),t.flags&=-257,t=Ul(e,t,n)):null!==t.memoizedState?(sl(),t.child=e.child,t.flags|=128,t=null):(sl(),a=o.fallback,u=t.mode,o=Vl({mode:"visible",children:o.children},u),(a=Br(a,u,n,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,nl(t,e.child,null,n),(o=t.child).memoizedState=Dl(n),o.childLanes=Bl(e,r,n),t.memoizedState=Fl,t=a);else if(il(t),gd(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(i(419))).stack="",o.digest=r,go({value:o,source:null,stack:null}),t=Ul(e,t,n)}else if(Tl||Co(e,t,n,!1),r=0!==(n&e.childLanes),Tl||r){if(null!==(r=ru)&&0!==(o=0!==((o=42&(o=n&-n)?1:Oe(o))&(r.suspendedLanes|n))?0:o)&&o!==s.retryLane)throw s.retryLane=o,zr(e,o),_u(r,0,o),Pl;"$?"===u.data||Ku(),t=Ul(e,t,n)}else"$?"===u.data?(t.flags|=192,t.child=e.child,t=null):(e=s.treeContext,oo=yd(u.nextSibling),ro=t,ao=!0,io=null,lo=!1,null!==e&&(Gr[Qr++]=Yr,Gr[Qr++]=Zr,Gr[Qr++]=Xr,Yr=e.id,Zr=e.overflow,Xr=t),(t=Hl(t,o.children)).flags|=4096);return t}return a?(sl(),a=o.fallback,u=t.mode,c=(s=e.child).sibling,(o=jr(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?a=jr(c,a):(a=Br(a,u,n,null)).flags|=2,a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,null===(u=e.child.memoizedState)?u=Dl(n):(null!==(s=u.cachePool)?(c=No._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Uo(),u={baseLanes:u.baseLanes|n,cachePool:s}),a.memoizedState=u,a.childLanes=Bl(e,r,n),t.memoizedState=Fl,o):(il(t),e=(n=e.child).sibling,(n=jr(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Hl(e,t){return(t=Vl({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Vl(e,t){return(e=_r(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Ul(e,t,n){return nl(t,e.child,null,n),(e=Hl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ql(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xo(e.return,t,n)}function Kl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Gl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ol(e,t,r.children,n),2&(r=cl.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ql(e,n,t);else if(19===e.tag)ql(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(B(cl,r),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===dl(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Kl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===dl(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Kl(t,!0,n,null,a);break;case"together":Kl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ql(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),fu|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(Co(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=jr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=jr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xl(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!Eo(e))}function Yl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Tl=!0;else{if(!(Xl(e,n)||128&t.flags))return Tl=!1,function(e,t,n){switch(t.tag){case 3:q(t,t.stateNode.containerInfo),wo(0,No,e.memoizedState.cache),mo();break;case 27:case 5:G(t);break;case 4:q(t,t.stateNode.containerInfo);break;case 10:wo(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(il(t),t.flags|=128,null):0!==(n&t.child.childLanes)?Wl(e,t,n):(il(t),null!==(e=Ql(e,t,n))?e.sibling:null);il(t);break;case 19:var o=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(Co(e,t,n,!1),r=0!==(n&t.childLanes)),o){if(r)return Gl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),B(cl,cl.current),r)break;return null;case 22:case 23:return t.lanes=0,Al(e,t,n);case 24:wo(0,No,e.memoizedState.cache)}return Ql(e,t,n)}(e,t,n);Tl=!!(131072&e.flags)}else Tl=!1,ao&&1048576&t.flags&&eo(t,Kr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,o=r._init;if(r=o(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===x){t.tag=11,t=Rl(null,t,r,e,n);break e}if(o===E){t.tag=14,t=Ml(null,t,r,e,n);break e}}throw t=A(r)||r,Error(i(306,t,""))}Ir(r)?(e=gl(r,e),t.tag=1,t=Il(null,t,r,e,n)):(t.tag=0,t=$l(null,t,r,e,n))}return t;case 0:return $l(e,t,t.type,t.pendingProps,n);case 1:return Il(e,t,r=t.type,o=gl(r,t.pendingProps),n);case 3:e:{if(q(t,t.stateNode.containerInfo),null===e)throw Error(i(387));r=t.pendingProps;var a=t.memoizedState;o=a.element,oa(e,t),da(t,r,null,n);var l=t.memoizedState;if(r=l.cache,wo(0,No,r),r!==a.cache&&ko(t,[No],n,!0),ca(),r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=jl(e,t,r,n);break e}if(r!==o){go(o=Cr(Error(i(424)),t)),t=jl(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,oo=yd(e.firstChild),ro=t,ao=!0,io=null,lo=!0,n=rl(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===o){t=Ql(e,t,n);break e}Ol(e,t,r,n)}t=t.child}return t;case 26:return Ll(e,t),null===e?(n=Od(t.type,null,t.pendingProps,null))?t.memoizedState=n:ao||(n=t.type,e=t.pendingProps,(r=rd(V.current).createElement(n))[Ae]=t,r[Ne]=e,ed(r,n,e),Ue(r),t.stateNode=r):t.memoizedState=Od(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return G(t),null===e&&ao&&(r=t.stateNode=wd(t.type,t.pendingProps,V.current),ro=t,lo=!0,o=oo,fd(t.type)?(vd=o,oo=yd(r.firstChild)):oo=o),Ol(e,t,t.pendingProps.children,n),Ll(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&ao&&((o=r=oo)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Fe])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=yd(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,lo))?(t.stateNode=r,ro=t,oo=yd(r.firstChild),lo=!1,o=!0):o=!1),o||uo(t)),G(t),o=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,r=a.children,id(o,a)?r=null:null!==l&&id(o,l)&&(t.flags|=32),null!==t.memoizedState&&(o=Aa(e,t,$a,null,null,n),Gd._currentValue=o),Ll(e,t),Ol(e,t,r,n),t.child;case 6:return null===e&&ao&&((e=n=oo)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yd(e.nextSibling)))return null}return e}(n,t.pendingProps,lo))?(t.stateNode=n,ro=t,oo=null,e=!0):e=!1),e||uo(t)),null;case 13:return Wl(e,t,n);case 4:return q(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=nl(t,null,r,n):Ol(e,t,r,n),t.child;case 11:return Rl(e,t,t.type,t.pendingProps,n);case 7:return Ol(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ol(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,wo(0,t.type,r.value),Ol(e,t,r.children,n),t.child;case 9:return o=t.type._context,r=t.pendingProps.children,Po(t),r=r(o=To(o)),t.flags|=1,Ol(e,t,r,n),t.child;case 14:return Ml(e,t,t.type,t.pendingProps,n);case 15:return zl(e,t,t.type,t.pendingProps,n);case 19:return Gl(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Vl(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=jr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Al(e,t,n);case 24:return Po(t),r=To(No),null===e?(null===(o=Ho())&&(o=ru,a=Lo(),o.pooledCache=a,a.refCount++,null!==a&&(o.pooledCacheLanes|=n),o=a),t.memoizedState={parent:r,cache:o},ra(t),wo(0,No,o)):(0!==(e.lanes&n)&&(oa(e,t),da(t,null,null,n),ca()),o=e.memoizedState,a=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),wo(0,No,r)):(r=a.cache,wo(0,No,r),r!==o.cache&&ko(t,[No],n,!0))),Ol(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}function Zl(e){e.flags|=4}function Jl(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Bd(t)){if(null!==(t=ol.current)&&((4194048&au)===au?null!==al:(62914560&au)!==au&&!(536870912&au)||t!==al))throw Jo=Qo,Ko;e.flags|=8192}}function es(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ke():536870912,e.lanes|=t,yu|=t)}function ts(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ns(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function rs(e,t,n){var r=t.pendingProps;switch(no(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ns(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),So(No),K(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fo(t)?Zl(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ho())),ns(t),null;case 26:return n=t.memoizedState,null===e?(Zl(t),null!==n?(ns(t),Jl(t,n)):(ns(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Zl(t),ns(t),Jl(t,n)):(ns(t),t.flags&=-16777217):(e.memoizedProps!==r&&Zl(t),ns(t),t.flags&=-16777217),null;case 27:Q(t),n=V.current;var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Zl(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return ns(t),null}e=W.current,fo(t)?co(t):(e=wd(o,r,n),t.stateNode=e,Zl(t))}return ns(t),null;case 5:if(Q(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Zl(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return ns(t),null}if(e=W.current,fo(t))co(t);else{switch(o=rd(V.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(n,{is:r.is}):o.createElement(n)}}e[Ae]=t,e[Ne]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(ed(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Zl(t)}}return ns(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Zl(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=V.current,fo(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(o=ro))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[Ae]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Xc(e.nodeValue,n)))||uo(t)}else(e=rd(e).createTextNode(r))[Ae]=t,t.stateNode=e}return ns(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(i(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(i(317));o[Ae]=t}else mo(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ns(t),o=!1}else o=ho(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&t.flags?(ul(t),t):(ul(t),null)}if(ul(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),es(t,t.updateQueue),ns(t),null;case 4:return K(),null===e&&Dc(t.stateNode.containerInfo),ns(t),null;case 10:return So(t.type),ns(t),null;case 19:if(D(cl),null===(o=t.memoizedState))return ns(t),null;if(r=!!(128&t.flags),null===(a=o.rendering))if(r)ts(o,!1);else{if(0!==pu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=dl(e))){for(t.flags|=128,ts(o,!1),e=a.updateQueue,t.updateQueue=e,es(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Fr(n,e),n=n.sibling;return B(cl,1&cl.current|2),t.child}e=e.sibling}null!==o.tail&&te()>xu&&(t.flags|=128,r=!0,ts(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=dl(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,es(t,e),ts(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!ao)return ns(t),null}else 2*te()-o.renderingStartTime>xu&&536870912!==n&&(t.flags|=128,r=!0,ts(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=o.last)?e.sibling=a:t.child=a,o.last=a)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=te(),t.sibling=null,e=cl.current,B(cl,r?1&e|2:1&e),t):(ns(t),null);case 22:case 23:return ul(t),va(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(ns(t),6&t.subtreeFlags&&(t.flags|=8192)):ns(t),null!==(n=t.updateQueue)&&es(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&D(Wo),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),So(No),ns(t),null;case 25:case 30:return null}throw Error(i(156,t.tag))}function os(e,t){switch(no(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return So(No),K(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return Q(t),null;case 13:if(ul(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return D(cl),null;case 4:return K(),null;case 10:return So(t.type),null;case 22:case 23:return ul(t),va(),null!==e&&D(Wo),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return So(No),null;default:return null}}function as(e,t){switch(no(t),t.tag){case 3:So(No),K();break;case 26:case 27:case 5:Q(t);break;case 4:K();break;case 13:ul(t);break;case 19:D(cl);break;case 10:So(t.type);break;case 22:case 23:ul(t),va(),null!==e&&D(Wo);break;case 24:So(No)}}function is(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e){r=void 0;var a=n.create,i=n.inst;r=a(),i.destroy=r}n=n.next}while(n!==o)}}catch(e){cc(t,t.return,e)}}function ls(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,o=t;var s=n,u=l;try{u()}catch(e){cc(o,s,e)}}}r=r.next}while(r!==a)}}catch(e){cc(t,t.return,e)}}function ss(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{fa(t,n)}catch(t){cc(e,e.return,t)}}}function us(e,t,n){n.props=gl(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cs(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function ds(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function ps(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function fs(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,l=null,s=null,u=null,c=null,d=null;for(m in n){var p=n[m];if(n.hasOwnProperty(m)&&null!=p)switch(m){case"checked":case"value":break;case"defaultValue":u=p;default:r.hasOwnProperty(m)||Zc(e,t,m,null,r,p)}}for(var f in r){var m=r[f];if(p=n[f],r.hasOwnProperty(f)&&(null!=m||null!=p))switch(f){case"type":a=m;break;case"name":o=m;break;case"checked":c=m;break;case"defaultChecked":d=m;break;case"value":l=m;break;case"defaultValue":s=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(i(137,t));break;default:m!==p&&Zc(e,t,f,m,r,p)}}return void gt(e,l,s,u,c,d,a,o);case"select":for(a in m=l=s=f=null,n)if(u=n[a],n.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":m=u;default:r.hasOwnProperty(a)||Zc(e,t,a,null,r,u)}for(o in r)if(a=r[o],u=n[o],r.hasOwnProperty(o)&&(null!=a||null!=u))switch(o){case"value":f=a;break;case"defaultValue":s=a;break;case"multiple":l=a;default:a!==u&&Zc(e,t,o,a,r,u)}return t=s,n=l,r=m,void(null!=f?bt(e,!!n,f,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(s in m=f=null,n)if(o=n[s],n.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Zc(e,t,s,null,r,o)}for(l in r)if(o=r[l],a=n[l],r.hasOwnProperty(l)&&(null!=o||null!=a))switch(l){case"value":f=o;break;case"defaultValue":m=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(i(91));break;default:o!==a&&Zc(e,t,l,o,r,a)}return void wt(e,f,m);case"option":for(var h in n)f=n[h],n.hasOwnProperty(h)&&null!=f&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Zc(e,t,h,null,r,f));for(u in r)f=r[u],m=n[u],!r.hasOwnProperty(u)||f===m||null==f&&null==m||("selected"===u?e.selected=f&&"function"!=typeof f&&"symbol"!=typeof f:Zc(e,t,u,f,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)f=n[g],n.hasOwnProperty(g)&&null!=f&&!r.hasOwnProperty(g)&&Zc(e,t,g,null,r,f);for(c in r)if(f=r[c],m=n[c],r.hasOwnProperty(c)&&f!==m&&(null!=f||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(i(137,t));break;default:Zc(e,t,c,f,r,m)}return;default:if(Pt(t)){for(var y in n)f=n[y],n.hasOwnProperty(y)&&void 0!==f&&!r.hasOwnProperty(y)&&Jc(e,t,y,void 0,r,f);for(d in r)f=r[d],m=n[d],!r.hasOwnProperty(d)||f===m||void 0===f&&void 0===m||Jc(e,t,d,f,r,m);return}}for(var v in n)f=n[v],n.hasOwnProperty(v)&&null!=f&&!r.hasOwnProperty(v)&&Zc(e,t,v,null,r,f);for(p in r)f=r[p],m=n[p],!r.hasOwnProperty(p)||f===m||null==f&&null==m||Zc(e,t,p,f,r,m)}(r,e.type,n,t),r[Ne]=t}catch(t){cc(e,e.return,t)}}function ms(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&fd(e.type)||4===e.tag}function hs(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ms(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&fd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Yc));else if(4!==r&&(27===r&&fd(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gs(e,t,n),e=e.sibling;null!==e;)gs(e,t,n),e=e.sibling}function ys(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&fd(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(ys(e,t,n),e=e.sibling;null!==e;)ys(e,t,n),e=e.sibling}function vs(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,o=t.attributes;o.length;)t.removeAttributeNode(o[0]);ed(t,r,n),t[Ae]=e,t[Ne]=n}catch(t){cc(e,e.return,t)}}var bs=!1,ws=!1,Ss=!1,xs="function"==typeof WeakSet?WeakSet:Set,ks=null;function Cs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Is(e,n),4&r&&is(5,n);break;case 1:if(Is(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var o=gl(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&ss(n),512&r&&cs(n,n.return);break;case 3:if(Is(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{fa(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&vs(n);case 26:case 5:Is(e,n),null===t&&4&r&&ps(n),512&r&&cs(n,n.return);break;case 12:Is(e,n);break;case 13:Is(e,n),4&r&&Ms(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=mc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bs)){t=null!==t&&null!==t.memoizedState||ws,o=bs;var a=ws;bs=r,(ws=t)&&!a?Fs(e,n,!!(8772&n.subtreeFlags)):Is(e,n),bs=o,ws=a}break;case 30:break;default:Is(e,n)}}function Es(e){var t=e.alternate;null!==t&&(e.alternate=null,Es(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&De(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Ps=null,Ts=!1;function Os(e,t,n){for(n=n.child;null!==n;)Rs(e,t,n),n=n.sibling}function Rs(e,t,n){if(de&&"function"==typeof de.onCommitFiberUnmount)try{de.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:ws||ds(n,t),Os(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:ws||ds(n,t);var r=Ps,o=Ts;fd(n.type)&&(Ps=n.stateNode,Ts=!1),Os(e,t,n),Sd(n.stateNode),Ps=r,Ts=o;break;case 5:ws||ds(n,t);case 6:if(r=Ps,o=Ts,Ps=null,Os(e,t,n),Ts=o,null!==(Ps=r))if(Ts)try{(9===Ps.nodeType?Ps.body:"HTML"===Ps.nodeName?Ps.ownerDocument.body:Ps).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{Ps.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==Ps&&(Ts?(md(9===(e=Ps).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Tp(e)):md(Ps,n.stateNode));break;case 4:r=Ps,o=Ts,Ps=n.stateNode.containerInfo,Ts=!0,Os(e,t,n),Ps=r,Ts=o;break;case 0:case 11:case 14:case 15:ws||ls(2,n,t),ws||ls(4,n,t),Os(e,t,n);break;case 1:ws||(ds(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&us(n,t,r)),Os(e,t,n);break;case 21:Os(e,t,n);break;case 22:ws=(r=ws)||null!==n.memoizedState,Os(e,t,n),ws=r;break;default:Os(e,t,n)}}function Ms(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Tp(e)}catch(e){cc(t,t.return,e)}}function zs(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new xs),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new xs),t;default:throw Error(i(435,e.tag))}}(e);t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function As(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r],a=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:if(fd(s.type)){Ps=s.stateNode,Ts=!1;break e}break;case 5:Ps=s.stateNode,Ts=!1;break e;case 3:case 4:Ps=s.stateNode.containerInfo,Ts=!0;break e}s=s.return}if(null===Ps)throw Error(i(160));Rs(a,l,o),Ps=null,Ts=!1,null!==(a=o.alternate)&&(a.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ls(t,e),t=t.sibling}var Ns=null;function Ls(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:As(t,e),$s(e),4&r&&(ls(3,e,e.return),is(3,e),ls(5,e,e.return));break;case 1:As(t,e),$s(e),512&r&&(ws||null===n||ds(n,n.return)),64&r&&bs&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var o=Ns;if(As(t,e),$s(e),512&r&&(ws||null===n||ds(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,o=o.ownerDocument||o;t:switch(r){case"title":(!(a=o.getElementsByTagName("title")[0])||a[Fe]||a[Ae]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=o.createElement(r),o.head.insertBefore(a,o.querySelector("head > title"))),ed(a,r,n),a[Ae]=e,Ue(a),r=a;break e;case"link":var l=Fd("link","href",o).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((a=l[s]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}ed(a=o.createElement(r),r,n),o.head.appendChild(a);break;case"meta":if(l=Fd("meta","content",o).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((a=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}ed(a=o.createElement(r),r,n),o.head.appendChild(a);break;default:throw Error(i(468,r))}a[Ae]=e,Ue(a),r=a}e.stateNode=r}else Dd(o,e.type,e.stateNode);else e.stateNode=Ld(o,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Dd(o,e.type,e.stateNode):Ld(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&fs(e,e.memoizedProps,n.memoizedProps)}break;case 27:As(t,e),$s(e),512&r&&(ws||null===n||ds(n,n.return)),null!==n&&4&r&&fs(e,e.memoizedProps,n.memoizedProps);break;case 5:if(As(t,e),$s(e),512&r&&(ws||null===n||ds(n,n.return)),32&e.flags){o=e.stateNode;try{xt(o,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&fs(e,o=e.memoizedProps,null!==n?n.memoizedProps:o),1024&r&&(Ss=!0);break;case 6:if(As(t,e),$s(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(jd=null,o=Ns,Ns=Cd(t.containerInfo),As(t,e),Ns=o,$s(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Tp(t.containerInfo)}catch(t){cc(e,e.return,t)}Ss&&(Ss=!1,_s(e));break;case 4:r=Ns,Ns=Cd(e.stateNode.containerInfo),As(t,e),$s(e),Ns=r;break;case 12:default:As(t,e),$s(e);break;case 13:As(t,e),$s(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(Su=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,zs(e,r));break;case 22:o=null!==e.memoizedState;var u=null!==n&&null!==n.memoizedState,c=bs,d=ws;if(bs=c||o,ws=d||u,As(t,e),ws=d,bs=c,$s(e),8192&r)e:for(t=e.stateNode,t._visibility=o?-2&t._visibility:1|t._visibility,o&&(null===n||u||bs||ws||js(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){u=n=t;try{if(a=u.stateNode,o)"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{s=u.stateNode;var p=u.memoizedProps.style,f=null!=p&&p.hasOwnProperty("display")?p.display:null;s.style.display=null==f||"boolean"==typeof f?"":(""+f).trim()}}catch(e){cc(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=o?"":u.memoizedProps}catch(e){cc(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,zs(e,n));break;case 19:As(t,e),$s(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,zs(e,r));case 30:case 21:}}function $s(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(ms(r)){n=r;break}r=r.return}if(null==n)throw Error(i(160));switch(n.tag){case 27:var o=n.stateNode;ys(e,hs(e),o);break;case 5:var a=n.stateNode;32&n.flags&&(xt(a,""),n.flags&=-33),ys(e,hs(e),a);break;case 3:case 4:var l=n.stateNode.containerInfo;gs(e,hs(e),l);break;default:throw Error(i(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function _s(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;_s(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Is(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cs(e,t.alternate,t),t=t.sibling}function js(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ls(4,t,t.return),js(t);break;case 1:ds(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&us(t,t.return,n),js(t);break;case 27:Sd(t.stateNode);case 26:case 5:ds(t,t.return),js(t);break;case 22:null===t.memoizedState&&js(t);break;default:js(t)}e=e.sibling}}function Fs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,o=e,a=t,i=a.flags;switch(a.tag){case 0:case 11:case 15:Fs(o,a,n),is(4,a);break;case 1:if(Fs(o,a,n),"function"==typeof(o=(r=a).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(o=(r=a).updateQueue)){var l=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)pa(s[o],l)}catch(e){cc(r,r.return,e)}}n&&64&i&&ss(a),cs(a,a.return);break;case 27:vs(a);case 26:case 5:Fs(o,a,n),n&&null===r&&4&i&&ps(a),cs(a,a.return);break;case 12:Fs(o,a,n);break;case 13:Fs(o,a,n),n&&4&i&&Ms(o,a);break;case 22:null===a.memoizedState&&Fs(o,a,n),cs(a,a.return);break;case 30:break;default:Fs(o,a,n)}t=t.sibling}}function Ds(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&$o(n))}function Bs(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&$o(e))}function Ws(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Hs(e,t,n,r),t=t.sibling}function Hs(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:Ws(e,t,n,r),2048&o&&is(9,t);break;case 1:case 13:default:Ws(e,t,n,r);break;case 3:Ws(e,t,n,r),2048&o&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&$o(e)));break;case 12:if(2048&o){Ws(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,i=a.id,l=a.onPostCommit;"function"==typeof l&&l(i,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else Ws(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,i=t.alternate,null!==t.memoizedState?2&a._visibility?Ws(e,t,n,r):Us(e,t):2&a._visibility?Ws(e,t,n,r):(a._visibility|=2,Vs(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&Ds(i,t);break;case 24:Ws(e,t,n,r),2048&o&&Bs(t.alternate,t)}}function Vs(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,i=t,l=n,s=r,u=i.flags;switch(i.tag){case 0:case 11:case 15:Vs(a,i,l,s,o),is(8,i);break;case 23:break;case 22:var c=i.stateNode;null!==i.memoizedState?2&c._visibility?Vs(a,i,l,s,o):Us(a,i):(c._visibility|=2,Vs(a,i,l,s,o)),o&&2048&u&&Ds(i.alternate,i);break;case 24:Vs(a,i,l,s,o),o&&2048&u&&Bs(i.alternate,i);break;default:Vs(a,i,l,s,o)}t=t.sibling}}function Us(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:Us(n,r),2048&o&&Ds(r.alternate,r);break;case 24:Us(n,r),2048&o&&Bs(r.alternate,r);break;default:Us(n,r)}t=t.sibling}}var qs=8192;function Ks(e){if(e.subtreeFlags&qs)for(e=e.child;null!==e;)Gs(e),e=e.sibling}function Gs(e){switch(e.tag){case 26:Ks(e),e.flags&qs&&null!==e.memoizedState&&function(e,t,n){if(null===Wd)throw Error(i(475));var r=Wd;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var o=Rd(n.href),a=e.querySelector(Md(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Vd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ue(a);a=e.ownerDocument||e,n=zd(n),(o=xd.get(o))&&_d(n,o),Ue(a=a.createElement("link"));var l=a;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),ed(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Vd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Ns,e.memoizedState,e.memoizedProps);break;case 5:default:Ks(e);break;case 3:case 4:var t=Ns;Ns=Cd(e.stateNode.containerInfo),Ks(e),Ns=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=qs,qs=16777216,Ks(e),qs=t):Ks(e))}}function Qs(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Xs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ks=r,Js(r,e)}Qs(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ys(e),e=e.sibling}function Ys(e){switch(e.tag){case 0:case 11:case 15:Xs(e),2048&e.flags&&ls(9,e,e.return);break;case 3:case 12:default:Xs(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Zs(e)):Xs(e)}}function Zs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ks=r,Js(r,e)}Qs(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ls(8,t,t.return),Zs(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Zs(t));break;default:Zs(t)}e=e.sibling}}function Js(e,t){for(;null!==ks;){var n=ks;switch(n.tag){case 0:case 11:case 15:ls(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:$o(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ks=r;else e:for(n=e;null!==ks;){var o=(r=ks).sibling,a=r.return;if(Es(r),r===n){ks=null;break e}if(null!==o){o.return=a,ks=o;break e}ks=a}}}var eu={getCacheForType:function(e){var t=To(No),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},tu="function"==typeof WeakMap?WeakMap:Map,nu=0,ru=null,ou=null,au=0,iu=0,lu=null,su=!1,uu=!1,cu=!1,du=0,pu=0,fu=0,mu=0,hu=0,gu=0,yu=0,vu=null,bu=null,wu=!1,Su=0,xu=1/0,ku=null,Cu=null,Eu=0,Pu=null,Tu=null,Ou=0,Ru=0,Mu=null,zu=null,Au=0,Nu=null;function Lu(){return 2&nu&&0!==au?au&-au:null!==L.T?0!==jo?jo:Rc():Me()}function $u(){0===gu&&(gu=536870912&au&&!ao?536870912:xe());var e=ol.current;return null!==e&&(e.flags|=32),gu}function _u(e,t,n){(e!==ru||2!==iu&&9!==iu)&&null===e.cancelPendingCommit||(Hu(e,0),Du(e,au,gu,!1)),Ee(e,n),2&nu&&e===ru||(e===ru&&(!(2&nu)&&(mu|=n),4===pu&&Du(e,au,gu,!1)),xc(e))}function Iu(e,t,n){if(6&nu)throw Error(i(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||we(e,t),o=r?function(e,t){var n=nu;nu|=2;var r=Uu(),o=qu();ru!==e||au!==t?(ku=null,xu=te()+500,Hu(e,t)):uu=we(e,t);e:for(;;)try{if(0!==iu&&null!==ou){t=ou;var a=lu;t:switch(iu){case 1:iu=0,lu=null,Ju(e,t,a,1);break;case 2:case 9:if(Xo(a)){iu=0,lu=null,Zu(t);break}t=function(){2!==iu&&9!==iu||ru!==e||(iu=7),xc(e)},a.then(t,t);break e;case 3:iu=7;break e;case 4:iu=5;break e;case 7:Xo(a)?(iu=0,lu=null,Zu(t)):(iu=0,lu=null,Ju(e,t,a,7));break;case 5:var l=null;switch(ou.tag){case 26:l=ou.memoizedState;case 5:case 27:var s=ou;if(!l||Bd(l)){iu=0,lu=null;var u=s.sibling;if(null!==u)ou=u;else{var c=s.return;null!==c?(ou=c,ec(c)):ou=null}break t}}iu=0,lu=null,Ju(e,t,a,5);break;case 6:iu=0,lu=null,Ju(e,t,a,6);break;case 8:Wu(),pu=6;break e;default:throw Error(i(462))}}Xu();break}catch(t){Vu(e,t)}return bo=vo=null,L.H=r,L.A=o,nu=n,null!==ou?0:(ru=null,au=0,Or(),pu)}(e,t):Gu(e,t,!0),a=r;;){if(0===o){uu&&!r&&Du(e,t,0,!1);break}if(n=e.current.alternate,!a||Fu(n)){if(2===o){if(a=t,e.errorRecoveryDisabledLanes&a)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;o=vu;var u=s.current.memoizedState.isDehydrated;if(u&&(Hu(s,l).flags|=256),2!==(l=Gu(s,l,!1))){if(cu&&!u){s.errorRecoveryDisabledLanes|=a,mu|=a,o=4;break e}a=bu,bu=o,null!==a&&(null===bu?bu=a:bu.push.apply(bu,a))}o=l}if(a=!1,2!==o)continue}}if(1===o){Hu(e,0),Du(e,t,0,!0);break}e:{switch(r=e,a=o){case 0:case 1:throw Error(i(345));case 4:if((4194048&t)!==t)break;case 6:Du(r,t,gu,!su);break e;case 2:bu=null;break;case 3:case 5:break;default:throw Error(i(329))}if((62914560&t)===t&&10<(o=Su+300-te())){if(Du(r,t,gu,!su),0!==be(r,0,!0))break e;r.timeoutHandle=sd(ju.bind(null,r,n,bu,ku,wu,t,gu,mu,yu,su,a,2,-0,0),o)}else ju(r,n,bu,ku,wu,t,gu,mu,yu,su,a,0,-0,0)}break}o=Gu(e,t,!1),a=!1}xc(e)}function ju(e,t,n,r,o,a,l,s,u,c,d,p,f,m){if(e.timeoutHandle=-1,(8192&(p=t.subtreeFlags)||!(16785408&~p))&&(Wd={stylesheets:null,count:0,unsuspend:Hd},Gs(t),null!==(p=function(){if(null===Wd)throw Error(i(475));var e=Wd;return e.stylesheets&&0===e.count&&qd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&qd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=p(nc.bind(null,e,t,a,n,r,o,l,s,u,d,1,f,m)),void Du(e,a,l,!c);nc(e,t,a,n,r,o,l,s,u)}function Fu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Qn(a(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Du(e,t,n,r){t&=~hu,t&=~mu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var a=31-fe(o),i=1<<a;r[a]=-1,o&=~i}0!==n&&Pe(e,n,t)}function Bu(){return!!(6&nu)||(kc(0,!1),!1)}function Wu(){if(null!==ou){if(0===iu)var e=ou.return;else bo=vo=null,ja(e=ou),Qi=null,Xi=0,e=ou;for(;null!==e;)as(e.alternate,e),e=e.return;ou=null}}function Hu(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ud(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Wu(),ru=e,ou=n=jr(e.current,null),au=t,iu=0,lu=null,su=!1,uu=we(e,t),cu=!1,yu=gu=hu=mu=fu=pu=0,bu=vu=null,wu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-fe(r),a=1<<o;t|=e[o],r&=~a}return du=t,Or(),n}function Vu(e,t){wa=null,L.H=Ui,t===qo||t===Go?(t=ea(),iu=3):t===Ko?(t=ea(),iu=4):iu=t===Pl?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,lu=t,null===ou&&(pu=1,Sl(e,Cr(t,e.current)))}function Uu(){var e=L.H;return L.H=Ui,null===e?Ui:e}function qu(){var e=L.A;return L.A=eu,e}function Ku(){pu=4,su||(4194048&au)!==au&&null!==ol.current||(uu=!0),!(134217727&fu)&&!(134217727&mu)||null===ru||Du(ru,au,gu,!1)}function Gu(e,t,n){var r=nu;nu|=2;var o=Uu(),a=qu();ru===e&&au===t||(ku=null,Hu(e,t)),t=!1;var i=pu;e:for(;;)try{if(0!==iu&&null!==ou){var l=ou,s=lu;switch(iu){case 8:Wu(),i=6;break e;case 3:case 2:case 9:case 6:null===ol.current&&(t=!0);var u=iu;if(iu=0,lu=null,Ju(e,l,s,u),n&&uu){i=0;break e}break;default:u=iu,iu=0,lu=null,Ju(e,l,s,u)}}Qu(),i=pu;break}catch(t){Vu(e,t)}return t&&e.shellSuspendCounter++,bo=vo=null,nu=r,L.H=o,L.A=a,null===ou&&(ru=null,au=0,Or()),i}function Qu(){for(;null!==ou;)Yu(ou)}function Xu(){for(;null!==ou&&!J();)Yu(ou)}function Yu(e){var t=Yl(e.alternate,e,du);e.memoizedProps=e.pendingProps,null===t?ec(e):ou=t}function Zu(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=_l(n,t,t.pendingProps,t.type,void 0,au);break;case 11:t=_l(n,t,t.pendingProps,t.type.render,t.ref,au);break;case 5:ja(t);default:as(n,t),t=Yl(n,t=ou=Fr(t,du),du)}e.memoizedProps=e.pendingProps,null===t?ec(e):ou=t}function Ju(e,t,n,r){bo=vo=null,ja(t),Qi=null,Xi=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Co(t,n,o,!0),null!==(n=ol.current)){switch(n.tag){case 13:return null===al?Ku():null===n.alternate&&0===pu&&(pu=3),n.flags&=-257,n.flags|=65536,n.lanes=o,r===Qo?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),dc(e,r,o)),!1;case 22:return n.flags|=65536,r===Qo?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),dc(e,r,o)),!1}throw Error(i(435,n.tag))}return dc(e,r,o),Ku(),!1}if(ao)return null!==(t=ol.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==so&&go(Cr(e=Error(i(422),{cause:r}),n))):(r!==so&&go(Cr(t=Error(i(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=Cr(r,n),sa(e,o=kl(e.stateNode,r,o)),4!==pu&&(pu=2)),!1;var a=Error(i(520),{cause:r});if(a=Cr(a,n),null===vu?vu=[a]:vu.push(a),4!==pu&&(pu=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,sa(n,e=kl(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Cu&&Cu.has(a))))return n.flags|=65536,o&=-o,n.lanes|=o,El(o=Cl(o),e,n,r),sa(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,au))return pu=1,Sl(e,Cr(n,e.current)),void(ou=null)}catch(t){if(null!==o)throw ou=o,t;return pu=1,Sl(e,Cr(n,e.current)),void(ou=null)}32768&t.flags?(ao||1===r?e=!0:uu||536870912&au?e=!1:(su=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ol.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,su);e=t.return;var n=rs(t.alternate,t,du);if(null!==n)return void(ou=n);if(null!==(t=t.sibling))return void(ou=t);ou=t=e}while(null!==t);0===pu&&(pu=5)}function tc(e,t){do{var n=os(e.alternate,e);if(null!==n)return n.flags&=32767,void(ou=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ou=e);ou=e=n}while(null!==e);pu=6,ou=null}function nc(e,t,n,r,o,a,l,s,u){e.cancelPendingCommit=null;do{lc()}while(0!==Eu);if(6&nu)throw Error(i(327));if(null!==t){if(t===e.current)throw Error(i(177));if(a=t.lanes|t.childLanes,function(e,t,n,r,o,a){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=i&~n;0<n;){var c=31-fe(n),d=1<<c;l[c]=0,s[c]=-1;var p=u[c];if(null!==p)for(u[c]=null,c=0;c<p.length;c++){var f=p[c];null!==f&&(f.lane&=-536870913)}n&=~d}0!==r&&Pe(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(i&~t))}(e,n,a|=Tr,l,s,u),e===ru&&(ou=ru=null,au=0),Tu=t,Pu=e,Ou=n,Ru=a,Mu=o,zu=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,Y(ae,(function(){return sc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=L.T,L.T=null,o=$.p,$.p=2,l=nu,nu|=4;try{!function(e,t){if(e=e.containerInfo,td=np,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==o&&3!==p.nodeType||(s=l+o),p!==a||0!==r&&3!==p.nodeType||(u=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++c===o&&(s=l),f===a&&++d===r&&(u=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(nd={focusedElem:e,selectionRange:n},np=!1,ks=t;null!==ks;)if(e=(t=ks).child,1024&t.subtreeFlags&&null!==e)e.return=t,ks=e;else for(;null!==ks;){switch(a=(t=ks).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,o=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var h=gl(n.type,o,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))hd(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":hd(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,ks=e;break}ks=t.return}}(e,t)}finally{nu=l,$.p=o,L.T=r}}Eu=1,rc(),oc(),ac()}}function rc(){if(1===Eu){Eu=0;var e=Pu,t=Tu,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=L.T,L.T=null;var r=$.p;$.p=2;var o=nu;nu|=4;try{Ls(t,e);var a=nd,i=er(e.containerInfo),l=a.focusedElem,s=a.selectionRange;if(i!==l&&l&&l.ownerDocument&&Jn(l.ownerDocument.documentElement,l)){if(null!==s&&tr(l)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in l)l.selectionStart=u,l.selectionEnd=Math.min(c,l.value.length);else{var d=l.ownerDocument||document,p=d&&d.defaultView||window;if(p.getSelection){var f=p.getSelection(),m=l.textContent.length,h=Math.min(s.start,m),g=void 0===s.end?h:Math.min(s.end,m);!f.extend&&h>g&&(i=g,g=h,h=i);var y=Zn(l,h),v=Zn(l,g);if(y&&v&&(1!==f.rangeCount||f.anchorNode!==y.node||f.anchorOffset!==y.offset||f.focusNode!==v.node||f.focusOffset!==v.offset)){var b=d.createRange();b.setStart(y.node,y.offset),f.removeAllRanges(),h>g?(f.addRange(b),f.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),f.addRange(b))}}}}for(d=[],f=l;f=f.parentNode;)1===f.nodeType&&d.push({element:f,left:f.scrollLeft,top:f.scrollTop});for("function"==typeof l.focus&&l.focus(),l=0;l<d.length;l++){var w=d[l];w.element.scrollLeft=w.left,w.element.scrollTop=w.top}}np=!!td,nd=td=null}finally{nu=o,$.p=r,L.T=n}}e.current=t,Eu=2}}function oc(){if(2===Eu){Eu=0;var e=Pu,t=Tu,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=L.T,L.T=null;var r=$.p;$.p=2;var o=nu;nu|=4;try{Cs(e,t.alternate,t)}finally{nu=o,$.p=r,L.T=n}}Eu=3}}function ac(){if(4===Eu||3===Eu){Eu=0,ee();var e=Pu,t=Tu,n=Ou,r=zu;10256&t.subtreeFlags||10256&t.flags?Eu=5:(Eu=0,Tu=Pu=null,ic(e,e.pendingLanes));var o=e.pendingLanes;if(0===o&&(Cu=null),Re(n),t=t.stateNode,de&&"function"==typeof de.onCommitFiberRoot)try{de.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=L.T,o=$.p,$.p=2,L.T=null;try{for(var a=e.onRecoverableError,i=0;i<r.length;i++){var l=r[i];a(l.value,{componentStack:l.stack})}}finally{L.T=t,$.p=o}}3&Ou&&lc(),xc(e),o=e.pendingLanes,4194090&n&&42&o?e===Nu?Au++:(Au=0,Nu=e):Au=0,kc(0,!1)}}function ic(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,$o(t))}function lc(e){return rc(),oc(),ac(),sc()}function sc(){if(5!==Eu)return!1;var e=Pu,t=Ru;Ru=0;var n=Re(Ou),r=L.T,o=$.p;try{$.p=32>n?32:n,L.T=null,n=Mu,Mu=null;var a=Pu,l=Ou;if(Eu=0,Tu=Pu=null,Ou=0,6&nu)throw Error(i(331));var s=nu;if(nu|=4,Ys(a.current),Hs(a,a.current,l,n),nu=s,kc(0,!1),de&&"function"==typeof de.onPostCommitFiberRoot)try{de.onPostCommitFiberRoot(ce,a)}catch(e){}return!0}finally{$.p=o,L.T=r,ic(e,t)}}function uc(e,t,n){t=Cr(n,t),null!==(e=ia(e,t=kl(e.stateNode,t,2),2))&&(Ee(e,2),xc(e))}function cc(e,t,n){if(3===e.tag)uc(e,e,n);else for(;null!==t;){if(3===t.tag){uc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cu||!Cu.has(r))){e=Cr(n,e),null!==(r=ia(t,n=Cl(2),2))&&(El(n,r,t,e),Ee(r,2),xc(r));break}}t=t.return}}function dc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new tu;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(cu=!0,o.add(n),e=pc.bind(null,e,t,n),t.then(e,e))}function pc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ru===e&&(au&n)===n&&(4===pu||3===pu&&(62914560&au)===au&&300>te()-Su?!(2&nu)&&Hu(e,0):hu|=n,yu===au&&(yu=0)),xc(e)}function fc(e,t){0===t&&(t=ke()),null!==(e=zr(e,t))&&(Ee(e,t),xc(e))}function mc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),fc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),fc(e,n)}var gc=null,yc=null,vc=!1,bc=!1,wc=!1,Sc=0;function xc(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),bc=!0,vc||(vc=!0,dd((function(){6&nu?Y(re,Cc):Ec()})))}function kc(e,t){if(!wc&&bc){wc=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var i=r.suspendedLanes,l=r.pingedLanes;a=(1<<31-fe(42|e)+1)-1,a=201326741&(a&=o&~(i&~l))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,Oc(r,a))}else a=au,!(3&(a=be(r,r===ru?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||we(r,a)||(n=!0,Oc(r,a));r=r.next}}while(n);wc=!1}}function Cc(){Ec()}function Ec(){bc=vc=!1;var e,t=0;0!==Sc&&(((e=window.event)&&"popstate"===e.type?e!==ld&&(ld=e,!0):(ld=null,!1))&&(t=Sc),Sc=0);for(var n=te(),r=null,o=gc;null!==o;){var a=o.next,i=Pc(o,n);0===i?(o.next=null,null===r?gc=a:r.next=a,null===a&&(yc=r)):(r=o,(0!==t||3&i)&&(bc=!0)),o=a}kc(t,!1)}function Pc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var i=31-fe(a),l=1<<i,s=o[i];-1===s?0!==(l&n)&&0===(l&r)||(o[i]=Se(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}if(n=au,n=be(e,e===(t=ru)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===iu||9===iu)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&Z(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||we(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&Z(r),Re(n)){case 2:case 8:n=oe;break;case 32:default:n=ae;break;case 268435456:n=le}return r=Tc.bind(null,e),n=Y(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&Z(r),e.callbackPriority=2,e.callbackNode=null,2}function Tc(e,t){if(0!==Eu&&5!==Eu)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(lc()&&e.callbackNode!==n)return null;var r=au;return 0===(r=be(e,e===ru?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Iu(e,r,t),Pc(e,te()),null!=e.callbackNode&&e.callbackNode===n?Tc.bind(null,e):null)}function Oc(e,t){if(lc())return null;Iu(e,t,!0)}function Rc(){return 0===Sc&&(Sc=xe()),Sc}function Mc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Rt(""+e)}function zc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ac=0;Ac<Sr.length;Ac++){var Nc=Sr[Ac];xr(Nc.toLowerCase(),"on"+(Nc[0].toUpperCase()+Nc.slice(1)))}xr(fr,"onAnimationEnd"),xr(mr,"onAnimationIteration"),xr(hr,"onAnimationStart"),xr("dblclick","onDoubleClick"),xr("focusin","onFocus"),xr("focusout","onBlur"),xr(gr,"onTransitionRun"),xr(yr,"onTransitionStart"),xr(vr,"onTransitionCancel"),xr(br,"onTransitionEnd"),Qe("onMouseEnter",["mouseout","mouseover"]),Qe("onMouseLeave",["mouseout","mouseover"]),Qe("onPointerEnter",["pointerout","pointerover"]),Qe("onPointerLeave",["pointerout","pointerover"]),Ge("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ge("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ge("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ge("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ge("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ge("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),$c=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Lc));function _c(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){yl(e)}o.currentTarget=null,a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){yl(e)}o.currentTarget=null,a=s}}}}function Ic(e,t){var n=t[$e];void 0===n&&(n=t[$e]=new Set);var r=e+"__bubble";n.has(r)||(Bc(t,e,2,!1),n.add(r))}function jc(e,t,n){var r=0;t&&(r|=4),Bc(n,e,r,t)}var Fc="_reactListening"+Math.random().toString(36).slice(2);function Dc(e){if(!e[Fc]){e[Fc]=!0,qe.forEach((function(t){"selectionchange"!==t&&($c.has(t)||jc(t,!1,e),jc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fc]||(t[Fc]=!0,jc("selectionchange",!1,t))}}function Bc(e,t,n,r){switch(up(t)){case 2:var o=rp;break;case 8:o=op;break;default:o=ap}n=o.bind(null,t,n,e),o=void 0,!Ft||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wc(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&i.stateNode.containerInfo===o)return;i=i.return}for(;null!==l;){if(null===(i=Be(l)))return;if(5===(u=i.tag)||6===u||26===u||27===u){r=a=i;continue e}l=l.parentNode}}r=r.return}_t((function(){var r=a,o=zt(n),i=[];e:{var l=wr.get(e);if(void 0!==l){var u=Jt,c=e;switch(e){case"keypress":if(0===Ut(n))break e;case"keydown":case"keyup":u=hn;break;case"focusin":c="focus",u=an;break;case"focusout":c="blur",u=an;break;case"beforeblur":case"afterblur":u=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=on;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=yn;break;case fr:case mr:case hr:u=ln;break;case br:u=vn;break;case"scroll":case"scrollend":u=tn;break;case"wheel":u=bn;break;case"copy":case"cut":case"paste":u=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=gn;break;case"toggle":case"beforetoggle":u=wn}var d=!!(4&t),p=!d&&("scroll"===e||"scrollend"===e),f=d?null!==l?l+"Capture":null:l;d=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===f||null!=(g=It(h,f))&&d.push(Hc(h,g,m)),p)break;h=h.return}0<d.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:d}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Mt||!(c=n.relatedTarget||n.fromElement)||!Be(c)&&!c[Le])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Be(c):null)&&(p=s(c),d=c.tag,c!==p||5!==d&&27!==d&&6!==d)&&(c=null)):(u=null,c=r),u!==c)){if(d=rn,g="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(d=gn,g="onPointerLeave",f="onPointerEnter",h="pointer"),p=null==u?l:He(u),m=null==c?l:He(c),(l=new d(g,h+"leave",u,n,o)).target=p,l.relatedTarget=m,g=null,Be(o)===r&&((d=new d(f,h+"enter",c,n,o)).target=m,d.relatedTarget=p,g=d),p=g,u&&c)e:{for(f=c,h=0,m=d=u;m;m=Uc(m))h++;for(m=0,g=f;g;g=Uc(g))m++;for(;0<h-m;)d=Uc(d),h--;for(;0<m-h;)f=Uc(f),m--;for(;h--;){if(d===f||null!==f&&d===f.alternate)break e;d=Uc(d),f=Uc(f)}d=null}else d=null;null!==u&&qc(i,l,u,d,!1),null!==c&&null!==p&&qc(i,p,c,d,!0)}if("select"===(u=(l=r?He(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=jn;else if(An(l))if(Fn)y=Gn;else{y=qn;var v=Un}else!(u=l.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&Pt(r.elementType)&&(y=jn):y=Kn;switch(y&&(y=y(e,r))?Nn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&vt(l,"number",l.value)),v=r?He(r):window,e){case"focusin":(An(v)||"true"===v.contentEditable)&&(rr=v,or=r,ar=null);break;case"focusout":ar=or=rr=null;break;case"mousedown":ir=!0;break;case"contextmenu":case"mouseup":case"dragend":ir=!1,lr(i,n,o);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":lr(i,n,o)}var b;if(xn)e:{switch(e){case"compositionstart":var w="onCompositionStart";break e;case"compositionend":w="onCompositionEnd";break e;case"compositionupdate":w="onCompositionUpdate";break e}w=void 0}else Mn?On(e,n)&&(w="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(w="onCompositionStart");w&&(En&&"ko"!==n.locale&&(Mn||"onCompositionStart"!==w?"onCompositionEnd"===w&&Mn&&(b=Vt()):(Wt="value"in(Bt=o)?Bt.value:Bt.textContent,Mn=!0)),0<(v=Vc(r,w)).length&&(w=new un(w,e,null,n,o),i.push({event:w,listeners:v}),(b||null!==(b=Rn(n)))&&(w.data=b))),(b=Cn?function(e,t){switch(e){case"compositionend":return Rn(t);case"keypress":return 32!==t.which?null:(Tn=!0,Pn);case"textInput":return(e=t.data)===Pn&&Tn?null:e;default:return null}}(e,n):function(e,t){if(Mn)return"compositionend"===e||!xn&&On(e,t)?(e=Vt(),Ht=Wt=Bt=null,Mn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(w=Vc(r,"onBeforeInput")).length&&(v=new un("onBeforeInput","beforeinput",null,n,o),i.push({event:v,listeners:w}),v.data=b),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var a=Mc((o[Ne]||null).action),i=r.submitter;i&&null!==(t=(t=i[Ne]||null)?Mc(t.formAction):i.getAttribute("formAction"))&&(a=t,i=null);var l=new Jt("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==Sc){var e=i?zc(o,i):new FormData(o);zi(n,{pending:!0,data:e,method:o.method,action:a},null,e)}}else"function"==typeof a&&(l.preventDefault(),e=i?zc(o,i):new FormData(o),zi(n,{pending:!0,data:e,method:o.method,action:a},a,e))},currentTarget:o}]})}}(i,e,r,n,o)}_c(i,t)}))}function Hc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vc(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=It(e,n))&&r.unshift(Hc(e,o,a)),null!=(o=It(e,t))&&r.push(Hc(e,o,a))),3===e.tag)return r;e=e.return}return[]}function Uc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function qc(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=It(n,a))&&i.unshift(Hc(n,u,s)):o||null!=(u=It(n,a))&&i.push(Hc(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kc=/\r\n?/g,Gc=/\u0000|\uFFFD/g;function Qc(e){return("string"==typeof e?e:""+e).replace(Kc,"\n").replace(Gc,"")}function Xc(e,t){return t=Qc(t),Qc(e)===t}function Yc(){}function Zc(e,t,n,r,o,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||xt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&xt(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":Et(e,r,a);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Rt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Zc(e,t,"name",o.name,o,null),Zc(e,t,"formEncType",o.formEncType,o,null),Zc(e,t,"formMethod",o.formMethod,o,null),Zc(e,t,"formTarget",o.formTarget,o,null)):(Zc(e,t,"encType",o.encType,o,null),Zc(e,t,"method",o.method,o,null),Zc(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Rt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Yc);break;case"onScroll":null!=r&&Ic("scroll",e);break;case"onScrollEnd":null!=r&&Ic("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Rt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Ic("beforetoggle",e),Ic("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Tt.get(n)||n,r)}}function Jc(e,t,n,r,o,a){switch(n){case"style":Et(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?xt(e,r):("number"==typeof r||"bigint"==typeof r)&&xt(e,""+r);break;case"onScroll":null!=r&&Ic("scroll",e);break;case"onScrollEnd":null!=r&&Ic("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Yc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ke.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Ne]||null)?a[n]:null)&&e.removeEventListener(t,a,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o)))}}function ed(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Ic("error",e),Ic("load",e);var r,o=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Zc(e,t,r,l,n,null)}}return a&&Zc(e,t,"srcSet",n.srcSet,n,null),void(o&&Zc(e,t,"src",n.src,n,null));case"input":Ic("invalid",e);var s=r=l=a=null,u=null,c=null;for(o in n)if(n.hasOwnProperty(o)){var d=n[o];if(null!=d)switch(o){case"name":a=d;break;case"type":l=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(i(137,t));break;default:Zc(e,t,o,d,n,null)}}return yt(e,r,s,u,c,l,a,!1),void dt(e);case"select":for(a in Ic("invalid",e),o=l=r=null,n)if(n.hasOwnProperty(a)&&null!=(s=n[a]))switch(a){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":o=s;default:Zc(e,t,a,s,n,null)}return t=r,n=l,e.multiple=!!o,void(null!=t?bt(e,!!o,t,!1):null!=n&&bt(e,!!o,n,!0));case"textarea":for(l in Ic("invalid",e),r=a=o=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":o=s;break;case"defaultValue":a=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Zc(e,t,l,s,n,null)}return St(e,o,a,r),void dt(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(o=n[u])&&("selected"===u?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Zc(e,t,u,o,n,null));return;case"dialog":Ic("beforetoggle",e),Ic("toggle",e),Ic("cancel",e),Ic("close",e);break;case"iframe":case"object":Ic("load",e);break;case"video":case"audio":for(o=0;o<Lc.length;o++)Ic(Lc[o],e);break;case"image":Ic("error",e),Ic("load",e);break;case"details":Ic("toggle",e);break;case"embed":case"source":case"link":Ic("error",e),Ic("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(o=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Zc(e,t,c,o,n,null)}return;default:if(Pt(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(o=n[d])&&Jc(e,t,d,o,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(o=n[s])&&Zc(e,t,s,o,n,null)}var td=null,nd=null;function rd(e){return 9===e.nodeType?e:e.ownerDocument}function od(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function ad(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function id(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ld=null,sd="function"==typeof setTimeout?setTimeout:void 0,ud="function"==typeof clearTimeout?clearTimeout:void 0,cd="function"==typeof Promise?Promise:void 0,dd="function"==typeof queueMicrotask?queueMicrotask:void 0!==cd?function(e){return cd.resolve(null).then(e).catch(pd)}:sd;function pd(e){setTimeout((function(){throw e}))}function fd(e){return"head"===e}function md(e,t){var n=t,r=0,o=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var i=e.ownerDocument;if(1&n&&Sd(i.documentElement),2&n&&Sd(i.body),4&n)for(Sd(n=i.head),i=n.firstChild;i;){var l=i.nextSibling,s=i.nodeName;i[Fe]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===i.rel.toLowerCase()||n.removeChild(i),i=l}}if(0===o)return e.removeChild(a),void Tp(t);o--}else"$"===n||"$?"===n||"$!"===n?o++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);Tp(t)}function hd(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":hd(n),De(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gd(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function yd(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vd=null;function bd(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function wd(e,t,n){switch(t=rd(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}function Sd(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);De(e)}var xd=new Map,kd=new Set;function Cd(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Ed=$.d;$.d={f:function(){var e=Ed.f(),t=Bu();return e||t},r:function(e){var t=We(e);null!==t&&5===t.tag&&"form"===t.type?Ni(t):Ed.r(e)},D:function(e){Ed.D(e),Td("dns-prefetch",e,null)},C:function(e,t){Ed.C(e,t),Td("preconnect",e,t)},L:function(e,t,n){Ed.L(e,t,n);var r=Pd;if(r&&e&&t){var o='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+ht(n.imageSizes)+'"]')):o+='[href="'+ht(e)+'"]';var a=o;switch(t){case"style":a=Rd(e);break;case"script":a=Ad(e)}xd.has(a)||(e=p({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),xd.set(a,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(Md(a))||"script"===t&&r.querySelector(Nd(a))||(ed(t=r.createElement("link"),"link",e),Ue(t),r.head.appendChild(t)))}},m:function(e,t){Ed.m(e,t);var n=Pd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Ad(e)}if(!xd.has(a)&&(e=p({rel:"modulepreload",href:e},t),xd.set(a,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Nd(a)))return}ed(r=n.createElement("link"),"link",e),Ue(r),n.head.appendChild(r)}}},X:function(e,t){Ed.X(e,t);var n=Pd;if(n&&e){var r=Ve(n).hoistableScripts,o=Ad(e),a=r.get(o);a||((a=n.querySelector(Nd(o)))||(e=p({src:e,async:!0},t),(t=xd.get(o))&&Id(e,t),Ue(a=n.createElement("script")),ed(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,t,n){Ed.S(e,t,n);var r=Pd;if(r&&e){var o=Ve(r).hoistableStyles,a=Rd(e);t=t||"default";var i=o.get(a);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(Md(a)))l.loading=5;else{e=p({rel:"stylesheet",href:e,"data-precedence":t},n),(n=xd.get(a))&&_d(e,n);var s=i=r.createElement("link");Ue(s),ed(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,$d(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},o.set(a,i)}}},M:function(e,t){Ed.M(e,t);var n=Pd;if(n&&e){var r=Ve(n).hoistableScripts,o=Ad(e),a=r.get(o);a||((a=n.querySelector(Nd(o)))||(e=p({src:e,async:!0,type:"module"},t),(t=xd.get(o))&&Id(e,t),Ue(a=n.createElement("script")),ed(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var Pd="undefined"==typeof document?null:document;function Td(e,t,n){var r=Pd;if(r&&"string"==typeof t&&t){var o=ht(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),kd.has(o)||(kd.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(ed(t=r.createElement("link"),"link",e),Ue(t),r.head.appendChild(t)))}}function Od(e,t,n,r){var o,a,l,s,u=(u=V.current)?Cd(u):null;if(!u)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Rd(n.href),(r=(n=Ve(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Rd(n.href);var c=Ve(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(Md(e)))&&!c._p&&(d.instance=c,d.state.loading=5),xd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},xd.set(e,n),c||(o=u,a=e,l=n,s=d.state,o.querySelector('link[rel="preload"][as="style"]['+a+"]")?s.loading=1:(a=o.createElement("link"),s.preload=a,a.addEventListener("load",(function(){return s.loading|=1})),a.addEventListener("error",(function(){return s.loading|=2})),ed(a,"link",l),Ue(a),o.head.appendChild(a))))),t&&null===r)throw Error(i(528,""));return d}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Ad(n),(r=(n=Ve(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function Rd(e){return'href="'+ht(e)+'"'}function Md(e){return'link[rel="stylesheet"]['+e+"]"}function zd(e){return p({},e,{"data-precedence":e.precedence,precedence:null})}function Ad(e){return'[src="'+ht(e)+'"]'}function Nd(e){return"script[async]"+e}function Ld(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ue(r),r;var o=p({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ue(r=(e.ownerDocument||e).createElement("style")),ed(r,"style",o),$d(r,n.precedence,e),t.instance=r;case"stylesheet":o=Rd(n.href);var a=e.querySelector(Md(o));if(a)return t.state.loading|=4,t.instance=a,Ue(a),a;r=zd(n),(o=xd.get(o))&&_d(r,o),Ue(a=(e.ownerDocument||e).createElement("link"));var l=a;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),ed(a,"link",r),t.state.loading|=4,$d(a,n.precedence,e),t.instance=a;case"script":return a=Ad(n.src),(o=e.querySelector(Nd(a)))?(t.instance=o,Ue(o),o):(r=n,(o=xd.get(a))&&Id(r=p({},n),o),Ue(o=(e=e.ownerDocument||e).createElement("script")),ed(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error(i(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,$d(r,n.precedence,e));return t.instance}function $d(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)a=l;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function _d(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Id(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var jd=null;function Fd(e,t,n){if(null===jd){var r=new Map,o=jd=new Map;o.set(n,r)}else(r=(o=jd).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var a=n[o];if(!(a[Fe]||a[Ae]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var i=a.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(a):r.set(i,[a])}}return r}function Dd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Bd(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Wd=null;function Hd(){}function Vd(){if(this.count--,0===this.count)if(this.stylesheets)qd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Ud=null;function qd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Ud=new Map,t.forEach(Kd,e),Ud=null,Vd.call(e))}function Kd(e,t){if(!(4&t.state.loading)){var n=Ud.get(e);if(n)var r=n.get(null);else{n=new Map,Ud.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var i=o[a];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(null,r)}i=(o=t.instance).getAttribute("data-precedence"),(a=n.get(i)||r)===r&&n.set(null,o),n.set(i,o),this.count++,r=Vd.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=4}}var Gd={$$typeof:S,Provider:null,Consumer:null,_currentValue:_,_currentValue2:_,_threadCount:0};function Qd(e,t,n,r,o,a,i,l){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Xd(e,t,n,r,o,a,i,l,s,u,c,d){return e=new Qd(e,t,n,i,l,s,u,d),t=1,!0===a&&(t|=24),a=_r(3,null,null,t),e.current=a,a.stateNode=e,(t=Lo()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},ra(a),e}function Yd(e){return e?e=Lr:Lr}function Zd(e,t,n,r,o,a){o=Yd(o),null===r.context?r.context=o:r.pendingContext=o,(r=aa(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=ia(e,r,t))&&(_u(n,0,t),la(n,e,t))}function Jd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ep(e,t){Jd(e,t),(e=e.alternate)&&Jd(e,t)}function tp(e){if(13===e.tag){var t=zr(e,67108864);null!==t&&_u(t,0,67108864),ep(e,67108864)}}var np=!0;function rp(e,t,n,r){var o=L.T;L.T=null;var a=$.p;try{$.p=2,ap(e,t,n,r)}finally{$.p=a,L.T=o}}function op(e,t,n,r){var o=L.T;L.T=null;var a=$.p;try{$.p=8,ap(e,t,n,r)}finally{$.p=a,L.T=o}}function ap(e,t,n,r){if(np){var o=ip(r);if(null===o)Wc(e,t,r,lp,n),vp(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return dp=bp(dp,e,t,n,r,o),!0;case"dragenter":return pp=bp(pp,e,t,n,r,o),!0;case"mouseover":return fp=bp(fp,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return mp.set(a,bp(mp.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,hp.set(a,bp(hp.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(vp(e,r),4&t&&-1<yp.indexOf(e)){for(;null!==o;){var a=We(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var i=ve(a.pendingLanes);if(0!==i){var l=a;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-fe(i);l.entanglements[1]|=s,i&=~s}xc(a),!(6&nu)&&(xu=te()+500,kc(0,!1))}}break;case 13:null!==(l=zr(a,2))&&_u(l,0,2),Bu(),ep(a,2)}if(null===(a=ip(r))&&Wc(e,t,r,lp,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Wc(e,t,r,null,n)}}function ip(e){return sp(e=zt(e))}var lp=null;function sp(e){if(lp=null,null!==(e=Be(e))){var t=s(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=u(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return lp=e,null}function up(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case oe:return 8;case ae:case ie:return 32;case le:return 268435456;default:return 32}default:return 32}}var cp=!1,dp=null,pp=null,fp=null,mp=new Map,hp=new Map,gp=[],yp="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function vp(e,t){switch(e){case"focusin":case"focusout":dp=null;break;case"dragenter":case"dragleave":pp=null;break;case"mouseover":case"mouseout":fp=null;break;case"pointerover":case"pointerout":mp.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":hp.delete(t.pointerId)}}function bp(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=We(t))&&tp(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function wp(e){var t=Be(e.target);if(null!==t){var n=s(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=u(n)))return e.blockedOn=t,void function(e){var t=$.p;try{return $.p=e,function(){if(13===n.tag){var e=Lu();e=Oe(e);var t=zr(n,e);null!==t&&_u(t,0,e),ep(n,e)}}()}finally{$.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Sp(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=ip(e.nativeEvent);if(null!==n)return null!==(t=We(n))&&tp(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Mt=r,n.target.dispatchEvent(r),Mt=null,t.shift()}return!0}function xp(e,t,n){Sp(e)&&n.delete(t)}function kp(){cp=!1,null!==dp&&Sp(dp)&&(dp=null),null!==pp&&Sp(pp)&&(pp=null),null!==fp&&Sp(fp)&&(fp=null),mp.forEach(xp),hp.forEach(xp)}function Cp(e,t){e.blockedOn===t&&(e.blockedOn=null,cp||(cp=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,kp)))}var Ep=null;function Pp(e){Ep!==e&&(Ep=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Ep===e&&(Ep=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===sp(r||n))continue;break}var a=We(n);null!==a&&(e.splice(t,3),t-=3,zi(a,{pending:!0,data:o,method:n.method,action:r},r,o))}})))}function Tp(e){function t(t){return Cp(t,e)}null!==dp&&Cp(dp,e),null!==pp&&Cp(pp,e),null!==fp&&Cp(fp,e),mp.forEach(t),hp.forEach(t);for(var n=0;n<gp.length;n++){var r=gp[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<gp.length&&null===(n=gp[0]).blockedOn;)wp(n),null===n.blockedOn&&gp.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],a=n[r+1],i=o[Ne]||null;if("function"==typeof a)i||Pp(n);else if(i){var l=null;if(a&&a.hasAttribute("formAction")){if(o=a,i=a[Ne]||null)l=i.formAction;else if(null!==sp(o))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),Pp(n)}}}function Op(e){this._internalRoot=e}function Rp(e){this._internalRoot=e}Rp.prototype.render=Op.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Zd(t.current,Lu(),e,t,null,null)},Rp.prototype.unmount=Op.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Zd(e.current,2,null,e,null,null),Bu(),t[Le]=null}},Rp.prototype.unstable_scheduleHydration=function(e){if(e){var t=Me();e={blockedOn:null,target:e,priority:t};for(var n=0;n<gp.length&&0!==t&&t<gp[n].priority;n++);gp.splice(n,0,e),0===n&&wp(e)}};var Mp=o.version;if("19.1.0"!==Mp)throw Error(i(527,Mp,"19.1.0"));$.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=s(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return c(o),e;if(a===r)return c(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?d(e):null)?null:e.stateNode};var zp={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:L,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Ap=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ap.isDisabled&&Ap.supportsFiber)try{ce=Ap.inject(zp),de=Ap}catch(e){}}t.createRoot=function(e,t){if(!l(e))throw Error(i(299));var n=!1,r="",o=vl,a=bl,s=wl;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Xd(e,1,!1,null,0,n,r,o,a,s,0,null),e[Le]=t.current,Dc(e),new Op(t)},t.hydrateRoot=function(e,t,n){if(!l(e))throw Error(i(299));var r=!1,o="",a=vl,s=bl,u=wl,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(s=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Xd(e,1,!0,t,0,r,o,a,s,u,0,c)).context=Yd(null),n=t.current,(o=aa(r=Oe(r=Lu()))).callback=null,ia(n,o,r),n=r,t.current.lanes=n,Ee(t,n),xc(t),e[Le]=t.current,Dc(e),new Rp(t)},t.version="19.1.0"},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},404:(e,t,n)=>{"use strict";e.exports=n(72)},405:(e,t)=>{"use strict";Symbol.for("react.transitional.element"),Symbol.for("react.portal");var n=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler");Symbol.for("react.provider");var a=Symbol.for("react.consumer"),i=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),u=Symbol.for("react.suspense_list"),c=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=(Symbol.for("react.view_transition"),Symbol.for("react.client.reference"));t.Hy=function(e){return"string"==typeof e||"function"==typeof e||e===n||e===o||e===r||e===s||e===u||"object"==typeof e&&null!==e&&(e.$$typeof===d||e.$$typeof===c||e.$$typeof===i||e.$$typeof===a||e.$$typeof===l||e.$$typeof===p||void 0!==e.getModuleId)}},411:(e,t,n)=>{var r;!function(o,a){if(o){for(var i,l={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},s={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},u={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},c={option:"alt",command:"meta",return:"enter",escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},d=1;d<20;++d)l[111+d]="f"+d;for(d=0;d<=9;++d)l[d+96]=d.toString();v.prototype.bind=function(e,t,n){var r=this;return e=e instanceof Array?e:[e],r._bindMultiple.call(r,e,t,n),r},v.prototype.unbind=function(e,t){return this.bind.call(this,e,(function(){}),t)},v.prototype.trigger=function(e,t){var n=this;return n._directMap[e+":"+t]&&n._directMap[e+":"+t]({},e),n},v.prototype.reset=function(){var e=this;return e._callbacks={},e._directMap={},e},v.prototype.stopCallback=function(e,t){if((" "+t.className+" ").indexOf(" mousetrap ")>-1)return!1;if(y(t,this.target))return!1;if("composedPath"in e&&"function"==typeof e.composedPath){var n=e.composedPath()[0];n!==e.target&&(t=n)}return"INPUT"==t.tagName||"SELECT"==t.tagName||"TEXTAREA"==t.tagName||t.isContentEditable},v.prototype.handleKey=function(){return this._handleKey.apply(this,arguments)},v.addKeycodes=function(e){for(var t in e)e.hasOwnProperty(t)&&(l[t]=e[t]);i=null},v.init=function(){var e=v(a);for(var t in e)"_"!==t.charAt(0)&&(v[t]=function(t){return function(){return e[t].apply(e,arguments)}}(t))},v.init(),o.Mousetrap=v,e.exports&&(e.exports=v),void 0===(r=function(){return v}.call(t,n,t,e))||(e.exports=r)}function p(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function f(e){if("keypress"==e.type){var t=String.fromCharCode(e.which);return e.shiftKey||(t=t.toLowerCase()),t}return l[e.which]?l[e.which]:s[e.which]?s[e.which]:String.fromCharCode(e.which).toLowerCase()}function m(e){return"shift"==e||"ctrl"==e||"alt"==e||"meta"==e}function h(e,t,n){return n||(n=function(){if(!i)for(var e in i={},l)e>95&&e<112||l.hasOwnProperty(e)&&(i[l[e]]=e);return i}()[e]?"keydown":"keypress"),"keypress"==n&&t.length&&(n="keydown"),n}function g(e,t){var n,r,o,a=[];for(n=function(e){return"+"===e?["+"]:(e=e.replace(/\+{2}/g,"+plus")).split("+")}(e),o=0;o<n.length;++o)r=n[o],c[r]&&(r=c[r]),t&&"keypress"!=t&&u[r]&&(r=u[r],a.push("shift")),m(r)&&a.push(r);return{key:r,modifiers:a,action:t=h(r,a,t)}}function y(e,t){return null!==e&&e!==a&&(e===t||y(e.parentNode,t))}function v(e){var t=this;if(e=e||a,!(t instanceof v))return new v(e);t.target=e,t._callbacks={},t._directMap={};var n,r={},o=!1,i=!1,l=!1;function s(e){e=e||{};var t,n=!1;for(t in r)e[t]?n=!0:r[t]=0;n||(l=!1)}function u(e,n,o,a,i,l){var s,u,c,d,p=[],f=o.type;if(!t._callbacks[e])return[];for("keyup"==f&&m(e)&&(n=[e]),s=0;s<t._callbacks[e].length;++s)if(u=t._callbacks[e][s],(a||!u.seq||r[u.seq]==u.level)&&f==u.action&&("keypress"==f&&!o.metaKey&&!o.ctrlKey||(c=n,d=u.modifiers,c.sort().join(",")===d.sort().join(",")))){var h=!a&&u.combo==i,g=a&&u.seq==a&&u.level==l;(h||g)&&t._callbacks[e].splice(s,1),p.push(u)}return p}function c(e,n,r,o){t.stopCallback(n,n.target||n.srcElement,r,o)||!1===e(n,r)&&(function(e){e.preventDefault?e.preventDefault():e.returnValue=!1}(n),function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}(n))}function d(e){"number"!=typeof e.which&&(e.which=e.keyCode);var n=f(e);n&&("keyup"!=e.type||o!==n?t.handleKey(n,function(e){var t=[];return e.shiftKey&&t.push("shift"),e.altKey&&t.push("alt"),e.ctrlKey&&t.push("ctrl"),e.metaKey&&t.push("meta"),t}(e),e):o=!1)}function h(e,a,i,d,p){t._directMap[e+":"+i]=a;var m,y=(e=e.replace(/\s+/g," ")).split(" ");y.length>1?function(e,t,a,i){function u(t){return function(){l=t,++r[e],clearTimeout(n),n=setTimeout(s,1e3)}}function d(t){c(a,t,e),"keyup"!==i&&(o=f(t)),setTimeout(s,10)}r[e]=0;for(var p=0;p<t.length;++p){var m=p+1===t.length?d:u(i||g(t[p+1]).action);h(t[p],m,i,e,p)}}(e,y,a,i):(m=g(e,i),t._callbacks[m.key]=t._callbacks[m.key]||[],u(m.key,m.modifiers,{type:m.action},d,e,p),t._callbacks[m.key][d?"unshift":"push"]({callback:a,modifiers:m.modifiers,action:m.action,seq:d,level:p,combo:e}))}t._handleKey=function(e,t,n){var r,o=u(e,t,n),a={},d=0,p=!1;for(r=0;r<o.length;++r)o[r].seq&&(d=Math.max(d,o[r].level));for(r=0;r<o.length;++r)if(o[r].seq){if(o[r].level!=d)continue;p=!0,a[o[r].seq]=1,c(o[r].callback,n,o[r].combo,o[r].seq)}else p||c(o[r].callback,n,o[r].combo);var f="keypress"==n.type&&i;n.type!=l||m(e)||f||s(a),i=p&&"keydown"==n.type},t._bindMultiple=function(e,t,n){for(var r=0;r<e.length;++r)h(e[r],t,n)},p(e,"keypress",d),p(e,"keydown",d),p(e,"keyup",d)}}("undefined"!=typeof window?window:null,"undefined"!=typeof window?document:null)},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,p=null,f=3,m=!1,h=!1,g=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,w="undefined"!=typeof setImmediate?setImmediate:null;function S(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function x(e){if(g=!1,S(e),!h)if(null!==r(u))h=!0,C||(C=!0,k());else{var t=r(c);null!==t&&A(x,t.startTime-e)}}var k,C=!1,E=-1,P=5,T=-1;function O(){return!(!y&&t.unstable_now()-T<P)}function R(){if(y=!1,C){var e=t.unstable_now();T=e;var n=!0;try{e:{h=!1,g&&(g=!1,b(E),E=-1),m=!0;var a=f;try{t:{for(S(e),p=r(u);null!==p&&!(p.expirationTime>e&&O());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){p.callback=l,S(e),n=!0;break t}p===r(u)&&o(u),S(e)}else o(u);p=r(u)}if(null!==p)n=!0;else{var s=r(c);null!==s&&A(x,s.startTime-e),n=!1}}break e}finally{p=null,f=a,m=!1}n=void 0}}finally{n?k():C=!1}}}if("function"==typeof w)k=function(){w(R)};else if("undefined"!=typeof MessageChannel){var M=new MessageChannel,z=M.port2;M.port1.onmessage=R,k=function(){z.postMessage(null)}}else k=function(){v(R,0)};function A(e,n){E=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(b(E),E=-1):g=!0,A(x,a-i))):(e.sortIndex=l,n(u,e),h||m||(h=!0,C||(C=!0,k()))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},540:(e,t,n)=>{"use strict";e.exports=n(869)},610:()=>{!function(e){if(e){var t={},n=e.prototype.stopCallback;e.prototype.stopCallback=function(e,r,o,a){return!!this.paused||!t[o]&&!t[a]&&n.call(this,e,r,o)},e.prototype.bindGlobal=function(e,n,r){if(this.bind(e,n,r),e instanceof Array)for(var o=0;o<e.length;o++)t[e[o]]=!0;else t[e]=!0},e.init()}}("undefined"!=typeof Mousetrap?Mousetrap:void 0)},698:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function o(e,t,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==t.key&&(o=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:o,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=o,t.jsxs=o},848:(e,t,n)=>{"use strict";e.exports=n(698)},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,h(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,x={H:null,A:null,T:null,S:null,V:null},k=Object.prototype.hasOwnProperty;function C(e,t,r,o,a,i){return r=i.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:i}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function O(){}function R(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case p:return R((c=e._init)(e._payload),t,o,a,i)}}if(c)return i=i(e),c=""===a?"."+T(e,0):a,S(i)?(o="",null!=c&&(o=c.replace(P,"$&/")+"/"),R(i,t,o,"",(function(e){return e}))):null!=i&&(E(i)&&(s=i,u=o+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+c,i=C(s.type,u,void 0,0,0,s.props)),t.push(i)),1;c=0;var d,m=""===a?".":a+":";if(S(e))for(var h=0;h<e.length;h++)c+=R(a=e[h],t,o,l=m+T(a,h),i);else if("function"==typeof(h=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=f&&d[f]||d["@@iterator"])?d:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=R(a=a.value,t,o,l=m+T(a,h++),i);else if("object"===l){if("function"==typeof e.then)return R(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(O,O):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,o,a,i);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function M(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function z(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function N(){}t.Children={map:M,forEach:function(e,t,n){M(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return M(e,(function(){t++})),t},toArray:function(e){return M(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=x,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return x.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),o=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(o=""+t.key),t)!k.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var i=Array(a),l=0;l<a;l++)i[l]=arguments[l+2];r.children=i}return C(e.type,o,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,o={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=t[r]);var i=arguments.length-2;if(1===i)o.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===o[r]&&(o[r]=i[r]);return C(e,a,void 0,0,0,o)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:z}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=x.T,n={};x.T=n;try{var r=e(),o=x.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(N,A)}catch(e){A(e)}finally{x.T=t}},t.unstable_useCacheRefresh=function(){return x.H.useCacheRefresh()},t.use=function(e){return x.H.use(e)},t.useActionState=function(e,t,n){return x.H.useActionState(e,t,n)},t.useCallback=function(e,t){return x.H.useCallback(e,t)},t.useContext=function(e){return x.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return x.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=x.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return x.H.useId()},t.useImperativeHandle=function(e,t,n){return x.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return x.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return x.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return x.H.useMemo(e,t)},t.useOptimistic=function(e,t){return x.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return x.H.useReducer(e,t,n)},t.useRef=function(e){return x.H.useRef(e)},t.useState=function(e){return x.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return x.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return x.H.useTransition()},t.version="19.1.0"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{"use strict";e.exports=n(477)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=o(848),t=o(540),n=o.t(t,2),r=o(338);function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const i=function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r},l=e=>e,s=(()=>{let e=l;return{configure(t){e=t},generate:t=>e(t),reset(){e=l}}})(),u={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function c(e,t,n="Mui"){const r=u[t];return r?`${n}-${r}`:`${s.generate(e)}-${t}`}function d(e,t,n=void 0){const r={};for(const o in e){const a=e[o];let i="",l=!0;for(let e=0;e<a.length;e+=1){const r=a[e];r&&(i+=(!0===l?"":" ")+t(r),l=!1,n&&n[r]&&(i+=" "+n[r]))}r[o]=i}return r}function p(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}function f(e){if("string"!=typeof e)throw new Error(p(7));return e.charAt(0).toUpperCase()+e.slice(1)}function m(e,t){const n={...t};for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)){const o=r;if("components"===o||"slots"===o)n[o]={...e[o],...n[o]};else if("componentsProps"===o||"slotProps"===o){const r=e[o],a=t[o];if(a)if(r){n[o]={...a};for(const e in r)if(Object.prototype.hasOwnProperty.call(r,e)){const t=e;n[o][t]=m(r[t],a[t])}}else n[o]=a;else n[o]=r||{}}else void 0===n[o]&&(n[o]=e[o])}return n}var h=o(405);function g(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function y(e){if(t.isValidElement(e)||(0,h.Hy)(e)||!g(e))return e;const n={};return Object.keys(e).forEach((t=>{n[t]=y(e[t])})),n}function v(e,n,r={clone:!0}){const o=r.clone?{...e}:e;return g(e)&&g(n)&&Object.keys(n).forEach((a=>{t.isValidElement(n[a])||(0,h.Hy)(n[a])?o[a]=n[a]:g(n[a])&&Object.prototype.hasOwnProperty.call(e,a)&&g(e[a])?o[a]=v(e[a],n[a],r):r.clone?o[a]=g(n[a])?y(n[a]):n[a]:o[a]=n[a]})),o}function b(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...o}=e,a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),i=Object.keys(a);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function s(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function u(e,o){const a=i.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[i[a]]?t[i[a]]:o)-r/100}${n})`}return{keys:i,values:a,up:l,down:s,between:u,only:function(e){return i.indexOf(e)+1<i.length?u(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?s(i[t]):u(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...o}}const w={borderRadius:4},S={xs:0,sm:600,md:900,lg:1200,xl:1536},x={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${S[e]}px)`},k={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:S[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function C(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||x;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||x;return Object.keys(t).reduce(((o,a)=>{if(i=e.keys,"@"===(l=a)||l.startsWith("@")&&(i.some((e=>l.startsWith(`@${e}`)))||l.match(/^@\d/))){const e=function(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,o]=n,a=Number.isNaN(+r)?r||0:+r;return e.containerQueries(o).up(a)}(r.containerQueries?r:k,a);e&&(o[e]=n(t[a],a))}else if(Object.keys(e.values||S).includes(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}var i,l;return o}),{})}return n(t)}function E(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function P(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:E(e,n)||r,t&&(o=t(o,r,e)),o}const T=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=E(e.theme,r)||{};return C(e,a,(e=>{let r=P(i,o,e);return e===r&&"string"==typeof e&&(r=P(i,o,`${t}${"default"===e?"":f(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},O=function(e,t){return t?v(e,t,{clone:!1}):e},R={m:"margin",p:"padding"},M={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},z={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},A=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!z[e])return[e];e=z[e]}const[t,n]=e.split(""),r=R[t],o=M[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(t)),e[t])}(),N=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],L=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],$=[...N,...L];function _(e,t,n,r){const o=E(e,t,!0)??n;return"number"==typeof o||"string"==typeof o?e=>"string"==typeof e?e:"string"==typeof o?o.startsWith("var(")&&0===e?0:o.startsWith("var(")&&1===e?o:`calc(${e} * ${o})`:o*e:Array.isArray(o)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=o[t];return e>=0?n:"number"==typeof n?-n:"string"==typeof n&&n.startsWith("var(")?`calc(-1 * ${n})`:`-${n}`}:"function"==typeof o?o:()=>{}}function I(e){return _(e,"spacing",8)}function j(e,t){return"string"==typeof t||null==t?t:e(t)}function F(e,t){const n=I(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(!t.includes(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=j(t,n),e)),{})}(A(n),r);return C(e,e[n],o)}(e,t,r,n))).reduce(O,{})}function D(e){return F(e,N)}function B(e){return F(e,L)}function W(e){return F(e,$)}function H(e=8,t=I({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}D.propTypes={},D.filterProps=N,B.propTypes={},B.filterProps=L,W.propTypes={},W.filterProps=$;const V=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?O(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function U(e){return"number"!=typeof e?e:`${e}px solid`}function q(e,t){return T({prop:e,themeKey:"borders",transform:t})}const K=q("border",U),G=q("borderTop",U),Q=q("borderRight",U),X=q("borderBottom",U),Y=q("borderLeft",U),Z=q("borderColor"),J=q("borderTopColor"),ee=q("borderRightColor"),te=q("borderBottomColor"),ne=q("borderLeftColor"),re=q("outline",U),oe=q("outlineColor"),ae=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=_(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:j(t,e)});return C(e,e.borderRadius,n)}return null};ae.propTypes={},ae.filterProps=["borderRadius"],V(K,G,Q,X,Y,Z,J,ee,te,ne,ae,re,oe);const ie=e=>{if(void 0!==e.gap&&null!==e.gap){const t=_(e.theme,"spacing",8),n=e=>({gap:j(t,e)});return C(e,e.gap,n)}return null};ie.propTypes={},ie.filterProps=["gap"];const le=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=_(e.theme,"spacing",8),n=e=>({columnGap:j(t,e)});return C(e,e.columnGap,n)}return null};le.propTypes={},le.filterProps=["columnGap"];const se=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=_(e.theme,"spacing",8),n=e=>({rowGap:j(t,e)});return C(e,e.rowGap,n)}return null};function ue(e,t){return"grey"===t?t:e}function ce(e){return e<=1&&0!==e?100*e+"%":e}se.propTypes={},se.filterProps=["rowGap"],V(ie,le,se,T({prop:"gridColumn"}),T({prop:"gridRow"}),T({prop:"gridAutoFlow"}),T({prop:"gridAutoColumns"}),T({prop:"gridAutoRows"}),T({prop:"gridTemplateColumns"}),T({prop:"gridTemplateRows"}),T({prop:"gridTemplateAreas"}),T({prop:"gridArea"})),V(T({prop:"color",themeKey:"palette",transform:ue}),T({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:ue}),T({prop:"backgroundColor",themeKey:"palette",transform:ue}));const de=T({prop:"width",transform:ce}),pe=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||S[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:ce(t)}};return C(e,e.maxWidth,t)}return null};pe.filterProps=["maxWidth"];const fe=T({prop:"minWidth",transform:ce}),me=T({prop:"height",transform:ce}),he=T({prop:"maxHeight",transform:ce}),ge=T({prop:"minHeight",transform:ce}),ye=(T({prop:"size",cssProperty:"width",transform:ce}),T({prop:"size",cssProperty:"height",transform:ce}),V(de,pe,fe,me,he,ge,T({prop:"boxSizing"})),{border:{themeKey:"borders",transform:U},borderTop:{themeKey:"borders",transform:U},borderRight:{themeKey:"borders",transform:U},borderBottom:{themeKey:"borders",transform:U},borderLeft:{themeKey:"borders",transform:U},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:U},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:ae},color:{themeKey:"palette",transform:ue},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:ue},backgroundColor:{themeKey:"palette",transform:ue},p:{style:B},pt:{style:B},pr:{style:B},pb:{style:B},pl:{style:B},px:{style:B},py:{style:B},padding:{style:B},paddingTop:{style:B},paddingRight:{style:B},paddingBottom:{style:B},paddingLeft:{style:B},paddingX:{style:B},paddingY:{style:B},paddingInline:{style:B},paddingInlineStart:{style:B},paddingInlineEnd:{style:B},paddingBlock:{style:B},paddingBlockStart:{style:B},paddingBlockEnd:{style:B},m:{style:D},mt:{style:D},mr:{style:D},mb:{style:D},ml:{style:D},mx:{style:D},my:{style:D},margin:{style:D},marginTop:{style:D},marginRight:{style:D},marginBottom:{style:D},marginLeft:{style:D},marginX:{style:D},marginY:{style:D},marginInline:{style:D},marginInlineStart:{style:D},marginInlineEnd:{style:D},marginBlock:{style:D},marginBlockStart:{style:D},marginBlockEnd:{style:D},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:ie},rowGap:{style:se},columnGap:{style:le},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:ce},maxWidth:{style:pe},minWidth:{transform:ce},height:{transform:ce},maxHeight:{transform:ce},minHeight:{transform:ce},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),ve=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:s,style:u}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=E(n,l)||{};return u?u(o):C(o,t,(t=>{let n=P(c,s,t);return t===n&&"string"==typeof t&&(n=P(c,s,`${e}${"default"===t?"":f(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){const{sx:r,theme:o={}}=n||{};if(!r)return null;const a=o.unstable_sxConfig??ye;function i(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const i=function(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}(o.breakpoints),l=Object.keys(i);let s=i;return Object.keys(r).forEach((n=>{const i=function(e,t){return"function"==typeof e?e(t):e}(r[n],o);if(null!=i)if("object"==typeof i)if(a[n])s=O(s,e(n,i,o,a));else{const e=C({theme:o},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?s=O(s,e):s[n]=t({sx:i,theme:o})}else s=O(s,e(n,i,o,a))})),function(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}(o,(u=s,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),u)));var u}return Array.isArray(r)?r.map(i):i(r)}}();ve.filterProps=["sx"];const be=ve;function we(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const Se=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={},...i}=e;let l=v({breakpoints:b(n),direction:"ltr",components:{},palette:{mode:"light",...r},spacing:H(o),shape:{...w,...a}},i);return l=function(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const o=t(e.breakpoints.not(...n),r);return o.includes("not all and")?o.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):o}}const r={},o=e=>(n(r,e),r);return n(o),{...e,containerQueries:o}}(l),l.applyStyles=we,l=t.reduce(((e,t)=>v(e,t)),l),l.unstable_sxConfig={...ye,...i?.unstable_sxConfig},l.unstable_sx=function(e){return be({sx:e,theme:this})},l};var xe=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),ke=Math.abs,Ce=String.fromCharCode,Ee=Object.assign;function Pe(e){return e.trim()}function Te(e,t,n){return e.replace(t,n)}function Oe(e,t){return e.indexOf(t)}function Re(e,t){return 0|e.charCodeAt(t)}function Me(e,t,n){return e.slice(t,n)}function ze(e){return e.length}function Ae(e){return e.length}function Ne(e,t){return t.push(e),e}var Le=1,$e=1,_e=0,Ie=0,je=0,Fe="";function De(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Le,column:$e,length:i,return:""}}function Be(e,t){return Ee(De("",null,null,"",null,null,0),e,{length:-e.length},t)}function We(){return je=Ie>0?Re(Fe,--Ie):0,$e--,10===je&&($e=1,Le--),je}function He(){return je=Ie<_e?Re(Fe,Ie++):0,$e++,10===je&&($e=1,Le++),je}function Ve(){return Re(Fe,Ie)}function Ue(){return Ie}function qe(e,t){return Me(Fe,e,t)}function Ke(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function Ge(e){return Le=$e=1,_e=ze(Fe=e),Ie=0,[]}function Qe(e){return Fe="",e}function Xe(e){return Pe(qe(Ie-1,Je(91===e?e+2:40===e?e+1:e)))}function Ye(e){for(;(je=Ve())&&je<33;)He();return Ke(e)>2||Ke(je)>3?"":" "}function Ze(e,t){for(;--t&&He()&&!(je<48||je>102||je>57&&je<65||je>70&&je<97););return qe(e,Ue()+(t<6&&32==Ve()&&32==He()))}function Je(e){for(;He();)switch(je){case e:return Ie;case 34:case 39:34!==e&&39!==e&&Je(je);break;case 40:41===e&&Je(e);break;case 92:He()}return Ie}function et(e,t){for(;He()&&e+je!==57&&(e+je!==84||47!==Ve()););return"/*"+qe(t,Ie-1)+"*"+Ce(47===e?e:He())}function tt(e){for(;!Ke(Ve());)He();return qe(e,Ie)}var nt="-ms-",rt="-moz-",ot="-webkit-",at="comm",it="rule",lt="decl",st="@keyframes";function ut(e,t){for(var n="",r=Ae(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function ct(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case lt:return e.return=e.return||e.value;case at:return"";case st:return e.return=e.value+"{"+ut(e.children,r)+"}";case it:e.value=e.props.join(",")}return ze(n=ut(e.children,r))?e.return=e.value+"{"+n+"}":""}function dt(e){return Qe(pt("",null,null,null,[""],e=Ge(e),0,[0],e))}function pt(e,t,n,r,o,a,i,l,s){for(var u=0,c=0,d=i,p=0,f=0,m=0,h=1,g=1,y=1,v=0,b="",w=o,S=a,x=r,k=b;g;)switch(m=v,v=He()){case 40:if(108!=m&&58==Re(k,d-1)){-1!=Oe(k+=Te(Xe(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:k+=Xe(v);break;case 9:case 10:case 13:case 32:k+=Ye(m);break;case 92:k+=Ze(Ue()-1,7);continue;case 47:switch(Ve()){case 42:case 47:Ne(mt(et(He(),Ue()),t,n),s);break;default:k+="/"}break;case 123*h:l[u++]=ze(k)*y;case 125*h:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:-1==y&&(k=Te(k,/\f/g,"")),f>0&&ze(k)-d&&Ne(f>32?ht(k+";",r,n,d-1):ht(Te(k," ","")+";",r,n,d-2),s);break;case 59:k+=";";default:if(Ne(x=ft(k,t,n,u,c,o,l,b,w=[],S=[],d),a),123===v)if(0===c)pt(k,t,x,x,w,a,d,l,S);else switch(99===p&&110===Re(k,3)?100:p){case 100:case 108:case 109:case 115:pt(e,x,x,r&&Ne(ft(e,x,x,0,0,o,l,b,o,w=[],d),S),o,S,d,l,r?w:S);break;default:pt(k,x,x,x,[""],S,0,l,S)}}u=c=f=0,h=y=1,b=k="",d=i;break;case 58:d=1+ze(k),f=m;default:if(h<1)if(123==v)--h;else if(125==v&&0==h++&&125==We())continue;switch(k+=Ce(v),v*h){case 38:y=c>0?1:(k+="\f",-1);break;case 44:l[u++]=(ze(k)-1)*y,y=1;break;case 64:45===Ve()&&(k+=Xe(He())),p=Ve(),c=d=ze(b=k+=tt(Ue())),v++;break;case 45:45===m&&2==ze(k)&&(h=0)}}return a}function ft(e,t,n,r,o,a,i,l,s,u,c){for(var d=o-1,p=0===o?a:[""],f=Ae(p),m=0,h=0,g=0;m<r;++m)for(var y=0,v=Me(e,d+1,d=ke(h=i[m])),b=e;y<f;++y)(b=Pe(h>0?p[y]+" "+v:Te(v,/&\f/g,p[y])))&&(s[g++]=b);return De(e,t,n,0===o?it:l,s,u,c)}function mt(e,t,n){return De(e,t,n,at,Ce(je),Me(e,2,-2),0)}function ht(e,t,n,r){return De(e,t,n,lt,Me(e,0,r),Me(e,r+1,-1),r)}var gt=function(e,t,n){for(var r=0,o=0;r=o,o=Ve(),38===r&&12===o&&(t[n]=1),!Ke(o);)He();return qe(e,Ie)},yt=new WeakMap,vt=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||yt.get(n))&&!r){yt.set(e,!0);for(var o=[],a=function(e,t){return Qe(function(e,t){var n=-1,r=44;do{switch(Ke(r)){case 0:38===r&&12===Ve()&&(t[n]=1),e[n]+=gt(Ie-1,t,n);break;case 2:e[n]+=Xe(r);break;case 4:if(44===r){e[++n]=58===Ve()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=Ce(r)}}while(r=He());return e}(Ge(e),t))}(t,o),i=n.props,l=0,s=0;l<a.length;l++)for(var u=0;u<i.length;u++,s++)e.props[s]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},bt=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function wt(e,t){switch(function(e,t){return 45^Re(e,0)?(((t<<2^Re(e,0))<<2^Re(e,1))<<2^Re(e,2))<<2^Re(e,3):0}(e,t)){case 5103:return ot+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ot+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ot+e+rt+e+nt+e+e;case 6828:case 4268:return ot+e+nt+e+e;case 6165:return ot+e+nt+"flex-"+e+e;case 5187:return ot+e+Te(e,/(\w+).+(:[^]+)/,ot+"box-$1$2"+nt+"flex-$1$2")+e;case 5443:return ot+e+nt+"flex-item-"+Te(e,/flex-|-self/,"")+e;case 4675:return ot+e+nt+"flex-line-pack"+Te(e,/align-content|flex-|-self/,"")+e;case 5548:return ot+e+nt+Te(e,"shrink","negative")+e;case 5292:return ot+e+nt+Te(e,"basis","preferred-size")+e;case 6060:return ot+"box-"+Te(e,"-grow","")+ot+e+nt+Te(e,"grow","positive")+e;case 4554:return ot+Te(e,/([^-])(transform)/g,"$1"+ot+"$2")+e;case 6187:return Te(Te(Te(e,/(zoom-|grab)/,ot+"$1"),/(image-set)/,ot+"$1"),e,"")+e;case 5495:case 3959:return Te(e,/(image-set\([^]*)/,ot+"$1$`$1");case 4968:return Te(Te(e,/(.+:)(flex-)?(.*)/,ot+"box-pack:$3"+nt+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+ot+e+e;case 4095:case 3583:case 4068:case 2532:return Te(e,/(.+)-inline(.+)/,ot+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(ze(e)-1-t>6)switch(Re(e,t+1)){case 109:if(45!==Re(e,t+4))break;case 102:return Te(e,/(.+:)(.+)-([^]+)/,"$1"+ot+"$2-$3$1"+rt+(108==Re(e,t+3)?"$3":"$2-$3"))+e;case 115:return~Oe(e,"stretch")?wt(Te(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==Re(e,t+1))break;case 6444:switch(Re(e,ze(e)-3-(~Oe(e,"!important")&&10))){case 107:return Te(e,":",":"+ot)+e;case 101:return Te(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+ot+(45===Re(e,14)?"inline-":"")+"box$3$1"+ot+"$2$3$1"+nt+"$2box$3")+e}break;case 5936:switch(Re(e,t+11)){case 114:return ot+e+nt+Te(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ot+e+nt+Te(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ot+e+nt+Te(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ot+e+nt+e+e}return e}var St=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case lt:e.return=wt(e.value,e.length);break;case st:return ut([Be(e,{value:Te(e.value,"@","@"+ot)})],r);case it:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return ut([Be(e,{props:[Te(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return ut([Be(e,{props:[Te(t,/:(plac\w+)/,":"+ot+"input-$1")]}),Be(e,{props:[Te(t,/:(plac\w+)/,":-moz-$1")]}),Be(e,{props:[Te(t,/:(plac\w+)/,nt+"input-$1")]})],r)}return""}))}}],xt=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||St,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var s,u,c,d,p=[ct,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],f=(u=[vt,bt].concat(a,p),c=Ae(u),function(e,t,n,r){for(var o="",a=0;a<c;a++)o+=u[a](e,t,n,r)||"";return o});o=function(e,t,n,r){s=n,function(e){ut(dt(e),f)}(e?e+"{"+t.styles+"}":t.styles),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new xe({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return m.sheet.hydrate(l),m};function kt(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}var Ct=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Et=function(e,t,n){Ct(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},Pt={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function Tt(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var Ot=/[A-Z]|^ms/g,Rt=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Mt=function(e){return 45===e.charCodeAt(1)},zt=function(e){return null!=e&&"boolean"!=typeof e},At=Tt((function(e){return Mt(e)?e:e.replace(Ot,"-$&").toLowerCase()})),Nt=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Rt,(function(e,t,n){return $t={name:t,styles:n,next:$t},t}))}return 1===Pt[e]||Mt(e)||"number"!=typeof t||0===t?t:t+"px"};function Lt(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var o=n;if(1===o.anim)return $t={name:o.name,styles:o.styles,next:$t},o.name;var a=n;if(void 0!==a.styles){var i=a.next;if(void 0!==i)for(;void 0!==i;)$t={name:i.name,styles:i.styles,next:$t},i=i.next;return a.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=Lt(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i){var l=i;null!=t&&void 0!==t[l]?r+=a+"{"+t[l]+"}":zt(l)&&(r+=At(a)+":"+Nt(a,l)+";")}else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var s=Lt(e,t,i);switch(a){case"animation":case"animationName":r+=At(a)+":"+s+";";break;default:r+=a+"{"+s+"}"}}else for(var u=0;u<i.length;u++)zt(i[u])&&(r+=At(a)+":"+Nt(a,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var l=$t,s=n(e);return $t=l,Lt(e,t,s)}}var u=n;if(null==t)return u;var c=t[u];return void 0!==c?c:u}var $t,_t=/label:\s*([^\s;{]+)\s*(;|$)/g;function It(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";$t=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=Lt(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=Lt(n,t,e[i]),r&&(o+=a[i]);_t.lastIndex=0;for(var l,s="";null!==(l=_t.exec(o));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+s;return{name:u,styles:o,next:$t}}var jt=!!n.useInsertionEffect&&n.useInsertionEffect,Ft=jt||function(e){return e()},Dt=jt||t.useLayoutEffect,Bt=t.createContext("undefined"!=typeof HTMLElement?xt({key:"css"}):null),Wt=(Bt.Provider,function(e){return(0,t.forwardRef)((function(n,r){var o=(0,t.useContext)(Bt);return e(n,o,r)}))}),Ht=t.createContext({}),Vt={}.hasOwnProperty,Ut="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",qt=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Ct(t,n,r),Ft((function(){return Et(t,n,r)})),null},Kt=Wt((function(e,n,r){var o=e.css;"string"==typeof o&&void 0!==n.registered[o]&&(o=n.registered[o]);var a=e[Ut],i=[o],l="";"string"==typeof e.className?l=kt(n.registered,i,e.className):null!=e.className&&(l=e.className+" ");var s=It(i,void 0,t.useContext(Ht));l+=n.key+"-"+s.name;var u={};for(var c in e)Vt.call(e,c)&&"css"!==c&&c!==Ut&&(u[c]=e[c]);return u.className=l,r&&(u.ref=r),t.createElement(t.Fragment,null,t.createElement(qt,{cache:n,serialized:s,isStringTag:"string"==typeof a}),t.createElement(a,u))}));const Gt=Se(),Qt=function(e=Gt){return function(e=null){const n=t.useContext(Ht);return n&&(r=n,0!==Object.keys(r).length)?n:e;var r}(e)};function Xt(){return Xt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Xt.apply(null,arguments)}var Yt=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Zt=Tt((function(e){return Yt.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Jt=function(e){return"theme"!==e},en=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Zt:Jt},tn=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},nn=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Ct(t,n,r),Ft((function(){return Et(t,n,r)})),null},rn=function e(n,r){var o,a,i=n.__emotion_real===n,l=i&&n.__emotion_base||n;void 0!==r&&(o=r.label,a=r.target);var s=tn(n,r,i),u=s||en(l),c=!u("as");return function(){var d=arguments,p=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==o&&p.push("label:"+o+";"),null==d[0]||void 0===d[0].raw)p.push.apply(p,d);else{var f=d[0];p.push(f[0]);for(var m=d.length,h=1;h<m;h++)p.push(d[h],f[h])}var g=Wt((function(e,n,r){var o=c&&e.as||l,i="",d=[],f=e;if(null==e.theme){for(var m in f={},e)f[m]=e[m];f.theme=t.useContext(Ht)}"string"==typeof e.className?i=kt(n.registered,d,e.className):null!=e.className&&(i=e.className+" ");var h=It(p.concat(d),n.registered,f);i+=n.key+"-"+h.name,void 0!==a&&(i+=" "+a);var g=c&&void 0===s?en(o):u,y={};for(var v in e)c&&"as"===v||g(v)&&(y[v]=e[v]);return y.className=i,r&&(y.ref=r),t.createElement(t.Fragment,null,t.createElement(nn,{cache:n,serialized:h,isStringTag:"string"==typeof o}),t.createElement(o,y))}));return g.displayName=void 0!==o?o:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",g.defaultProps=n.defaultProps,g.__emotion_real=g,g.__emotion_base=l,g.__emotion_styles=p,g.__emotion_forwardProp=s,Object.defineProperty(g,"toString",{value:function(){return"."+a}}),g.withComponent=function(t,n){return e(t,Xt({},r,n,{shouldForwardProp:tn(g,n,!0)})).apply(void 0,p)},g}}.bind(null);function on(e,t){return rn(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){rn[e]=rn(e)}));const an=[];function ln(e){return an[0]=e,It(an)}function sn(e){const{variants:t,...n}=e,r={variants:t,style:ln(n),isProcessed:!0};return r.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=ln(e.style))})),r}const un=Se();function cn(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function dn(e){return e?(t,n)=>n[e]:null}function pn(e,t){const n="function"==typeof t?t(e):t;if(Array.isArray(n))return n.flatMap((t=>pn(e,t)));if(Array.isArray(n?.variants)){let t;if(n.isProcessed)t=n.style;else{const{variants:e,...r}=n;t=r}return fn(e,n.variants,[t])}return n?.isProcessed?n.style:n}function fn(e,t,n=[]){let r;e:for(let o=0;o<t.length;o+=1){const a=t[o];if("function"==typeof a.props){if(r??={...e,...e.ownerState,ownerState:e.ownerState},!a.props(r))continue}else for(const t in a.props)if(e[t]!==a.props[t]&&e.ownerState?.[t]!==a.props[t])continue e;"function"==typeof a.style?(r??={...e,...e.ownerState,ownerState:e.ownerState},n.push(a.style(r))):n.push(a.style)}return n}function mn(e={}){const{themeId:t,defaultTheme:n=un,rootShouldForwardProp:r=cn,slotShouldForwardProp:o=cn}=e;function a(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{!function(e){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>e!==be)))(e.__emotion_styles))}(e);const{name:n,slot:i,skipVariantsResolver:l,skipSx:s,overridesResolver:u=dn(hn(i)),...c}=t,d=void 0!==l?l:i&&"Root"!==i&&"root"!==i||!1,p=s||!1;let f=cn;"Root"===i||"root"===i?f=r:i?f=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(f=void 0);const m=on(e,{shouldForwardProp:f,label:void 0,...c}),h=e=>{if("function"==typeof e&&e.__emotion_real!==e)return function(t){return pn(t,e)};if(g(e)){const t=sn(e);return t.variants?function(e){return pn(e,t)}:t.style}return e},y=(...t)=>{const r=[],o=t.map(h),i=[];if(r.push(a),n&&u&&i.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const o={};for(const t in r)o[t]=pn(e,r[t]);return u(e,o)})),n&&!d&&i.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?fn(e,r):null})),p||i.push(be),Array.isArray(o[0])){const e=o.shift(),t=new Array(r.length).fill(""),n=new Array(i.length).fill("");let a;a=[...t,...e,...n],a.raw=[...t,...e.raw,...n],r.unshift(a)}const l=[...r,...o,...i],s=m(...l);return e.muiName&&(s.muiName=e.muiName),s};return m.withConfig&&(y.withConfig=m.withConfig),y}}function hn(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}const gn=mn(),yn=Se(),vn=gn("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${f(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),bn=e=>function({props:e,name:t,defaultTheme:n,themeId:r}){let o=Qt(n);return r&&(o=o[r]||o),function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?m(t.components[n].defaultProps,r):r}({theme:o,name:t,props:e})}({props:e,name:"MuiContainer",defaultTheme:yn}),wn=f;function Sn(e,t=0,n=1){return function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}(e,t,n)}function xn(e){if(e.type)return e;if("#"===e.charAt(0))return xn(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error(p(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(r))throw new Error(p(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}const kn=(e,t)=>{try{return(e=>{const t=xn(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function Cn(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function En(e){e=xn(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),Cn({type:l,values:s})}function Pn(e){let t="hsl"===(e=xn(e)).type||"hsla"===e.type?xn(En(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Tn(e,t){return e=xn(e),t=Sn(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Cn(e)}function On(e,t,n){try{return Tn(e,t)}catch(t){return e}}function Rn(e,t){if(e=xn(e),t=Sn(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Cn(e)}function Mn(e,t,n){try{return Rn(e,t)}catch(t){return e}}function zn(e,t){if(e=xn(e),t=Sn(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Cn(e)}function An(e,t,n){try{return zn(e,t)}catch(t){return e}}function Nn(e,t=.15){return Pn(e)>.5?Rn(e,t):zn(e,t)}function Ln(e,t,n){try{return Nn(e,t)}catch(t){return e}}const $n={black:"#000",white:"#fff"},_n={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},In="#f3e5f5",jn="#ce93d8",Fn="#ba68c8",Dn="#ab47bc",Bn="#9c27b0",Wn="#7b1fa2",Hn="#e57373",Vn="#ef5350",Un="#f44336",qn="#d32f2f",Kn="#c62828",Gn="#ffb74d",Qn="#ffa726",Xn="#ff9800",Yn="#f57c00",Zn="#e65100",Jn="#e3f2fd",er="#90caf9",tr="#42a5f5",nr="#1976d2",rr="#1565c0",or="#4fc3f7",ar="#29b6f6",ir="#03a9f4",lr="#0288d1",sr="#01579b",ur="#81c784",cr="#66bb6a",dr="#4caf50",pr="#388e3c",fr="#2e7d32",mr="#1b5e20";function hr(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:$n.white,default:$n.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const gr=hr();function yr(){return{text:{primary:$n.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:$n.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const vr=yr();function br(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=zn(e.main,o):"dark"===t&&(e.dark=Rn(e.main,a)))}function wr(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2,...o}=e,a=e.primary||function(e="light"){return"dark"===e?{main:er,light:Jn,dark:tr}:{main:nr,light:tr,dark:rr}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:jn,light:In,dark:Dn}:{main:Bn,light:Fn,dark:Wn}}(t),l=e.error||function(e="light"){return"dark"===e?{main:Un,light:Hn,dark:qn}:{main:qn,light:Vn,dark:Kn}}(t),s=e.info||function(e="light"){return"dark"===e?{main:ar,light:or,dark:lr}:{main:lr,light:ir,dark:sr}}(t),u=e.success||function(e="light"){return"dark"===e?{main:cr,light:ur,dark:pr}:{main:fr,light:dr,dark:mr}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:Qn,light:Gn,dark:Yn}:{main:"#ed6c02",light:Xn,dark:Zn}}(t);function d(e){const t=function(e,t){const n=Pn(e),r=Pn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,vr.text.primary)>=n?vr.text.primary:gr.text.primary;return t}const f=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(p(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(p(12,t?` (${t})`:"",JSON.stringify(e.main)));return br(e,"light",o,r),br(e,"dark",a,r),e.contrastText||(e.contrastText=d(e.main)),e};let m;return"light"===t?m=hr():"dark"===t&&(m=yr()),v({common:{...$n},mode:t,primary:f({color:a,name:"primary"}),secondary:f({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:f({color:l,name:"error"}),warning:f({color:c,name:"warning"}),info:f({color:s,name:"info"}),success:f({color:u,name:"success"}),grey:_n,contrastThreshold:n,getContrastText:d,augmentColor:f,tonalOffset:r,...m},o)}function Sr(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function xr(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}const kr=(e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))};function Cr(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={},i={};var l,s;return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,s=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(o,{[r]:s}),kr(a,e,`var(${r})`,l),kr(i,e,`var(${r}, ${s})`,l)}},s=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!s||s&&!s([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):l([...n,t],o,r))}))}(e),{css:o,vars:a,varsWithDefaults:i}}const Er={textTransform:"uppercase"},Pr='"Roboto", "Helvetica", "Arial", sans-serif';function Tr(e,t){const{fontFamily:n=Pr,fontSize:r=14,fontWeightLight:o=300,fontWeightRegular:a=400,fontWeightMedium:i=500,fontWeightBold:l=700,htmlFontSize:s=16,allVariants:u,pxToRem:c,...d}="function"==typeof t?t(e):t,p=r/14,f=c||(e=>e/s*p+"rem"),m=(e,t,r,o,a)=>{return{fontFamily:n,fontWeight:e,fontSize:f(t),lineHeight:r,...n===Pr?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},...a,...u};var i},h={h1:m(o,96,1.167,-1.5),h2:m(o,60,1.2,-.5),h3:m(a,48,1.167,0),h4:m(a,34,1.235,.25),h5:m(a,24,1.334,0),h6:m(i,20,1.6,.15),subtitle1:m(a,16,1.75,.15),subtitle2:m(i,14,1.57,.1),body1:m(a,16,1.5,.15),body2:m(a,14,1.43,.15),button:m(i,14,1.75,.4,Er),caption:m(a,12,1.66,.4),overline:m(a,12,2.66,1,Er),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return v({htmlFontSize:s,pxToRem:f,fontFamily:n,fontSize:r,fontWeightLight:o,fontWeightRegular:a,fontWeightMedium:i,fontWeightBold:l,...h},d,{clone:!1})}function Or(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Rr=["none",Or(0,2,1,-1,0,1,1,0,0,1,3,0),Or(0,3,1,-2,0,2,2,0,0,1,5,0),Or(0,3,3,-2,0,3,4,0,0,1,8,0),Or(0,2,4,-1,0,4,5,0,0,1,10,0),Or(0,3,5,-1,0,5,8,0,0,1,14,0),Or(0,3,5,-1,0,6,10,0,0,1,18,0),Or(0,4,5,-2,0,7,10,1,0,2,16,1),Or(0,5,5,-3,0,8,10,1,0,3,14,2),Or(0,5,6,-3,0,9,12,1,0,3,16,2),Or(0,6,6,-3,0,10,14,1,0,4,18,3),Or(0,6,7,-4,0,11,15,1,0,4,20,3),Or(0,7,8,-4,0,12,17,2,0,5,22,4),Or(0,7,8,-4,0,13,19,2,0,5,24,4),Or(0,7,9,-4,0,14,21,2,0,5,26,4),Or(0,8,9,-5,0,15,22,2,0,6,28,5),Or(0,8,10,-5,0,16,24,2,0,6,30,5),Or(0,8,11,-5,0,17,26,2,0,6,32,5),Or(0,9,11,-5,0,18,28,2,0,7,34,6),Or(0,9,12,-6,0,19,29,2,0,7,36,6),Or(0,10,13,-6,0,20,31,3,0,8,38,7),Or(0,10,13,-6,0,21,33,3,0,8,40,7),Or(0,10,14,-6,0,22,35,3,0,8,42,7),Or(0,11,14,-7,0,23,36,3,0,9,44,8),Or(0,11,15,-7,0,24,38,3,0,9,46,8)],Mr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},zr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Ar(e){return`${Math.round(e)}ms`}function Nr(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function Lr(e){const t={...Mr,...e.easing},n={...zr,...e.duration};return{getAutoHeightDuration:Nr,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0,...l}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Ar(o)} ${a} ${"string"==typeof i?i:Ar(i)}`)).join(",")},...e,easing:t,duration:n}}const $r={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function _r(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let o=0;o<n.length;o++){const[a,i]=n[o];!g(r=i)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||a.startsWith("unstable_")?delete t[a]:g(i)&&(t[a]={...i},e(t[a]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const Ir=function(e={},...t){const{breakpoints:n,mixins:r={},spacing:o,palette:a={},transitions:i={},typography:l={},shape:s,...u}=e;if(e.vars&&void 0===e.generateThemeVars)throw new Error(p(20));const c=wr(a),d=Se(e);let f=v(d,{mixins:(m=d.breakpoints,h=r,{toolbar:{minHeight:56,[m.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[m.up("sm")]:{minHeight:64}},...h}),palette:c,shadows:Rr.slice(),typography:Tr(c,l),transitions:Lr(i),zIndex:{...$r}});var m,h;return f=v(f,u),f=t.reduce(((e,t)=>v(e,t)),f),f.unstable_sxConfig={...ye,...u?.unstable_sxConfig},f.unstable_sx=function(e){return be({sx:e,theme:this})},f.toRuntimeSource=_r,f};function jr(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}const Fr=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=jr(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function Dr(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function Br(e){return"dark"===e?Fr:[]}function Wr(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const Hr=e=>(t,n)=>{const r=e.rootSelector||":root",o=e.colorSchemeSelector;let a=o;if("class"===o&&(a=".%s"),"data"===o&&(a="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(a=`[${o}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const o={};return(i=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${i?`${i}-`:""}overlays-${t}`)),`--${i?`${i}-`:""}palette-AppBar-darkBg`,`--${i?`${i}-`:""}palette-AppBar-darkColor`]).forEach((e=>{o[e]=n[e],delete n[e]})),"media"===a?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:o}}:a?{[a.replace("%s",t)]:o,[`${r}, ${a.replace("%s",t)}`]:n}:{[r]:{...n,...o}}}if(a&&"media"!==a)return`${r}, ${a.replace("%s",String(t))}`}else if(t){if("media"===a)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(a)return a.replace("%s",String(t))}var i;return r};function Vr(e,t,n){!e[t]&&n&&(e[t]=n)}function Ur(e){return"string"==typeof e&&e.startsWith("hsl")?En(e):e}function qr(e,t){`${t}Channel`in e||(e[`${t}Channel`]=kn(Ur(e[t])))}const Kr=e=>{try{return e()}catch(e){}};function Gr(e,t,n,r){if(!t)return;t=!0===t?{}:t;const o="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...o}=e,a=wr(t);return{palette:a,opacity:{...Dr(a.mode),...n},overlays:r||Br(a.mode),...o}}({...t,palette:{mode:o,...t?.palette}}));const{palette:a,...i}=Ir({...n,palette:{mode:o,...t?.palette}});return e[r]={...t,palette:a,opacity:{...Dr(o),...t?.opacity},overlays:t?.overlays||Br(o)},i}function Qr(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:r,disableCssColorScheme:o=!1,cssVarPrefix:a="mui",shouldSkipGeneratingVar:i=Wr,colorSchemeSelector:l=(n.light&&n.dark?"media":void 0),rootSelector:s=":root",...u}=e,c=Object.keys(n)[0],d=r||(n.light&&"light"!==c?"light":c),f=((e="mui")=>Sr(e))(a),{[d]:m,light:h,dark:g,...y}=n,b={...y};let w=m;if(("dark"===d&&!("dark"in n)||"light"===d&&!("light"in n))&&(w=!0),!w)throw new Error(p(21,d));const S=Gr(b,w,u,d);h&&!b.light&&Gr(b,h,void 0,"light"),g&&!b.dark&&Gr(b,g,void 0,"dark");let x={defaultColorScheme:d,...S,cssVarPrefix:a,colorSchemeSelector:l,rootSelector:s,getCssVar:f,colorSchemes:b,font:{...xr(S.typography),...S.font},spacing:(k=u.spacing,"number"==typeof k?`${k}px`:"string"==typeof k||"function"==typeof k||Array.isArray(k)?k:"8px")};var k;Object.keys(x.colorSchemes).forEach((e=>{const t=x.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],o=n[2];return f(e,t[r][o])};var r;if("light"===t.mode&&(Vr(t.common,"background","#fff"),Vr(t.common,"onBackground","#000")),"dark"===t.mode&&(Vr(t.common,"background","#000"),Vr(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){Vr(t.Alert,"errorColor",Mn(t.error.light,.6)),Vr(t.Alert,"infoColor",Mn(t.info.light,.6)),Vr(t.Alert,"successColor",Mn(t.success.light,.6)),Vr(t.Alert,"warningColor",Mn(t.warning.light,.6)),Vr(t.Alert,"errorFilledBg",n("palette-error-main")),Vr(t.Alert,"infoFilledBg",n("palette-info-main")),Vr(t.Alert,"successFilledBg",n("palette-success-main")),Vr(t.Alert,"warningFilledBg",n("palette-warning-main")),Vr(t.Alert,"errorFilledColor",Kr((()=>t.getContrastText(t.error.main)))),Vr(t.Alert,"infoFilledColor",Kr((()=>t.getContrastText(t.info.main)))),Vr(t.Alert,"successFilledColor",Kr((()=>t.getContrastText(t.success.main)))),Vr(t.Alert,"warningFilledColor",Kr((()=>t.getContrastText(t.warning.main)))),Vr(t.Alert,"errorStandardBg",An(t.error.light,.9)),Vr(t.Alert,"infoStandardBg",An(t.info.light,.9)),Vr(t.Alert,"successStandardBg",An(t.success.light,.9)),Vr(t.Alert,"warningStandardBg",An(t.warning.light,.9)),Vr(t.Alert,"errorIconColor",n("palette-error-main")),Vr(t.Alert,"infoIconColor",n("palette-info-main")),Vr(t.Alert,"successIconColor",n("palette-success-main")),Vr(t.Alert,"warningIconColor",n("palette-warning-main")),Vr(t.AppBar,"defaultBg",n("palette-grey-100")),Vr(t.Avatar,"defaultBg",n("palette-grey-400")),Vr(t.Button,"inheritContainedBg",n("palette-grey-300")),Vr(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),Vr(t.Chip,"defaultBorder",n("palette-grey-400")),Vr(t.Chip,"defaultAvatarColor",n("palette-grey-700")),Vr(t.Chip,"defaultIconColor",n("palette-grey-700")),Vr(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),Vr(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),Vr(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),Vr(t.LinearProgress,"primaryBg",An(t.primary.main,.62)),Vr(t.LinearProgress,"secondaryBg",An(t.secondary.main,.62)),Vr(t.LinearProgress,"errorBg",An(t.error.main,.62)),Vr(t.LinearProgress,"infoBg",An(t.info.main,.62)),Vr(t.LinearProgress,"successBg",An(t.success.main,.62)),Vr(t.LinearProgress,"warningBg",An(t.warning.main,.62)),Vr(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),Vr(t.Slider,"primaryTrack",An(t.primary.main,.62)),Vr(t.Slider,"secondaryTrack",An(t.secondary.main,.62)),Vr(t.Slider,"errorTrack",An(t.error.main,.62)),Vr(t.Slider,"infoTrack",An(t.info.main,.62)),Vr(t.Slider,"successTrack",An(t.success.main,.62)),Vr(t.Slider,"warningTrack",An(t.warning.main,.62));const e=Ln(t.background.default,.8);Vr(t.SnackbarContent,"bg",e),Vr(t.SnackbarContent,"color",Kr((()=>t.getContrastText(e)))),Vr(t.SpeedDialAction,"fabHoverBg",Ln(t.background.paper,.15)),Vr(t.StepConnector,"border",n("palette-grey-400")),Vr(t.StepContent,"border",n("palette-grey-400")),Vr(t.Switch,"defaultColor",n("palette-common-white")),Vr(t.Switch,"defaultDisabledColor",n("palette-grey-100")),Vr(t.Switch,"primaryDisabledColor",An(t.primary.main,.62)),Vr(t.Switch,"secondaryDisabledColor",An(t.secondary.main,.62)),Vr(t.Switch,"errorDisabledColor",An(t.error.main,.62)),Vr(t.Switch,"infoDisabledColor",An(t.info.main,.62)),Vr(t.Switch,"successDisabledColor",An(t.success.main,.62)),Vr(t.Switch,"warningDisabledColor",An(t.warning.main,.62)),Vr(t.TableCell,"border",An(On(t.divider,1),.88)),Vr(t.Tooltip,"bg",On(t.grey[700],.92))}if("dark"===t.mode){Vr(t.Alert,"errorColor",An(t.error.light,.6)),Vr(t.Alert,"infoColor",An(t.info.light,.6)),Vr(t.Alert,"successColor",An(t.success.light,.6)),Vr(t.Alert,"warningColor",An(t.warning.light,.6)),Vr(t.Alert,"errorFilledBg",n("palette-error-dark")),Vr(t.Alert,"infoFilledBg",n("palette-info-dark")),Vr(t.Alert,"successFilledBg",n("palette-success-dark")),Vr(t.Alert,"warningFilledBg",n("palette-warning-dark")),Vr(t.Alert,"errorFilledColor",Kr((()=>t.getContrastText(t.error.dark)))),Vr(t.Alert,"infoFilledColor",Kr((()=>t.getContrastText(t.info.dark)))),Vr(t.Alert,"successFilledColor",Kr((()=>t.getContrastText(t.success.dark)))),Vr(t.Alert,"warningFilledColor",Kr((()=>t.getContrastText(t.warning.dark)))),Vr(t.Alert,"errorStandardBg",Mn(t.error.light,.9)),Vr(t.Alert,"infoStandardBg",Mn(t.info.light,.9)),Vr(t.Alert,"successStandardBg",Mn(t.success.light,.9)),Vr(t.Alert,"warningStandardBg",Mn(t.warning.light,.9)),Vr(t.Alert,"errorIconColor",n("palette-error-main")),Vr(t.Alert,"infoIconColor",n("palette-info-main")),Vr(t.Alert,"successIconColor",n("palette-success-main")),Vr(t.Alert,"warningIconColor",n("palette-warning-main")),Vr(t.AppBar,"defaultBg",n("palette-grey-900")),Vr(t.AppBar,"darkBg",n("palette-background-paper")),Vr(t.AppBar,"darkColor",n("palette-text-primary")),Vr(t.Avatar,"defaultBg",n("palette-grey-600")),Vr(t.Button,"inheritContainedBg",n("palette-grey-800")),Vr(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),Vr(t.Chip,"defaultBorder",n("palette-grey-700")),Vr(t.Chip,"defaultAvatarColor",n("palette-grey-300")),Vr(t.Chip,"defaultIconColor",n("palette-grey-300")),Vr(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),Vr(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),Vr(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),Vr(t.LinearProgress,"primaryBg",Mn(t.primary.main,.5)),Vr(t.LinearProgress,"secondaryBg",Mn(t.secondary.main,.5)),Vr(t.LinearProgress,"errorBg",Mn(t.error.main,.5)),Vr(t.LinearProgress,"infoBg",Mn(t.info.main,.5)),Vr(t.LinearProgress,"successBg",Mn(t.success.main,.5)),Vr(t.LinearProgress,"warningBg",Mn(t.warning.main,.5)),Vr(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),Vr(t.Slider,"primaryTrack",Mn(t.primary.main,.5)),Vr(t.Slider,"secondaryTrack",Mn(t.secondary.main,.5)),Vr(t.Slider,"errorTrack",Mn(t.error.main,.5)),Vr(t.Slider,"infoTrack",Mn(t.info.main,.5)),Vr(t.Slider,"successTrack",Mn(t.success.main,.5)),Vr(t.Slider,"warningTrack",Mn(t.warning.main,.5));const e=Ln(t.background.default,.98);Vr(t.SnackbarContent,"bg",e),Vr(t.SnackbarContent,"color",Kr((()=>t.getContrastText(e)))),Vr(t.SpeedDialAction,"fabHoverBg",Ln(t.background.paper,.15)),Vr(t.StepConnector,"border",n("palette-grey-600")),Vr(t.StepContent,"border",n("palette-grey-600")),Vr(t.Switch,"defaultColor",n("palette-grey-300")),Vr(t.Switch,"defaultDisabledColor",n("palette-grey-600")),Vr(t.Switch,"primaryDisabledColor",Mn(t.primary.main,.55)),Vr(t.Switch,"secondaryDisabledColor",Mn(t.secondary.main,.55)),Vr(t.Switch,"errorDisabledColor",Mn(t.error.main,.55)),Vr(t.Switch,"infoDisabledColor",Mn(t.info.main,.55)),Vr(t.Switch,"successDisabledColor",Mn(t.success.main,.55)),Vr(t.Switch,"warningDisabledColor",Mn(t.warning.main,.55)),Vr(t.TableCell,"border",Mn(On(t.divider,1),.68)),Vr(t.Tooltip,"bg",On(t.grey[700],.92))}qr(t.background,"default"),qr(t.background,"paper"),qr(t.common,"background"),qr(t.common,"onBackground"),qr(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];"tonalOffset"!==e&&n&&"object"==typeof n&&(n.main&&Vr(t[e],"mainChannel",kn(Ur(n.main))),n.light&&Vr(t[e],"lightChannel",kn(Ur(n.light))),n.dark&&Vr(t[e],"darkChannel",kn(Ur(n.dark))),n.contrastText&&Vr(t[e],"contrastTextChannel",kn(Ur(n.contrastText))),"text"===e&&(qr(t[e],"primary"),qr(t[e],"secondary")),"action"===e&&(n.active&&qr(t[e],"active"),n.selected&&qr(t[e],"selected")))}))})),x=t.reduce(((e,t)=>v(e,t)),x);const C={prefix:a,disableCssColorScheme:o,shouldSkipGeneratingVar:i,getSelector:Hr(x)},{vars:E,generateThemeVars:P,generateStyleSheets:T}=function(e,t={}){const{getSelector:n=g,disableCssColorScheme:r,colorSchemeSelector:o}=t,{colorSchemes:a={},components:i,defaultColorScheme:l="light",...s}=e,{vars:u,css:c,varsWithDefaults:d}=Cr(s,t);let p=d;const f={},{[l]:m,...h}=a;if(Object.entries(h||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:a}=Cr(n,t);p=v(p,a),f[e]={css:o,vars:r}})),m){const{css:e,vars:n,varsWithDefaults:r}=Cr(m,t);p=v(p,r),f[l]={css:e,vars:n}}function g(t,n){let r=o;if("class"===o&&(r=".%s"),"data"===o&&(r="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(r=`[${o}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=a[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:p,generateThemeVars:()=>{let e={...u};return Object.entries(f).forEach((([,{vars:t}])=>{e=v(e,t)})),e},generateStyleSheets:()=>{const t=[],o=e.defaultColorScheme||"light";function i(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}i(n(void 0,{...c}),c);const{[o]:l,...s}=f;if(l){const{css:e}=l,t=a[o]?.palette?.mode,s=!r&&t?{colorScheme:t,...e}:{...e};i(n(o,{...s}),s)}return Object.entries(s).forEach((([e,{css:t}])=>{const o=a[e]?.palette?.mode,l=!r&&o?{colorScheme:o,...t}:{...t};i(n(e,{...l}),l)})),t}}}(x,C);return x.vars=E,Object.entries(x.colorSchemes[x.defaultColorScheme]).forEach((([e,t])=>{x[e]=t})),x.generateThemeVars=P,x.generateStyleSheets=T,x.generateSpacing=function(){return H(u.spacing,I(this))},x.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(l),x.spacing=x.generateSpacing(),x.shouldSkipGeneratingVar=i,x.unstable_sxConfig={...ye,...u?.unstable_sxConfig},x.unstable_sx=function(e){return be({sx:e,theme:this})},x.toRuntimeSource=_r,x}function Xr(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:wr({...!0===n?{}:n.palette,mode:t})})}function Yr(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:o=(n?void 0:{light:!0}),defaultColorScheme:a=n?.mode,...i}=e,l=a||"light",s=o?.[l],u={...o,...n?{[l]:{..."boolean"!=typeof s&&s,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return Ir(e,...t);let r=n;"palette"in e||u[l]&&(!0!==u[l]?r=u[l].palette:"dark"===l&&(r={mode:"dark"}));const o=Ir({...e,palette:r},...t);return o.defaultColorScheme=l,o.colorSchemes=u,"light"===o.palette.mode&&(o.colorSchemes.light={...!0!==u.light&&u.light,palette:o.palette},Xr(o,"dark",u.dark)),"dark"===o.palette.mode&&(o.colorSchemes.dark={...!0!==u.dark&&u.dark,palette:o.palette},Xr(o,"light",u.light)),o}return n||"light"in u||"light"!==l||(u.light=!0),Qr({...i,colorSchemes:u,defaultColorScheme:l,..."boolean"!=typeof r&&r},...t)}const Zr=Yr(),Jr="$$material",eo=function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e},to=e=>eo(e)&&"classes"!==e,no=mn({themeId:Jr,defaultTheme:Zr,rootShouldForwardProp:to}),ro=t.createContext(void 0);function oo(e){return function({props:e,name:n}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?m(o.defaultProps,r):o.styleOverrides||o.variants?r:m(o,r)}({props:e,name:n,theme:{components:t.useContext(ro)}})}(e)}const ao=function(n={}){const{createStyledComponent:r=vn,useThemeProps:o=bn,componentName:a="MuiContainer"}=n,l=r((({theme:e,ownerState:t})=>({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",...!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}}})),(({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce(((t,n)=>{const r=n,o=e.breakpoints.values[r];return 0!==o&&(t[e.breakpoints.up(r)]={maxWidth:`${o}${e.breakpoints.unit}`}),t}),{})),(({theme:e,ownerState:t})=>({..."xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},...t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}}))),s=t.forwardRef((function(t,n){const r=o(t),{className:s,component:u="div",disableGutters:p=!1,fixed:m=!1,maxWidth:h="lg",classes:g,...y}=r,v={...r,component:u,disableGutters:p,fixed:m,maxWidth:h},b=((e,t)=>{const{classes:n,fixed:r,disableGutters:o,maxWidth:a}=e;return d({root:["root",a&&`maxWidth${f(String(a))}`,r&&"fixed",o&&"disableGutters"]},(e=>c(t,e)),n)})(v,a);return(0,e.jsx)(l,{as:u,ownerState:v,className:i(b.root,s),ref:n,...y})}));return s}({createStyledComponent:no("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${wn(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),useThemeProps:e=>oo({props:e,name:"MuiContainer"})}),io=ao,lo=t.createContext(),so=()=>t.useContext(lo)??!1;function uo(...e){const n=t.useRef(void 0),r=t.useCallback((t=>{const n=e.map((e=>{if(null==e)return null;if("function"==typeof e){const n=e,r=n(t);return"function"==typeof r?r:()=>{n(null)}}return e.current=t,()=>{e.current=null}}));return()=>{n.forEach((e=>e?.()))}}),e);return t.useMemo((()=>e.every((e=>null==e))?null:e=>{n.current&&(n.current(),n.current=void 0),null!=e&&(n.current=r(e))}),e)}const co=function(e,t,n){return void 0===e||"string"==typeof e?t:{...t,ownerState:{...t.ownerState,...n}}},po=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},fo=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t},mo=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:a}=e;if(!t){const e=i(n?.className,a,o?.className,r?.className),t={...n?.style,...o?.style,...r?.style},l={...n,...o,...r};return e.length>0&&(l.className=e),Object.keys(t).length>0&&(l.style=t),{props:l,internalRef:void 0}}const l=po({...o,...r}),s=fo(r),u=fo(o),c=t(l),d=i(c?.className,n?.className,a,o?.className,r?.className),p={...c?.style,...n?.style,...o?.style,...r?.style},f={...c,...n,...u,...s};return d.length>0&&(f.className=d),Object.keys(p).length>0&&(f.style=p),{props:f,internalRef:c.ref}},ho=function(e,t,n){return"function"==typeof e?e(t,n):e},go=function(e){const{elementType:t,externalSlotProps:n,ownerState:r,skipResolvingSlotProps:o=!1,...a}=e,i=o?{}:ho(n,r),{props:l,internalRef:s}=mo({...a,externalSlotProps:i}),u=uo(s,i?.ref,e.additionalProps?.ref);return co(t,{...l,ref:u},r)};function yo(e){return e&&e.ownerDocument||document}const vo=yo,bo=t.createContext({});function wo(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=c(e,t,n)})),r}function So(e){return c("MuiList",e)}wo("MuiList",["root","padding","dense","subheader"]);const xo=no("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})({listStyle:"none",margin:0,padding:0,position:"relative",variants:[{props:({ownerState:e})=>!e.disablePadding,style:{paddingTop:8,paddingBottom:8}},{props:({ownerState:e})=>e.subheader,style:{paddingTop:0}}]}),ko=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiList"}),{children:a,className:l,component:s="ul",dense:u=!1,disablePadding:c=!1,subheader:p,...f}=o,m=t.useMemo((()=>({dense:u})),[u]),h={...o,component:s,dense:u,disablePadding:c},g=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e;return d({root:["root",!n&&"padding",r&&"dense",o&&"subheader"]},So,t)})(h);return(0,e.jsx)(bo.Provider,{value:m,children:(0,e.jsxs)(xo,{as:s,className:i(g.root,l),ref:r,ownerState:h,...f,children:[p,a]})})}));function Co(e=window){const t=e.document.documentElement.clientWidth;return e.innerWidth-t}const Eo=Co,Po=uo,To="undefined"!=typeof window?t.useLayoutEffect:t.useEffect,Oo=To;function Ro(e){return yo(e).defaultView||window}const Mo=Ro;function zo(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ao(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function No(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:n.startsWith(t.keys.join("")))}function Lo(e,t,n,r,o,a){let i=!1,l=o(e,t,!!t&&n);for(;l;){if(l===e.firstChild){if(i)return!1;i=!0}const t=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&No(l,a)&&!t)return l.focus(),!0;l=o(e,l,n)}return!1}const $o=t.forwardRef((function(n,r){const{actions:o,autoFocus:a=!1,autoFocusItem:i=!1,children:l,className:s,disabledItemsFocusable:u=!1,disableListWrap:c=!1,onKeyDown:d,variant:p="selectedMenu",...f}=n,m=t.useRef(null),h=t.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Oo((()=>{a&&m.current.focus()}),[a]),t.useImperativeHandle(o,(()=>({adjustStyleForScrollbar:(e,{direction:t})=>{const n=!m.current.style.width;if(e.clientHeight<m.current.clientHeight&&n){const n=`${Eo(Mo(e))}px`;m.current.style["rtl"===t?"paddingLeft":"paddingRight"]=n,m.current.style.width=`calc(100% + ${n})`}return m.current}})),[]);const g=Po(m,r);let y=-1;t.Children.forEach(l,((e,n)=>{t.isValidElement(e)?(e.props.disabled||("selectedMenu"===p&&e.props.selected||-1===y)&&(y=n),y===n&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(y+=1,y>=l.length&&(y=-1))):y===n&&(y+=1,y>=l.length&&(y=-1))}));const v=t.Children.map(l,((e,n)=>{if(n===y){const n={};return i&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===p&&(n.tabIndex=0),t.cloneElement(e,n)}return e}));return(0,e.jsx)(ko,{role:"menu",ref:g,className:s,onKeyDown:e=>{const t=m.current,n=e.key;if(e.ctrlKey||e.metaKey||e.altKey)return void(d&&d(e));const r=vo(t).activeElement;if("ArrowDown"===n)e.preventDefault(),Lo(t,r,c,u,zo);else if("ArrowUp"===n)e.preventDefault(),Lo(t,r,c,u,Ao);else if("Home"===n)e.preventDefault(),Lo(t,null,c,u,zo);else if("End"===n)e.preventDefault(),Lo(t,null,c,u,Ao);else if(1===n.length){const o=h.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);const l=r&&!o.repeating&&No(r,o);o.previousKeyMatched&&(l||Lo(t,r,!1,u,zo,o))?e.preventDefault():o.previousKeyMatched=!1}d&&d(e)},tabIndex:a?0:-1,...f,children:v})})),_o=function(e){return"string"==typeof e};function Io(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}const jo=Io,Fo={};function Do(e,n){const r=t.useRef(Fo);return r.current===Fo&&(r.current=e(n)),r}const Bo=[];class Wo{static create(){return new Wo}currentId=null;start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)};disposeEffect=()=>this.clear}function Ho(){const e=Do(Wo.create).current;var n;return n=e.disposeEffect,t.useEffect(n,Bo),e}function Vo(e){return parseInt(t.version,10)>=19?e?.props?.ref||null:e?.ref||null}function Uo(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}function qo(e,t){return qo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},qo(e,t)}function Ko(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,qo(e,t)}var Go=o(961);const Qo=t.createContext(null);var Xo="unmounted",Yo="exited",Zo="entering",Jo="entered",ea="exiting",ta=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=Yo,r.appearStatus=Zo):o=Jo:o=t.unmountOnExit||t.mountOnEnter?Xo:Yo,r.state={status:o},r.nextCallback=null,r}Ko(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Xo?{status:Yo}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Zo&&n!==Jo&&(t=Zo):n!==Zo&&n!==Jo||(t=ea)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Zo){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Go.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Yo&&this.setState({status:Xo})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Go.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),s=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Zo},(function(){t.props.onEntering(a,i),t.onTransitionEnd(s,(function(){t.safeSetState({status:Jo},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:Jo},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Go.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:ea},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Yo},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Yo},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Go.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===Xo)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,Uo(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(Qo.Provider,{value:null},"function"==typeof r?r(e,o):t.cloneElement(t.Children.only(r),o))},n}(t.Component);function na(){}ta.contextType=Qo,ta.propTypes={},ta.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:na,onEntering:na,onEntered:na,onExit:na,onExiting:na,onExited:na},ta.UNMOUNTED=Xo,ta.EXITED=Yo,ta.ENTERING=Zo,ta.ENTERED=Jo,ta.EXITING=ea;const ra=ta;function oa(){const e=Qt(Zr);return e[Jr]||e}const aa=e=>e.scrollTop;function ia(e,t){const{timeout:n,easing:r,style:o={}}=e;return{duration:o.transitionDuration??("number"==typeof n?n:n[t.mode]||0),easing:o.transitionTimingFunction??("object"==typeof r?r[t.mode]:r),delay:o.transitionDelay}}function la(e){return`scale(${e}, ${e**2})`}const sa={entering:{opacity:1,transform:la(1)},entered:{opacity:1,transform:"none"}},ua="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),ca=t.forwardRef((function(n,r){const{addEndListener:o,appear:a=!0,children:i,easing:l,in:s,onEnter:u,onEntered:c,onEntering:d,onExit:p,onExited:f,onExiting:m,style:h,timeout:g="auto",TransitionComponent:y=ra,...v}=n,b=Ho(),w=t.useRef(),S=oa(),x=t.useRef(null),k=Po(x,Vo(i),r),C=e=>t=>{if(e){const n=x.current;void 0===t?e(n):e(n,t)}},E=C(d),P=C(((e,t)=>{aa(e);const{duration:n,delay:r,easing:o}=ia({style:h,timeout:g,easing:l},{mode:"enter"});let a;"auto"===g?(a=S.transitions.getAutoHeightDuration(e.clientHeight),w.current=a):a=n,e.style.transition=[S.transitions.create("opacity",{duration:a,delay:r}),S.transitions.create("transform",{duration:ua?a:.666*a,delay:r,easing:o})].join(","),u&&u(e,t)})),T=C(c),O=C(m),R=C((e=>{const{duration:t,delay:n,easing:r}=ia({style:h,timeout:g,easing:l},{mode:"exit"});let o;"auto"===g?(o=S.transitions.getAutoHeightDuration(e.clientHeight),w.current=o):o=t,e.style.transition=[S.transitions.create("opacity",{duration:o,delay:n}),S.transitions.create("transform",{duration:ua?o:.666*o,delay:ua?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=la(.75),p&&p(e)})),M=C(f);return(0,e.jsx)(y,{appear:a,in:s,nodeRef:x,onEnter:P,onEntered:T,onEntering:E,onExit:R,onExited:M,onExiting:O,addEndListener:e=>{"auto"===g&&b.start(w.current||0,e),o&&o(x.current,e)},timeout:"auto"===g?null:g,...v,children:(e,{ownerState:n,...r})=>t.cloneElement(i,{style:{opacity:0,transform:la(.75),visibility:"exited"!==e||s?void 0:"hidden",...sa[e],...h,...i.props.style},ref:k,...r})})}));ca&&(ca.muiSupportAuto=!0);const da=ca,pa=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function fa(e){const t=[],n=[];return Array.from(e.querySelectorAll(pa)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function ma(){return!0}const ha=function(n){const{children:r,disableAutoFocus:o=!1,disableEnforceFocus:a=!1,disableRestoreFocus:i=!1,getTabbable:l=fa,isEnabled:s=ma,open:u}=n,c=t.useRef(!1),d=t.useRef(null),p=t.useRef(null),f=t.useRef(null),m=t.useRef(null),h=t.useRef(!1),g=t.useRef(null),y=uo(Vo(r),g),v=t.useRef(null);t.useEffect((()=>{u&&g.current&&(h.current=!o)}),[o,u]),t.useEffect((()=>{if(!u||!g.current)return;const e=yo(g.current);return g.current.contains(e.activeElement)||(g.current.hasAttribute("tabIndex")||g.current.setAttribute("tabIndex","-1"),h.current&&g.current.focus()),()=>{i||(f.current&&f.current.focus&&(c.current=!0,f.current.focus()),f.current=null)}}),[u]),t.useEffect((()=>{if(!u||!g.current)return;const e=yo(g.current),t=t=>{v.current=t,!a&&s()&&"Tab"===t.key&&e.activeElement===g.current&&t.shiftKey&&(c.current=!0,p.current&&p.current.focus())},n=()=>{const t=g.current;if(null===t)return;if(!e.hasFocus()||!s()||c.current)return void(c.current=!1);if(t.contains(e.activeElement))return;if(a&&e.activeElement!==d.current&&e.activeElement!==p.current)return;if(e.activeElement!==m.current)m.current=null;else if(null!==m.current)return;if(!h.current)return;let n=[];if(e.activeElement!==d.current&&e.activeElement!==p.current||(n=l(g.current)),n.length>0){const e=Boolean(v.current?.shiftKey&&"Tab"===v.current?.key),t=n[0],r=n[n.length-1];"string"!=typeof t&&"string"!=typeof r&&(e?r.focus():t.focus())}else t.focus()};e.addEventListener("focusin",n),e.addEventListener("keydown",t,!0);const r=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&n()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",n),e.removeEventListener("keydown",t,!0)}}),[o,a,i,s,u,l]);const b=e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0};return(0,e.jsxs)(t.Fragment,{children:[(0,e.jsx)("div",{tabIndex:u?0:-1,onFocus:b,ref:d,"data-testid":"sentinelStart"}),t.cloneElement(r,{ref:y,onFocus:e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0,m.current=e.target;const t=r.props.onFocus;t&&t(e)}}),(0,e.jsx)("div",{tabIndex:u?0:-1,onFocus:b,ref:p,"data-testid":"sentinelEnd"})]})};function ga(e,t){"function"==typeof e?e(t):e&&(e.current=t)}const ya=t.forwardRef((function(e,n){const{children:r,container:o,disablePortal:a=!1}=e,[i,l]=t.useState(null),s=uo(t.isValidElement(r)?Vo(r):null,n);if(To((()=>{a||l(function(e){return"function"==typeof e?e():e}(o)||document.body)}),[o,a]),To((()=>{if(i&&!a)return ga(n,i),()=>{ga(n,null)}}),[n,i,a]),a){if(t.isValidElement(r)){const e={ref:s};return t.cloneElement(r,e)}return r}return i?Go.createPortal(r,i):i})),va={theme:void 0},ba=function(e){let t,n;return function(r){let o=t;return void 0!==o&&r.theme===n||(va.theme=r.theme,o=sn(e(va)),t=o,n=r.theme),o}};function wa(e,t){const{className:n,elementType:r,ownerState:o,externalForwardedProps:a,internalForwardedProps:i,shouldForwardComponentProp:l=!1,...s}=t,{component:u,slots:c={[e]:void 0},slotProps:d={[e]:void 0},...p}=a,f=c[e]||r,m=ho(d[e],o),{props:{component:h,...g},internalRef:y}=mo({className:n,...s,externalForwardedProps:"root"===e?p:void 0,externalSlotProps:m}),v=uo(y,m?.ref,t.ref),b="root"===e?h||u:h;return[f,co(f,{..."root"===e&&!u&&!c[e]&&i,..."root"!==e&&!c[e]&&i,...g,...b&&!l&&{as:b},...b&&l&&{component:b},ref:v},o)]}const Sa={entering:{opacity:1},entered:{opacity:1}},xa=t.forwardRef((function(n,r){const o=oa(),a={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},{addEndListener:i,appear:l=!0,children:s,easing:u,in:c,onEnter:d,onEntered:p,onEntering:f,onExit:m,onExited:h,onExiting:g,style:y,timeout:v=a,TransitionComponent:b=ra,...w}=n,S=t.useRef(null),x=Po(S,Vo(s),r),k=e=>t=>{if(e){const n=S.current;void 0===t?e(n):e(n,t)}},C=k(f),E=k(((e,t)=>{aa(e);const n=ia({style:y,timeout:v,easing:u},{mode:"enter"});e.style.webkitTransition=o.transitions.create("opacity",n),e.style.transition=o.transitions.create("opacity",n),d&&d(e,t)})),P=k(p),T=k(g),O=k((e=>{const t=ia({style:y,timeout:v,easing:u},{mode:"exit"});e.style.webkitTransition=o.transitions.create("opacity",t),e.style.transition=o.transitions.create("opacity",t),m&&m(e)})),R=k(h);return(0,e.jsx)(b,{appear:l,in:c,nodeRef:S,onEnter:E,onEntered:P,onEntering:C,onExit:O,onExited:R,onExiting:T,addEndListener:e=>{i&&i(S.current,e)},timeout:v,...w,children:(e,{ownerState:n,...r})=>t.cloneElement(s,{style:{opacity:0,visibility:"exited"!==e||c?void 0:"hidden",...Sa[e],...y,...s.props.style},ref:x,...r})})})),ka=xa;function Ca(e){return c("MuiBackdrop",e)}wo("MuiBackdrop",["root","invisible"]);const Ea=no("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",variants:[{props:{invisible:!0},style:{backgroundColor:"transparent"}}]}),Pa=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiBackdrop"}),{children:o,className:a,component:l="div",invisible:s=!1,open:u,components:c={},componentsProps:p={},slotProps:f={},slots:m={},TransitionComponent:h,transitionDuration:g,...y}=r,v={...r,component:l,invisible:s},b=(e=>{const{classes:t,invisible:n}=e;return d({root:["root",n&&"invisible"]},Ca,t)})(v),w={slots:{transition:h,root:c.Root,...m},slotProps:{...p,...f}},[S,x]=wa("root",{elementType:Ea,externalForwardedProps:w,className:i(b.root,a),ownerState:v}),[k,C]=wa("transition",{elementType:ka,externalForwardedProps:w,ownerState:v});return(0,e.jsx)(k,{in:u,timeout:g,...y,...C,children:(0,e.jsx)(S,{"aria-hidden":!0,...x,classes:b,ref:n,children:o})})})),Ta=function(e){const n=t.useRef(e);return To((()=>{n.current=e})),t.useRef(((...e)=>(0,n.current)(...e))).current};function Oa(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}function Ra(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Ma(e){return parseInt(Ro(e).getComputedStyle(e).paddingRight,10)||0}function za(e,t,n,r,o){const a=[t,n,...r];[].forEach.call(e.children,(e=>{const t=!a.includes(e),n=!function(e){const t=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].includes(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&Ra(e,o)}))}function Aa(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const Na=()=>{},La=new class{constructor(){this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Ra(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);za(t,e.mount,e.modalRef,r,!0);const o=Aa(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=Aa(this.containers,(t=>t.modals.includes(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=yo(e);return t.body===e?Ro(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=Co(Ro(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${Ma(r)+e}px`;const t=yo(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${Ma(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=yo(r).body;else{const t=r.parentElement,n=Ro(r);e="HTML"===t?.nodeName&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=Aa(this.containers,(t=>t.modals.includes(e))),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&Ra(e.modalRef,t),za(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&Ra(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};function $a(e){return c("MuiModal",e)}wo("MuiModal",["root","hidden","backdrop"]);const _a=no("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})(ba((({theme:e})=>({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0,variants:[{props:({ownerState:e})=>!e.open&&e.exited,style:{visibility:"hidden"}}]})))),Ia=no(Pa,{name:"MuiModal",slot:"Backdrop"})({zIndex:-1}),ja=t.forwardRef((function(n,r){const o=oo({name:"MuiModal",props:n}),{BackdropComponent:a=Ia,BackdropProps:l,classes:s,className:u,closeAfterTransition:c=!1,children:p,container:f,component:m,components:h={},componentsProps:g={},disableAutoFocus:y=!1,disableEnforceFocus:v=!1,disableEscapeKeyDown:b=!1,disablePortal:w=!1,disableRestoreFocus:S=!1,disableScrollLock:x=!1,hideBackdrop:k=!1,keepMounted:C=!1,onClose:E,onTransitionEnter:P,onTransitionExited:T,open:O,slotProps:R={},slots:M={},theme:z,...A}=o,N={...o,closeAfterTransition:c,disableAutoFocus:y,disableEnforceFocus:v,disableEscapeKeyDown:b,disablePortal:w,disableRestoreFocus:S,disableScrollLock:x,hideBackdrop:k,keepMounted:C},{getRootProps:L,getBackdropProps:$,getTransitionProps:_,portalRef:I,isTopModal:j,exited:F,hasTransition:D}=function(e){const{container:n,disableEscapeKeyDown:r=!1,disableScrollLock:o=!1,closeAfterTransition:a=!1,onTransitionEnter:i,onTransitionExited:l,children:s,onClose:u,open:c,rootRef:d}=e,p=t.useRef({}),f=t.useRef(null),m=t.useRef(null),h=uo(m,d),[g,y]=t.useState(!c),v=function(e){return!!e&&e.props.hasOwnProperty("in")}(s);let b=!0;"false"!==e["aria-hidden"]&&!1!==e["aria-hidden"]||(b=!1);const w=()=>(p.current.modalRef=m.current,p.current.mount=f.current,p.current),S=()=>{La.mount(w(),{disableScrollLock:o}),m.current&&(m.current.scrollTop=0)},x=Ta((()=>{const e=function(e){return"function"==typeof e?e():e}(n)||yo(f.current).body;La.add(w(),e),m.current&&S()})),k=()=>La.isTopModal(w()),C=Ta((e=>{f.current=e,e&&(c&&k()?S():m.current&&Ra(m.current,b))})),E=t.useCallback((()=>{La.remove(w(),b)}),[b]);t.useEffect((()=>()=>{E()}),[E]),t.useEffect((()=>{c?x():v&&a||E()}),[c,E,v,a,x]);const P=e=>t=>{e.onKeyDown?.(t),"Escape"===t.key&&229!==t.which&&k()&&(r||(t.stopPropagation(),u&&u(t,"escapeKeyDown")))},T=e=>t=>{e.onClick?.(t),t.target===t.currentTarget&&u&&u(t,"backdropClick")};return{getRootProps:(t={})=>{const n=po(e);delete n.onTransitionEnter,delete n.onTransitionExited;const r={...n,...t};return{role:"presentation",...r,onKeyDown:P(r),ref:h}},getBackdropProps:(e={})=>{const t=e;return{"aria-hidden":!0,...t,onClick:T(t),open:c}},getTransitionProps:()=>({onEnter:Oa((()=>{y(!1),i&&i()}),s?.props.onEnter??Na),onExited:Oa((()=>{y(!0),l&&l(),a&&E()}),s?.props.onExited??Na)}),rootRef:h,portalRef:C,isTopModal:k,exited:g,hasTransition:v}}({...N,rootRef:r}),B={...N,exited:F},W=(e=>{const{open:t,exited:n,classes:r}=e;return d({root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]},$a,r)})(B),H={};if(void 0===p.props.tabIndex&&(H.tabIndex="-1"),D){const{onEnter:e,onExited:t}=_();H.onEnter=e,H.onExited=t}const V={slots:{root:h.Root,backdrop:h.Backdrop,...M},slotProps:{...g,...R}},[U,q]=wa("root",{ref:r,elementType:_a,externalForwardedProps:{...V,...A,component:m},getSlotProps:L,ownerState:B,className:i(u,W?.root,!B.open&&B.exited&&W?.hidden)}),[K,G]=wa("backdrop",{ref:l?.ref,elementType:a,externalForwardedProps:V,shouldForwardComponentProp:!0,additionalProps:l,getSlotProps:e=>$({...e,onClick:t=>{e?.onClick&&e.onClick(t)}}),className:i(l?.className,W?.backdrop),ownerState:B});return C||O||D&&!F?(0,e.jsx)(ya,{ref:I,container:f,disablePortal:w,children:(0,e.jsxs)(U,{...q,children:[!k&&a?(0,e.jsx)(K,{...G}):null,(0,e.jsx)(ha,{disableEnforceFocus:v,disableAutoFocus:y,disableRestoreFocus:S,isEnabled:j,open:O,children:t.cloneElement(p,H)})]})}):null})),Fa=ja;function Da(e){return c("MuiPaper",e)}wo("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const Ba=no("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})(ba((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow"),variants:[{props:({ownerState:e})=>!e.square,style:{borderRadius:e.shape.borderRadius}},{props:{variant:"outlined"},style:{border:`1px solid ${(e.vars||e).palette.divider}`}},{props:{variant:"elevation"},style:{boxShadow:"var(--Paper-shadow)",backgroundImage:"var(--Paper-overlay)"}}]})))),Wa=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiPaper"}),o=oa(),{className:a,component:l="div",elevation:s=1,square:u=!1,variant:c="elevation",...p}=r,f={...r,component:l,elevation:s,square:u,variant:c},m=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return d({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Da,o)})(f);return(0,e.jsx)(Ba,{as:l,ownerState:f,className:i(m.root,a),ref:n,...p,style:{..."elevation"===c&&{"--Paper-shadow":(o.vars||o).shadows[s],...o.vars&&{"--Paper-overlay":o.vars.overlays?.[s]},...!o.vars&&"dark"===o.palette.mode&&{"--Paper-overlay":`linear-gradient(${Tn("#fff",jr(s))}, ${Tn("#fff",jr(s))})`}},...p.style}})}));function Ha(e){return c("MuiPopover",e)}function Va(e,t){if(!e)return t;function n(e,t){const n={};return Object.keys(t).forEach((r=>{(function(e,t){const n=e.charCodeAt(2);return"o"===e[0]&&"n"===e[1]&&n>=65&&n<=90&&"function"==typeof t})(r,t[r])&&"function"==typeof e[r]&&(n[r]=(...n)=>{e[r](...n),t[r](...n)})})),n}if("function"==typeof e||"function"==typeof t)return r=>{const o="function"==typeof t?t(r):t,a="function"==typeof e?e({...r,...o}):e,l=i(r?.className,o?.className,a?.className),s=n(a,o);return{...o,...a,...s,...!!l&&{className:l},...o?.style&&a?.style&&{style:{...o.style,...a.style}},...o?.sx&&a?.sx&&{sx:[...Array.isArray(o.sx)?o.sx:[o.sx],...Array.isArray(a.sx)?a.sx:[a.sx]]}}};const r=t,o=n(e,r),a=i(r?.className,e?.className);return{...t,...e,...o,...!!a&&{className:a},...r?.style&&e?.style&&{style:{...r.style,...e.style}},...r?.sx&&e?.sx&&{sx:[...Array.isArray(r.sx)?r.sx:[r.sx],...Array.isArray(e.sx)?e.sx:[e.sx]]}}}function Ua(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function qa(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Ka(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function Ga(e){return"function"==typeof e?e():e}wo("MuiPopover",["root","paper"]);const Qa=no(Fa,{name:"MuiPopover",slot:"Root"})({}),Xa=no(Wa,{name:"MuiPopover",slot:"Paper"})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),Ya=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiPopover"}),{action:a,anchorEl:l,anchorOrigin:s={vertical:"top",horizontal:"left"},anchorPosition:u,anchorReference:c="anchorEl",children:p,className:f,container:m,elevation:h=8,marginThreshold:g=16,open:y,PaperProps:v={},slots:b={},slotProps:w={},transformOrigin:S={vertical:"top",horizontal:"left"},TransitionComponent:x,transitionDuration:k="auto",TransitionProps:C={},disableScrollLock:E=!1,...P}=o,T=t.useRef(),O={...o,anchorOrigin:s,anchorReference:c,elevation:h,marginThreshold:g,transformOrigin:S,TransitionComponent:x,transitionDuration:k,TransitionProps:C},R=(e=>{const{classes:t}=e;return d({root:["root"],paper:["paper"]},Ha,t)})(O),M=t.useCallback((()=>{if("anchorPosition"===c)return u;const e=Ga(l),t=(e&&1===e.nodeType?e:vo(T.current).body).getBoundingClientRect();return{top:t.top+Ua(t,s.vertical),left:t.left+qa(t,s.horizontal)}}),[l,s.horizontal,s.vertical,u,c]),z=t.useCallback((e=>({vertical:Ua(e,S.vertical),horizontal:qa(e,S.horizontal)})),[S.horizontal,S.vertical]),A=t.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=z(t);if("none"===c)return{top:null,left:null,transformOrigin:Ka(n)};const r=M();let o=r.top-n.vertical,a=r.left-n.horizontal;const i=o+t.height,s=a+t.width,u=Mo(Ga(l)),d=u.innerHeight-g,p=u.innerWidth-g;if(null!==g&&o<g){const e=o-g;o-=e,n.vertical+=e}else if(null!==g&&i>d){const e=i-d;o-=e,n.vertical+=e}if(null!==g&&a<g){const e=a-g;a-=e,n.horizontal+=e}else if(s>p){const e=s-p;a-=e,n.horizontal+=e}return{top:`${Math.round(o)}px`,left:`${Math.round(a)}px`,transformOrigin:Ka(n)}}),[l,c,M,z,g]),[N,L]=t.useState(y),$=t.useCallback((()=>{const e=T.current;if(!e)return;const t=A(e);null!==t.top&&e.style.setProperty("top",t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin,L(!0)}),[A]);t.useEffect((()=>(E&&window.addEventListener("scroll",$),()=>window.removeEventListener("scroll",$))),[l,E,$]),t.useEffect((()=>{y&&$()})),t.useImperativeHandle(a,(()=>y?{updatePosition:()=>{$()}}:null),[y,$]),t.useEffect((()=>{if(!y)return;const e=jo((()=>{$()})),t=Mo(Ga(l));return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[l,y,$]);let _=k;const I={slots:{transition:x,...b},slotProps:{transition:C,paper:v,...w}},[j,F]=wa("transition",{elementType:da,externalForwardedProps:I,ownerState:O,getSlotProps:e=>({...e,onEntering:(t,n)=>{e.onEntering?.(t,n),$()},onExited:t=>{e.onExited?.(t),L(!1)}}),additionalProps:{appear:!0,in:y}});"auto"!==k||j.muiSupportAuto||(_=void 0);const D=m||(l?vo(Ga(l)).body:void 0),[B,{slots:W,slotProps:H,...V}]=wa("root",{ref:r,elementType:Qa,externalForwardedProps:{...I,...P},shouldForwardComponentProp:!0,additionalProps:{slots:{backdrop:b.backdrop},slotProps:{backdrop:Va("function"==typeof w.backdrop?w.backdrop(O):w.backdrop,{invisible:!0})},container:D,open:y},ownerState:O,className:i(R.root,f)}),[U,q]=wa("paper",{ref:T,className:R.paper,elementType:Xa,externalForwardedProps:I,shouldForwardComponentProp:!0,additionalProps:{elevation:h,style:N?void 0:{opacity:0}},ownerState:O});return(0,e.jsx)(B,{...V,...!_o(B)&&{slots:W,slotProps:H,disableScrollLock:E},children:(0,e.jsx)(j,{...F,timeout:_,children:(0,e.jsx)(U,{...q,children:p})})})})),Za=Ya;function Ja(e){return c("MuiMenu",e)}wo("MuiMenu",["root","paper","list"]);const ei={vertical:"top",horizontal:"right"},ti={vertical:"top",horizontal:"left"},ni=no(Za,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiMenu",slot:"Root"})({}),ri=no(Xa,{name:"MuiMenu",slot:"Paper"})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),oi=no($o,{name:"MuiMenu",slot:"List"})({outline:0}),ai=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiMenu"}),{autoFocus:a=!0,children:l,className:s,disableAutoFocusItem:u=!1,MenuListProps:c={},onClose:p,open:f,PaperProps:m={},PopoverClasses:h,transitionDuration:g="auto",TransitionProps:{onEntering:y,...v}={},variant:b="selectedMenu",slots:w={},slotProps:S={},...x}=o,k=so(),C={...o,autoFocus:a,disableAutoFocusItem:u,MenuListProps:c,onEntering:y,PaperProps:m,transitionDuration:g,TransitionProps:v,variant:b},E=(e=>{const{classes:t}=e;return d({root:["root"],paper:["paper"],list:["list"]},Ja,t)})(C),P=a&&!u&&f,T=t.useRef(null);let O=-1;t.Children.map(l,((e,n)=>{t.isValidElement(e)&&(e.props.disabled||("selectedMenu"===b&&e.props.selected||-1===O)&&(O=n))}));const R={slots:w,slotProps:{list:c,transition:v,paper:m,...S}},M=go({elementType:w.root,externalSlotProps:S.root,ownerState:C,className:[E.root,s]}),[z,A]=wa("paper",{className:E.paper,elementType:ri,externalForwardedProps:R,shouldForwardComponentProp:!0,ownerState:C}),[N,L]=wa("list",{className:i(E.list,c.className),elementType:oi,shouldForwardComponentProp:!0,externalForwardedProps:R,getSlotProps:e=>({...e,onKeyDown:t=>{(e=>{"Tab"===e.key&&(e.preventDefault(),p&&p(e,"tabKeyDown"))})(t),e.onKeyDown?.(t)}}),ownerState:C}),$="function"==typeof R.slotProps.transition?R.slotProps.transition(C):R.slotProps.transition;return(0,e.jsx)(ni,{onClose:p,anchorOrigin:{vertical:"bottom",horizontal:k?"right":"left"},transformOrigin:k?ei:ti,slots:{root:w.root,paper:z,backdrop:w.backdrop,...w.transition&&{transition:w.transition}},slotProps:{root:M,paper:A,backdrop:"function"==typeof S.backdrop?S.backdrop(C):S.backdrop,transition:{...$,onEntering:(...e)=>{((e,t)=>{T.current&&T.current.adjustStyleForScrollbar(e,{direction:k?"rtl":"ltr"}),y&&y(e,t)})(...e),$?.onEntering?.(...e)}}},open:f,ref:r,transitionDuration:g,ownerState:C,...x,classes:h,children:(0,e.jsx)(N,{actions:T,autoFocus:a&&(-1===O||u),autoFocusItem:P,variant:b,...L,children:l})})}));function ii(e){try{return e.matches(":focus-visible")}catch(e){}return!1}function li(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function si(e){return e instanceof li(e).Element||e instanceof Element}function ui(e){return e instanceof li(e).HTMLElement||e instanceof HTMLElement}function ci(e){return"undefined"!=typeof ShadowRoot&&(e instanceof li(e).ShadowRoot||e instanceof ShadowRoot)}var di=Math.max,pi=Math.min,fi=Math.round;function mi(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function hi(){return!/^((?!chrome|android).)*safari/i.test(mi())}function gi(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,a=1;t&&ui(e)&&(o=e.offsetWidth>0&&fi(r.width)/e.offsetWidth||1,a=e.offsetHeight>0&&fi(r.height)/e.offsetHeight||1);var i=(si(e)?li(e):window).visualViewport,l=!hi()&&n,s=(r.left+(l&&i?i.offsetLeft:0))/o,u=(r.top+(l&&i?i.offsetTop:0))/a,c=r.width/o,d=r.height/a;return{width:c,height:d,top:u,right:s+c,bottom:u+d,left:s,x:s,y:u}}function yi(e){var t=li(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function vi(e){return e?(e.nodeName||"").toLowerCase():null}function bi(e){return((si(e)?e.ownerDocument:e.document)||window.document).documentElement}function wi(e){return gi(bi(e)).left+yi(e).scrollLeft}function Si(e){return li(e).getComputedStyle(e)}function xi(e){var t=Si(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function ki(e,t,n){void 0===n&&(n=!1);var r=ui(t),o=ui(t)&&function(e){var t=e.getBoundingClientRect(),n=fi(t.width)/e.offsetWidth||1,r=fi(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),a=bi(t),i=gi(e,o,n),l={scrollLeft:0,scrollTop:0},s={x:0,y:0};return(r||!r&&!n)&&(("body"!==vi(t)||xi(a))&&(l=function(e){return e!==li(e)&&ui(e)?{scrollLeft:(t=e).scrollLeft,scrollTop:t.scrollTop}:yi(e);var t}(t)),ui(t)?((s=gi(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):a&&(s.x=wi(a))),{x:i.left+l.scrollLeft-s.x,y:i.top+l.scrollTop-s.y,width:i.width,height:i.height}}function Ci(e){var t=gi(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Ei(e){return"html"===vi(e)?e:e.assignedSlot||e.parentNode||(ci(e)?e.host:null)||bi(e)}function Pi(e){return["html","body","#document"].indexOf(vi(e))>=0?e.ownerDocument.body:ui(e)&&xi(e)?e:Pi(Ei(e))}function Ti(e,t){var n;void 0===t&&(t=[]);var r=Pi(e),o=r===(null==(n=e.ownerDocument)?void 0:n.body),a=li(r),i=o?[a].concat(a.visualViewport||[],xi(r)?r:[]):r,l=t.concat(i);return o?l:l.concat(Ti(Ei(i)))}function Oi(e){return["table","td","th"].indexOf(vi(e))>=0}function Ri(e){return ui(e)&&"fixed"!==Si(e).position?e.offsetParent:null}function Mi(e){for(var t=li(e),n=Ri(e);n&&Oi(n)&&"static"===Si(n).position;)n=Ri(n);return n&&("html"===vi(n)||"body"===vi(n)&&"static"===Si(n).position)?t:n||function(e){var t=/firefox/i.test(mi());if(/Trident/i.test(mi())&&ui(e)&&"fixed"===Si(e).position)return null;var n=Ei(e);for(ci(n)&&(n=n.host);ui(n)&&["html","body"].indexOf(vi(n))<0;){var r=Si(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}var zi="top",Ai="bottom",Ni="right",Li="left",$i="auto",_i=[zi,Ai,Ni,Li],Ii="start",ji="end",Fi="viewport",Di="popper",Bi=_i.reduce((function(e,t){return e.concat([t+"-"+Ii,t+"-"+ji])}),[]),Wi=[].concat(_i,[$i]).reduce((function(e,t){return e.concat([t,t+"-"+Ii,t+"-"+ji])}),[]),Hi=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Vi(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var Ui={placement:"bottom",modifiers:[],strategy:"absolute"};function qi(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Ki(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,a=void 0===o?Ui:o;return function(e,t,n){void 0===n&&(n=a);var o,i,l={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ui,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},s=[],u=!1,c={state:l,setOptions:function(n){var o="function"==typeof n?n(l.options):n;d(),l.options=Object.assign({},a,l.options,o),l.scrollParents={reference:si(e)?Ti(e):e.contextElement?Ti(e.contextElement):[],popper:Ti(t)};var i,u,p=function(e){var t=Vi(e);return Hi.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((i=[].concat(r,l.options.modifiers),u=i.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return l.orderedModifiers=p.filter((function(e){return e.enabled})),l.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var a=o({state:l,name:t,instance:c,options:r});s.push(a||function(){})}})),c.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,n=e.popper;if(qi(t,n)){l.rects={reference:ki(t,Mi(n),"fixed"===l.options.strategy),popper:Ci(n)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(e){return l.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<l.orderedModifiers.length;r++)if(!0!==l.reset){var o=l.orderedModifiers[r],a=o.fn,i=o.options,s=void 0===i?{}:i,d=o.name;"function"==typeof a&&(l=a({state:l,options:s,name:d,instance:c})||l)}else l.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){c.forceUpdate(),e(l)}))},function(){return i||(i=new Promise((function(e){Promise.resolve().then((function(){i=void 0,e(o())}))}))),i}),destroy:function(){d(),u=!0}};if(!qi(e,t))return c;function d(){s.forEach((function(e){return e()})),s=[]}return c.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),c}}var Gi={passive:!0};function Qi(e){return e.split("-")[0]}function Xi(e){return e.split("-")[1]}function Yi(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Zi(e){var t,n=e.reference,r=e.element,o=e.placement,a=o?Qi(o):null,i=o?Xi(o):null,l=n.x+n.width/2-r.width/2,s=n.y+n.height/2-r.height/2;switch(a){case zi:t={x:l,y:n.y-r.height};break;case Ai:t={x:l,y:n.y+n.height};break;case Ni:t={x:n.x+n.width,y:s};break;case Li:t={x:n.x-r.width,y:s};break;default:t={x:n.x,y:n.y}}var u=a?Yi(a):null;if(null!=u){var c="y"===u?"height":"width";switch(i){case Ii:t[u]=t[u]-(n[c]/2-r[c]/2);break;case ji:t[u]=t[u]+(n[c]/2-r[c]/2)}}return t}var Ji={top:"auto",right:"auto",bottom:"auto",left:"auto"};function el(e){var t,n=e.popper,r=e.popperRect,o=e.placement,a=e.variation,i=e.offsets,l=e.position,s=e.gpuAcceleration,u=e.adaptive,c=e.roundOffsets,d=e.isFixed,p=i.x,f=void 0===p?0:p,m=i.y,h=void 0===m?0:m,g="function"==typeof c?c({x:f,y:h}):{x:f,y:h};f=g.x,h=g.y;var y=i.hasOwnProperty("x"),v=i.hasOwnProperty("y"),b=Li,w=zi,S=window;if(u){var x=Mi(n),k="clientHeight",C="clientWidth";x===li(n)&&"static"!==Si(x=bi(n)).position&&"absolute"===l&&(k="scrollHeight",C="scrollWidth"),(o===zi||(o===Li||o===Ni)&&a===ji)&&(w=Ai,h-=(d&&x===S&&S.visualViewport?S.visualViewport.height:x[k])-r.height,h*=s?1:-1),o!==Li&&(o!==zi&&o!==Ai||a!==ji)||(b=Ni,f-=(d&&x===S&&S.visualViewport?S.visualViewport.width:x[C])-r.width,f*=s?1:-1)}var E,P=Object.assign({position:l},u&&Ji),T=!0===c?function(e,t){var n=e.x,r=e.y,o=t.devicePixelRatio||1;return{x:fi(n*o)/o||0,y:fi(r*o)/o||0}}({x:f,y:h},li(n)):{x:f,y:h};return f=T.x,h=T.y,s?Object.assign({},P,((E={})[w]=v?"0":"",E[b]=y?"0":"",E.transform=(S.devicePixelRatio||1)<=1?"translate("+f+"px, "+h+"px)":"translate3d("+f+"px, "+h+"px, 0)",E)):Object.assign({},P,((t={})[w]=v?h+"px":"",t[b]=y?f+"px":"",t.transform="",t))}var tl={left:"right",right:"left",bottom:"top",top:"bottom"};function nl(e){return e.replace(/left|right|bottom|top/g,(function(e){return tl[e]}))}var rl={start:"end",end:"start"};function ol(e){return e.replace(/start|end/g,(function(e){return rl[e]}))}function al(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&ci(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function il(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ll(e,t,n){return t===Fi?il(function(e,t){var n=li(e),r=bi(e),o=n.visualViewport,a=r.clientWidth,i=r.clientHeight,l=0,s=0;if(o){a=o.width,i=o.height;var u=hi();(u||!u&&"fixed"===t)&&(l=o.offsetLeft,s=o.offsetTop)}return{width:a,height:i,x:l+wi(e),y:s}}(e,n)):si(t)?function(e,t){var n=gi(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):il(function(e){var t,n=bi(e),r=yi(e),o=null==(t=e.ownerDocument)?void 0:t.body,a=di(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),i=di(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),l=-r.scrollLeft+wi(e),s=-r.scrollTop;return"rtl"===Si(o||n).direction&&(l+=di(n.clientWidth,o?o.clientWidth:0)-a),{width:a,height:i,x:l,y:s}}(bi(e)))}function sl(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function ul(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function cl(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=void 0===r?e.placement:r,a=n.strategy,i=void 0===a?e.strategy:a,l=n.boundary,s=void 0===l?"clippingParents":l,u=n.rootBoundary,c=void 0===u?Fi:u,d=n.elementContext,p=void 0===d?Di:d,f=n.altBoundary,m=void 0!==f&&f,h=n.padding,g=void 0===h?0:h,y=sl("number"!=typeof g?g:ul(g,_i)),v=p===Di?"reference":Di,b=e.rects.popper,w=e.elements[m?v:p],S=function(e,t,n,r){var o="clippingParents"===t?function(e){var t=Ti(Ei(e)),n=["absolute","fixed"].indexOf(Si(e).position)>=0&&ui(e)?Mi(e):e;return si(n)?t.filter((function(e){return si(e)&&al(e,n)&&"body"!==vi(e)})):[]}(e):[].concat(t),a=[].concat(o,[n]),i=a[0],l=a.reduce((function(t,n){var o=ll(e,n,r);return t.top=di(o.top,t.top),t.right=pi(o.right,t.right),t.bottom=pi(o.bottom,t.bottom),t.left=di(o.left,t.left),t}),ll(e,i,r));return l.width=l.right-l.left,l.height=l.bottom-l.top,l.x=l.left,l.y=l.top,l}(si(w)?w:w.contextElement||bi(e.elements.popper),s,c,i),x=gi(e.elements.reference),k=Zi({reference:x,element:b,strategy:"absolute",placement:o}),C=il(Object.assign({},b,k)),E=p===Di?C:x,P={top:S.top-E.top+y.top,bottom:E.bottom-S.bottom+y.bottom,left:S.left-E.left+y.left,right:E.right-S.right+y.right},T=e.modifiersData.offset;if(p===Di&&T){var O=T[o];Object.keys(P).forEach((function(e){var t=[Ni,Ai].indexOf(e)>=0?1:-1,n=[zi,Ai].indexOf(e)>=0?"y":"x";P[e]+=O[n]*t}))}return P}const dl={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var o=n.mainAxis,a=void 0===o||o,i=n.altAxis,l=void 0===i||i,s=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,p=n.altBoundary,f=n.flipVariations,m=void 0===f||f,h=n.allowedAutoPlacements,g=t.options.placement,y=Qi(g),v=s||(y!==g&&m?function(e){if(Qi(e)===$i)return[];var t=nl(e);return[ol(e),t,ol(t)]}(g):[nl(g)]),b=[g].concat(v).reduce((function(e,n){return e.concat(Qi(n)===$i?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,i=n.padding,l=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?Wi:s,c=Xi(r),d=c?l?Bi:Bi.filter((function(e){return Xi(e)===c})):_i,p=d.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=d);var f=p.reduce((function(t,n){return t[n]=cl(e,{placement:n,boundary:o,rootBoundary:a,padding:i})[Qi(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:c,rootBoundary:d,padding:u,flipVariations:m,allowedAutoPlacements:h}):n)}),[]),w=t.rects.reference,S=t.rects.popper,x=new Map,k=!0,C=b[0],E=0;E<b.length;E++){var P=b[E],T=Qi(P),O=Xi(P)===Ii,R=[zi,Ai].indexOf(T)>=0,M=R?"width":"height",z=cl(t,{placement:P,boundary:c,rootBoundary:d,altBoundary:p,padding:u}),A=R?O?Ni:Li:O?Ai:zi;w[M]>S[M]&&(A=nl(A));var N=nl(A),L=[];if(a&&L.push(z[T]<=0),l&&L.push(z[A]<=0,z[N]<=0),L.every((function(e){return e}))){C=P,k=!1;break}x.set(P,L)}if(k)for(var $=function(e){var t=b.find((function(t){var n=x.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},_=m?3:1;_>0&&"break"!==$(_);_--);t.placement!==C&&(t.modifiersData[r]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function pl(e,t,n){return di(e,pi(t,n))}const fl={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.mainAxis,a=void 0===o||o,i=n.altAxis,l=void 0!==i&&i,s=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,p=n.tether,f=void 0===p||p,m=n.tetherOffset,h=void 0===m?0:m,g=cl(t,{boundary:s,rootBoundary:u,padding:d,altBoundary:c}),y=Qi(t.placement),v=Xi(t.placement),b=!v,w=Yi(y),S="x"===w?"y":"x",x=t.modifiersData.popperOffsets,k=t.rects.reference,C=t.rects.popper,E="function"==typeof h?h(Object.assign({},t.rects,{placement:t.placement})):h,P="number"==typeof E?{mainAxis:E,altAxis:E}:Object.assign({mainAxis:0,altAxis:0},E),T=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,O={x:0,y:0};if(x){if(a){var R,M="y"===w?zi:Li,z="y"===w?Ai:Ni,A="y"===w?"height":"width",N=x[w],L=N+g[M],$=N-g[z],_=f?-C[A]/2:0,I=v===Ii?k[A]:C[A],j=v===Ii?-C[A]:-k[A],F=t.elements.arrow,D=f&&F?Ci(F):{width:0,height:0},B=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},W=B[M],H=B[z],V=pl(0,k[A],D[A]),U=b?k[A]/2-_-V-W-P.mainAxis:I-V-W-P.mainAxis,q=b?-k[A]/2+_+V+H+P.mainAxis:j+V+H+P.mainAxis,K=t.elements.arrow&&Mi(t.elements.arrow),G=K?"y"===w?K.clientTop||0:K.clientLeft||0:0,Q=null!=(R=null==T?void 0:T[w])?R:0,X=N+q-Q,Y=pl(f?pi(L,N+U-Q-G):L,N,f?di($,X):$);x[w]=Y,O[w]=Y-N}if(l){var Z,J="x"===w?zi:Li,ee="x"===w?Ai:Ni,te=x[S],ne="y"===S?"height":"width",re=te+g[J],oe=te-g[ee],ae=-1!==[zi,Li].indexOf(y),ie=null!=(Z=null==T?void 0:T[S])?Z:0,le=ae?re:te-k[ne]-C[ne]-ie+P.altAxis,se=ae?te+k[ne]+C[ne]-ie-P.altAxis:oe,ue=f&&ae?function(e,t,n){var r=pl(e,t,n);return r>n?n:r}(le,te,se):pl(f?le:re,te,f?se:oe);x[S]=ue,O[S]=ue-te}t.modifiersData[r]=O}},requiresIfExists:["offset"]},ml={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,o=e.options,a=n.elements.arrow,i=n.modifiersData.popperOffsets,l=Qi(n.placement),s=Yi(l),u=[Li,Ni].indexOf(l)>=0?"height":"width";if(a&&i){var c=function(e,t){return sl("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:ul(e,_i))}(o.padding,n),d=Ci(a),p="y"===s?zi:Li,f="y"===s?Ai:Ni,m=n.rects.reference[u]+n.rects.reference[s]-i[s]-n.rects.popper[u],h=i[s]-n.rects.reference[s],g=Mi(a),y=g?"y"===s?g.clientHeight||0:g.clientWidth||0:0,v=m/2-h/2,b=c[p],w=y-d[u]-c[f],S=y/2-d[u]/2+v,x=pl(b,S,w),k=s;n.modifiersData[r]=((t={})[k]=x,t.centerOffset=x-S,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&al(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function hl(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function gl(e){return[zi,Ni,Ai,Li].some((function(t){return e[t]>=0}))}var yl=Ki({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,a=void 0===o||o,i=r.resize,l=void 0===i||i,s=li(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&u.forEach((function(e){e.addEventListener("scroll",n.update,Gi)})),l&&s.addEventListener("resize",n.update,Gi),function(){a&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Gi)})),l&&s.removeEventListener("resize",n.update,Gi)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Zi({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,a=n.adaptive,i=void 0===a||a,l=n.roundOffsets,s=void 0===l||l,u={placement:Qi(t.placement),variation:Xi(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,el(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,el(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:s})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];ui(o)&&vi(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});ui(r)&&vi(r)&&(Object.assign(r.style,a),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,a=void 0===o?[0,0]:o,i=Wi.reduce((function(e,n){return e[n]=function(e,t,n){var r=Qi(e),o=[Li,zi].indexOf(r)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,i=a[0],l=a[1];return i=i||0,l=(l||0)*o,[Li,Ni].indexOf(r)>=0?{x:l,y:i}:{x:i,y:l}}(n,t.rects,a),e}),{}),l=i[t.placement],s=l.x,u=l.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[r]=i}},dl,fl,ml,{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,a=t.modifiersData.preventOverflow,i=cl(t,{elementContext:"reference"}),l=cl(t,{altBoundary:!0}),s=hl(i,r),u=hl(l,o,a),c=gl(s),d=gl(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":d})}}]});function vl(e){return c("MuiPopper",e)}function bl(e){return"function"==typeof e?e():e}wo("MuiPopper",["root"]);const wl={},Sl=t.forwardRef((function(n,r){const{anchorEl:o,children:a,direction:i,disablePortal:l,modifiers:s,open:u,placement:c,popperOptions:p,popperRef:f,slotProps:m={},slots:h={},TransitionProps:g,ownerState:y,...v}=n,b=t.useRef(null),w=uo(b,r),S=t.useRef(null),x=uo(S,f),k=t.useRef(x);To((()=>{k.current=x}),[x]),t.useImperativeHandle(f,(()=>S.current),[]);const C=function(e,t){if("ltr"===t)return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(c,i),[E,P]=t.useState(C),[T,O]=t.useState(bl(o));t.useEffect((()=>{S.current&&S.current.forceUpdate()})),t.useEffect((()=>{o&&O(bl(o))}),[o]),To((()=>{if(!T||!u)return;let e=[{name:"preventOverflow",options:{altBoundary:l}},{name:"flip",options:{altBoundary:l}},{name:"onUpdate",enabled:!0,phase:"afterWrite",fn:({state:e})=>{P(e.placement)}}];null!=s&&(e=e.concat(s)),p&&null!=p.modifiers&&(e=e.concat(p.modifiers));const t=yl(T,b.current,{placement:C,...p,modifiers:e});return k.current(t),()=>{t.destroy(),k.current(null)}}),[T,l,s,u,p,C]);const R={placement:E};null!==g&&(R.TransitionProps=g);const M=(e=>{const{classes:t}=e;return d({root:["root"]},vl,t)})(n),z=h.root??"div",A=go({elementType:z,externalSlotProps:m.root,externalForwardedProps:v,additionalProps:{role:"tooltip",ref:w},ownerState:n,className:M.root});return(0,e.jsx)(z,{...A,children:"function"==typeof a?a(R):a})})),xl=no(t.forwardRef((function(n,r){const{anchorEl:o,children:a,container:i,direction:l="ltr",disablePortal:s=!1,keepMounted:u=!1,modifiers:c,open:d,placement:p="bottom",popperOptions:f=wl,popperRef:m,style:h,transition:g=!1,slotProps:y={},slots:v={},...b}=n,[w,S]=t.useState(!0);if(!u&&!d&&(!g||w))return null;let x;if(i)x=i;else if(o){const e=bl(o);x=e&&void 0!==e.nodeType?yo(e).body:yo(null).body}const k=d||!u||g&&!w?void 0:"none",C=g?{in:d,onEnter:()=>{S(!1)},onExited:()=>{S(!0)}}:void 0;return(0,e.jsx)(ya,{disablePortal:s,container:x,children:(0,e.jsx)(Sl,{anchorEl:o,direction:l,disablePortal:s,modifiers:c,ref:r,open:g?!w:d,placement:p,popperOptions:f,popperRef:m,slotProps:y,slots:v,...b,style:{position:"fixed",top:0,left:0,display:k,...h},TransitionProps:C,children:a})})})),{name:"MuiPopper",slot:"Root"})({}),kl=t.forwardRef((function(t,n){const r=so(),o=oo({props:t,name:"MuiPopper"}),{anchorEl:a,component:i,components:l,componentsProps:s,container:u,disablePortal:c,keepMounted:d,modifiers:p,open:f,placement:m,popperOptions:h,popperRef:g,transition:y,slots:v,slotProps:b,...w}=o,S=v?.root??l?.Root,x={anchorEl:a,container:u,disablePortal:c,keepMounted:d,modifiers:p,open:f,placement:m,popperOptions:h,popperRef:g,transition:y,...w};return(0,e.jsx)(xl,{as:i,direction:r?"rtl":"ltr",slots:{root:S},slotProps:b??s,...x,ref:n})})),Cl=Ta;let El=0;const Pl={...n}.useId;function Tl(e){if(void 0!==Pl){const t=Pl();return e??t}return function(e){const[n,r]=t.useState(e),o=e||n;return t.useEffect((()=>{null==n&&(El+=1,r(`mui-${El}`))}),[n]),o}(e)}const Ol=Tl,Rl=function(e){const{controlled:n,default:r,name:o,state:a="value"}=e,{current:i}=t.useRef(void 0!==n),[l,s]=t.useState(r);return[i?n:l,t.useCallback((e=>{i||s(e)}),[])]};function Ml(e){return c("MuiTooltip",e)}const zl=wo("MuiTooltip",["popper","popperInteractive","popperArrow","popperClose","tooltip","tooltipArrow","touch","tooltipPlacementLeft","tooltipPlacementRight","tooltipPlacementTop","tooltipPlacementBottom","arrow"]),Al=no(kl,{name:"MuiTooltip",slot:"Popper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.popper,!n.disableInteractive&&t.popperInteractive,n.arrow&&t.popperArrow,!n.open&&t.popperClose]}})(ba((({theme:e})=>({zIndex:(e.vars||e).zIndex.tooltip,pointerEvents:"none",variants:[{props:({ownerState:e})=>!e.disableInteractive,style:{pointerEvents:"auto"}},{props:({open:e})=>!e,style:{pointerEvents:"none"}},{props:({ownerState:e})=>e.arrow,style:{[`&[data-popper-placement*="bottom"] .${zl.arrow}`]:{top:0,marginTop:"-0.71em","&::before":{transformOrigin:"0 100%"}},[`&[data-popper-placement*="top"] .${zl.arrow}`]:{bottom:0,marginBottom:"-0.71em","&::before":{transformOrigin:"100% 0"}},[`&[data-popper-placement*="right"] .${zl.arrow}`]:{height:"1em",width:"0.71em","&::before":{transformOrigin:"100% 100%"}},[`&[data-popper-placement*="left"] .${zl.arrow}`]:{height:"1em",width:"0.71em","&::before":{transformOrigin:"0 0"}}}},{props:({ownerState:e})=>e.arrow&&!e.isRtl,style:{[`&[data-popper-placement*="right"] .${zl.arrow}`]:{left:0,marginLeft:"-0.71em"}}},{props:({ownerState:e})=>e.arrow&&!!e.isRtl,style:{[`&[data-popper-placement*="right"] .${zl.arrow}`]:{right:0,marginRight:"-0.71em"}}},{props:({ownerState:e})=>e.arrow&&!e.isRtl,style:{[`&[data-popper-placement*="left"] .${zl.arrow}`]:{right:0,marginRight:"-0.71em"}}},{props:({ownerState:e})=>e.arrow&&!!e.isRtl,style:{[`&[data-popper-placement*="left"] .${zl.arrow}`]:{left:0,marginLeft:"-0.71em"}}}]})))),Nl=no("div",{name:"MuiTooltip",slot:"Tooltip",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.tooltip,n.touch&&t.touch,n.arrow&&t.tooltipArrow,t[`tooltipPlacement${wn(n.placement.split("-")[0])}`]]}})(ba((({theme:e})=>{return{backgroundColor:e.vars?e.vars.palette.Tooltip.bg:Tn(e.palette.grey[700],.92),borderRadius:(e.vars||e).shape.borderRadius,color:(e.vars||e).palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(11),maxWidth:300,margin:2,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium,[`.${zl.popper}[data-popper-placement*="left"] &`]:{transformOrigin:"right center"},[`.${zl.popper}[data-popper-placement*="right"] &`]:{transformOrigin:"left center"},[`.${zl.popper}[data-popper-placement*="top"] &`]:{transformOrigin:"center bottom",marginBottom:"14px"},[`.${zl.popper}[data-popper-placement*="bottom"] &`]:{transformOrigin:"center top",marginTop:"14px"},variants:[{props:({ownerState:e})=>e.arrow,style:{position:"relative",margin:0}},{props:({ownerState:e})=>e.touch,style:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:(t=16/14,Math.round(1e5*t)/1e5+"em"),fontWeight:e.typography.fontWeightRegular}},{props:({ownerState:e})=>!e.isRtl,style:{[`.${zl.popper}[data-popper-placement*="left"] &`]:{marginRight:"14px"},[`.${zl.popper}[data-popper-placement*="right"] &`]:{marginLeft:"14px"}}},{props:({ownerState:e})=>!e.isRtl&&e.touch,style:{[`.${zl.popper}[data-popper-placement*="left"] &`]:{marginRight:"24px"},[`.${zl.popper}[data-popper-placement*="right"] &`]:{marginLeft:"24px"}}},{props:({ownerState:e})=>!!e.isRtl,style:{[`.${zl.popper}[data-popper-placement*="left"] &`]:{marginLeft:"14px"},[`.${zl.popper}[data-popper-placement*="right"] &`]:{marginRight:"14px"}}},{props:({ownerState:e})=>!!e.isRtl&&e.touch,style:{[`.${zl.popper}[data-popper-placement*="left"] &`]:{marginLeft:"24px"},[`.${zl.popper}[data-popper-placement*="right"] &`]:{marginRight:"24px"}}},{props:({ownerState:e})=>e.touch,style:{[`.${zl.popper}[data-popper-placement*="top"] &`]:{marginBottom:"24px"}}},{props:({ownerState:e})=>e.touch,style:{[`.${zl.popper}[data-popper-placement*="bottom"] &`]:{marginTop:"24px"}}}]};var t}))),Ll=no("span",{name:"MuiTooltip",slot:"Arrow"})(ba((({theme:e})=>({overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:e.vars?e.vars.palette.Tooltip.bg:Tn(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}}))));let $l=!1;const _l=new Wo;let Il={x:0,y:0};function jl(e,t){return(n,...r)=>{t&&t(n,...r),e(n,...r)}}const Fl=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiTooltip"}),{arrow:a=!1,children:l,classes:s,components:u={},componentsProps:c={},describeChild:p=!1,disableFocusListener:f=!1,disableHoverListener:m=!1,disableInteractive:h=!1,disableTouchListener:g=!1,enterDelay:y=100,enterNextDelay:v=0,enterTouchDelay:b=700,followCursor:w=!1,id:S,leaveDelay:x=0,leaveTouchDelay:k=1500,onClose:C,onOpen:E,open:P,placement:T="bottom",PopperComponent:O,PopperProps:R={},slotProps:M={},slots:z={},title:A,TransitionComponent:N,TransitionProps:L,...$}=o,_=t.isValidElement(l)?l:(0,e.jsx)("span",{children:l}),I=oa(),j=so(),[F,D]=t.useState(),[B,W]=t.useState(null),H=t.useRef(!1),V=h||w,U=Ho(),q=Ho(),K=Ho(),G=Ho(),[Q,X]=Rl({controlled:P,default:!1,name:"Tooltip",state:"open"});let Y=Q;const Z=Ol(S),J=t.useRef(),ee=Cl((()=>{void 0!==J.current&&(document.body.style.WebkitUserSelect=J.current,J.current=void 0),G.clear()}));t.useEffect((()=>ee),[ee]);const te=e=>{_l.clear(),$l=!0,X(!0),E&&!Y&&E(e)},ne=Cl((e=>{_l.start(800+x,(()=>{$l=!1})),X(!1),C&&Y&&C(e),U.start(I.transitions.duration.shortest,(()=>{H.current=!1}))})),re=e=>{H.current&&"touchstart"!==e.type||(F&&F.removeAttribute("title"),q.clear(),K.clear(),y||$l&&v?q.start($l?v:y,(()=>{te(e)})):te(e))},oe=e=>{q.clear(),K.start(x,(()=>{ne(e)}))},[,ae]=t.useState(!1),ie=e=>{ii(e.target)||(ae(!1),oe(e))},le=e=>{F||D(e.currentTarget),ii(e.target)&&(ae(!0),re(e))},se=e=>{H.current=!0;const t=_.props;t.onTouchStart&&t.onTouchStart(e)};t.useEffect((()=>{if(Y)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){"Escape"===e.key&&ne(e)}}),[ne,Y]);const ue=Po(Vo(_),D,r);A||0===A||(Y=!1);const ce=t.useRef(),de={},pe="string"==typeof A;p?(de.title=Y||!pe||m?null:A,de["aria-describedby"]=Y?Z:null):(de["aria-label"]=pe?A:null,de["aria-labelledby"]=Y&&!pe?Z:null);const fe={...de,...$,..._.props,className:i($.className,_.props.className),onTouchStart:se,ref:ue,...w?{onMouseMove:e=>{const t=_.props;t.onMouseMove&&t.onMouseMove(e),Il={x:e.clientX,y:e.clientY},ce.current&&ce.current.update()}}:{}},me={};g||(fe.onTouchStart=e=>{se(e),K.clear(),U.clear(),ee(),J.current=document.body.style.WebkitUserSelect,document.body.style.WebkitUserSelect="none",G.start(b,(()=>{document.body.style.WebkitUserSelect=J.current,re(e)}))},fe.onTouchEnd=e=>{_.props.onTouchEnd&&_.props.onTouchEnd(e),ee(),K.start(k,(()=>{ne(e)}))}),m||(fe.onMouseOver=jl(re,fe.onMouseOver),fe.onMouseLeave=jl(oe,fe.onMouseLeave),V||(me.onMouseOver=re,me.onMouseLeave=oe)),f||(fe.onFocus=jl(le,fe.onFocus),fe.onBlur=jl(ie,fe.onBlur),V||(me.onFocus=le,me.onBlur=ie));const he={...o,isRtl:j,arrow:a,disableInteractive:V,placement:T,PopperComponentProp:O,touch:H.current},ge="function"==typeof M.popper?M.popper(he):M.popper,ye=t.useMemo((()=>{let e=[{name:"arrow",enabled:Boolean(B),options:{element:B,padding:4}}];return R.popperOptions?.modifiers&&(e=e.concat(R.popperOptions.modifiers)),ge?.popperOptions?.modifiers&&(e=e.concat(ge.popperOptions.modifiers)),{...R.popperOptions,...ge?.popperOptions,modifiers:e}}),[B,R.popperOptions,ge?.popperOptions]),ve=(e=>{const{classes:t,disableInteractive:n,arrow:r,touch:o,placement:a}=e;return d({popper:["popper",!n&&"popperInteractive",r&&"popperArrow"],tooltip:["tooltip",r&&"tooltipArrow",o&&"touch",`tooltipPlacement${wn(a.split("-")[0])}`],arrow:["arrow"]},Ml,t)})(he),be="function"==typeof M.transition?M.transition(he):M.transition,we={slots:{popper:u.Popper,transition:u.Transition??N,tooltip:u.Tooltip,arrow:u.Arrow,...z},slotProps:{arrow:M.arrow??c.arrow,popper:{...R,...ge??c.popper},tooltip:M.tooltip??c.tooltip,transition:{...L,...be??c.transition}}},[Se,xe]=wa("popper",{elementType:Al,externalForwardedProps:we,ownerState:he,className:i(ve.popper,R?.className)}),[ke,Ce]=wa("transition",{elementType:da,externalForwardedProps:we,ownerState:he}),[Ee,Pe]=wa("tooltip",{elementType:Nl,className:ve.tooltip,externalForwardedProps:we,ownerState:he}),[Te,Oe]=wa("arrow",{elementType:Ll,className:ve.arrow,externalForwardedProps:we,ownerState:he,ref:W});return(0,e.jsxs)(t.Fragment,{children:[t.cloneElement(_,fe),(0,e.jsx)(Se,{as:O??kl,placement:T,anchorEl:w?{getBoundingClientRect:()=>({top:Il.y,left:Il.x,right:Il.x,bottom:Il.y,width:0,height:0})}:F,popperRef:ce,open:!!F&&Y,id:Z,transition:!0,...me,...xe,popperOptions:ye,children:({TransitionProps:t})=>(0,e.jsx)(ke,{timeout:I.transitions.duration.shorter,...t,...Ce,children:(0,e.jsxs)(Ee,{...Pe,children:[A,a?(0,e.jsx)(Te,{...Oe}):null]})})})]})}));class Dl{static create(){return new Dl}static use(){const e=Do(Dl.create).current,[n,r]=t.useState(!1);return e.shouldMount=n,e.setShouldMount=r,t.useEffect(e.mountEffect,[n]),e}constructor(){this.ref={current:null},this.mounted=null,this.didMount=!1,this.shouldMount=!1,this.setShouldMount=null}mount(){return this.mounted||(this.mounted=function(){let e,t;const n=new Promise(((n,r)=>{e=n,t=r}));return n.resolve=e,n.reject=t,n}(),this.shouldMount=!0,this.setShouldMount(this.shouldMount)),this.mounted}mountEffect=()=>{this.shouldMount&&!this.didMount&&null!==this.ref.current&&(this.didMount=!0,this.mounted.resolve())};start(...e){this.mount().then((()=>this.ref.current?.start(...e)))}stop(...e){this.mount().then((()=>this.ref.current?.stop(...e)))}pulsate(...e){this.mount().then((()=>this.ref.current?.pulsate(...e)))}}function Bl(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function Wl(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Hl(e,n,r){var o=Bl(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,t.isValidElement)(l)){var s=i in n,u=i in o,c=n[i],d=(0,t.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,t.isValidElement)(c)&&(a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:Wl(l,"exit",e),enter:Wl(l,"enter",e)})):a[i]=(0,t.cloneElement)(l,{in:!1}):a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Wl(l,"exit",e),enter:Wl(l,"enter",e)})}})),a}var Vl=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Ul=function(e){function n(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Ko(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,o=i,Bl(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:Wl(e,"appear",r),enter:Wl(e,"enter",r),exit:Wl(e,"exit",r)})}))):Hl(e,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=Bl(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Xt({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=Uo(e,["component","childFactory"]),a=this.state.contextValue,i=Vl(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(Qo.Provider,{value:a},i):t.createElement(Qo.Provider,{value:a},t.createElement(n,o,i))},n}(t.Component);Ul.propTypes={},Ul.defaultProps={component:"div",childFactory:function(e){return e}};const ql=Ul;o(146);var Kl,Gl,Ql=function(e,n){var r=arguments;if(null==n||!Vt.call(n,"css"))return t.createElement.apply(void 0,r);var o=r.length,a=new Array(o);a[0]=Kt,a[1]=function(e,t){var n={};for(var r in t)Vt.call(t,r)&&(n[r]=t[r]);return n[Ut]=e,n}(e,n);for(var i=2;i<o;i++)a[i]=r[i];return t.createElement.apply(null,a)};Kl=Ql||(Ql={}),Gl||(Gl=Kl.JSX||(Kl.JSX={}));var Xl=Wt((function(e,n){var r=It([e.styles],void 0,t.useContext(Ht)),o=t.useRef();return Dt((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),a=!1,i=document.querySelector('style[data-emotion="'+e+" "+r.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==i&&(a=!0,i.setAttribute("data-emotion",e),t.hydrate([i])),o.current=[t,a],function(){t.flush()}}),[n]),Dt((function(){var e=o.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==r.next&&Et(n,r.next,!0),t.tags.length){var a=t.tags[t.tags.length-1].nextElementSibling;t.before=a,t.flush()}n.insert("",r,t,!1)}}),[n,r.name]),null}));function Yl(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return It(t)}function Zl(){var e=Yl.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}const Jl=wo("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),es=Zl`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`,ts=Zl`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`,ns=Zl`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`,rs=no("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),os=no((function(n){const{className:r,classes:o,pulsate:a=!1,rippleX:l,rippleY:s,rippleSize:u,in:c,onExited:d,timeout:p}=n,[f,m]=t.useState(!1),h=i(r,o.ripple,o.rippleVisible,a&&o.ripplePulsate),g={width:u,height:u,top:-u/2+s,left:-u/2+l},y=i(o.child,f&&o.childLeaving,a&&o.childPulsate);return c||f||m(!0),t.useEffect((()=>{if(!c&&null!=d){const e=setTimeout(d,p);return()=>{clearTimeout(e)}}}),[d,c,p]),(0,e.jsx)("span",{className:h,style:g,children:(0,e.jsx)("span",{className:y})})}),{name:"MuiTouchRipple",slot:"Ripple"})`
  opacity: 0;
  position: absolute;

  &.${Jl.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${es};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  &.${Jl.ripplePulsate} {
    animation-duration: ${({theme:e})=>e.transitions.duration.shorter}ms;
  }

  & .${Jl.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${Jl.childLeaving} {
    opacity: 0;
    animation-name: ${ts};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  & .${Jl.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${ns};
    animation-duration: 2500ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`,as=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiTouchRipple"}),{center:a=!1,classes:l={},className:s,...u}=o,[c,d]=t.useState([]),p=t.useRef(0),f=t.useRef(null);t.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[c]);const m=t.useRef(!1),h=Ho(),g=t.useRef(null),y=t.useRef(null),v=t.useCallback((t=>{const{pulsate:n,rippleX:r,rippleY:o,rippleSize:a,cb:s}=t;d((t=>[...t,(0,e.jsx)(os,{classes:{ripple:i(l.ripple,Jl.ripple),rippleVisible:i(l.rippleVisible,Jl.rippleVisible),ripplePulsate:i(l.ripplePulsate,Jl.ripplePulsate),child:i(l.child,Jl.child),childLeaving:i(l.childLeaving,Jl.childLeaving),childPulsate:i(l.childPulsate,Jl.childPulsate)},timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:a},p.current)])),p.current+=1,f.current=s}),[l]),b=t.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:r=!1,center:o=a||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===e?.type&&m.current)return void(m.current=!1);"touchstart"===e?.type&&(m.current=!0);const l=i?null:y.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(o||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(o)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}e?.touches?null===g.current&&(g.current=()=>{v({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},h.start(80,(()=>{g.current&&(g.current(),g.current=null)}))):v({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[a,v,h]),w=t.useCallback((()=>{b({},{pulsate:!0})}),[b]),S=t.useCallback(((e,t)=>{if(h.clear(),"touchend"===e?.type&&g.current)return g.current(),g.current=null,void h.start(0,(()=>{S(e,t)}));g.current=null,d((e=>e.length>0?e.slice(1):e)),f.current=t}),[h]);return t.useImperativeHandle(r,(()=>({pulsate:w,start:b,stop:S})),[w,b,S]),(0,e.jsx)(rs,{className:i(Jl.root,l.root,s),ref:y,...u,children:(0,e.jsx)(ql,{component:null,exit:!0,children:c})})})),is=as;function ls(e){return c("MuiButtonBase",e)}const ss=wo("MuiButtonBase",["root","disabled","focusVisible"]),us=no("button",{name:"MuiButtonBase",slot:"Root"})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ss.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}});function cs(e,t,n,r=!1){return Cl((o=>(n&&n(o),r||e[t](o),!0)))}const ds=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiButtonBase"}),{action:a,centerRipple:l=!1,children:s,className:u,component:c="button",disabled:p=!1,disableRipple:f=!1,disableTouchRipple:m=!1,focusRipple:h=!1,focusVisibleClassName:g,LinkComponent:y="a",onBlur:v,onClick:b,onContextMenu:w,onDragLeave:S,onFocus:x,onFocusVisible:k,onKeyDown:C,onKeyUp:E,onMouseDown:P,onMouseLeave:T,onMouseUp:O,onTouchEnd:R,onTouchMove:M,onTouchStart:z,tabIndex:A=0,TouchRippleProps:N,touchRippleRef:L,type:$,..._}=o,I=t.useRef(null),j=Dl.use(),F=Po(j.ref,L),[D,B]=t.useState(!1);p&&D&&B(!1),t.useImperativeHandle(a,(()=>({focusVisible:()=>{B(!0),I.current.focus()}})),[]);const W=j.shouldMount&&!f&&!p;t.useEffect((()=>{D&&h&&!f&&j.pulsate()}),[f,h,D,j]);const H=cs(j,"start",P,m),V=cs(j,"stop",w,m),U=cs(j,"stop",S,m),q=cs(j,"stop",O,m),K=cs(j,"stop",(e=>{D&&e.preventDefault(),T&&T(e)}),m),G=cs(j,"start",z,m),Q=cs(j,"stop",R,m),X=cs(j,"stop",M,m),Y=cs(j,"stop",(e=>{ii(e.target)||B(!1),v&&v(e)}),!1),Z=Cl((e=>{I.current||(I.current=e.currentTarget),ii(e.target)&&(B(!0),k&&k(e)),x&&x(e)})),J=()=>{const e=I.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},ee=Cl((e=>{h&&!e.repeat&&D&&" "===e.key&&j.stop(e,(()=>{j.start(e)})),e.target===e.currentTarget&&J()&&" "===e.key&&e.preventDefault(),C&&C(e),e.target===e.currentTarget&&J()&&"Enter"===e.key&&!p&&(e.preventDefault(),b&&b(e))})),te=Cl((e=>{h&&" "===e.key&&D&&!e.defaultPrevented&&j.stop(e,(()=>{j.pulsate(e)})),E&&E(e),b&&e.target===e.currentTarget&&J()&&" "===e.key&&!e.defaultPrevented&&b(e)}));let ne=c;"button"===ne&&(_.href||_.to)&&(ne=y);const re={};"button"===ne?(re.type=void 0===$?"button":$,re.disabled=p):(_.href||_.to||(re.role="button"),p&&(re["aria-disabled"]=p));const oe=Po(r,I),ae={...o,centerRipple:l,component:c,disabled:p,disableRipple:f,disableTouchRipple:m,focusRipple:h,tabIndex:A,focusVisible:D},ie=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=d({root:["root",t&&"disabled",n&&"focusVisible"]},ls,o);return n&&r&&(a.root+=` ${r}`),a})(ae);return(0,e.jsxs)(us,{as:ne,className:i(ie.root,u),ownerState:ae,onBlur:Y,onClick:b,onContextMenu:V,onFocus:Z,onKeyDown:ee,onKeyUp:te,onMouseDown:H,onMouseLeave:K,onMouseUp:q,onDragLeave:U,onTouchEnd:Q,onTouchMove:X,onTouchStart:G,ref:oe,tabIndex:p?-1:A,type:$,...re,..._,children:[s,W?(0,e.jsx)(is,{ref:F,center:l,...N}):null]})}));function ps(e=[]){return([,t])=>t&&function(e,t=[]){if(!function(e){return"string"==typeof e.main}(e))return!1;for(const n of t)if(!e.hasOwnProperty(n)||"string"!=typeof e[n])return!1;return!0}(t,e)}function fs(e){return c("MuiCircularProgress",e)}wo("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);const ms=Zl`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`,hs=Zl`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`,gs="string"!=typeof ms?Yl`
        animation: ${ms} 1.4s linear infinite;
      `:null,ys="string"!=typeof hs?Yl`
        animation: ${hs} 1.4s ease-in-out infinite;
      `:null,vs=no("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${wn(n.color)}`]]}})(ba((({theme:e})=>({display:"inline-block",variants:[{props:{variant:"determinate"},style:{transition:e.transitions.create("transform")}},{props:{variant:"indeterminate"},style:gs||{animation:`${ms} 1.4s linear infinite`}},...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}})))]})))),bs=no("svg",{name:"MuiCircularProgress",slot:"Svg"})({display:"block"}),ws=no("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${wn(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})(ba((({theme:e})=>({stroke:"currentColor",variants:[{props:{variant:"determinate"},style:{transition:e.transitions.create("stroke-dashoffset")}},{props:{variant:"indeterminate"},style:{strokeDasharray:"80px, 200px",strokeDashoffset:0}},{props:({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink,style:ys||{animation:`${hs} 1.4s ease-in-out infinite`}}]})))),Ss=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiCircularProgress"}),{className:o,color:a="primary",disableShrink:l=!1,size:s=40,style:u,thickness:c=3.6,value:p=0,variant:f="indeterminate",...m}=r,h={...r,color:a,disableShrink:l,size:s,thickness:c,value:p,variant:f},g=(e=>{const{classes:t,variant:n,color:r,disableShrink:o}=e;return d({root:["root",n,`color${wn(r)}`],svg:["svg"],circle:["circle",`circle${wn(n)}`,o&&"circleDisableShrink"]},fs,t)})(h),y={},v={},b={};if("determinate"===f){const e=2*Math.PI*((44-c)/2);y.strokeDasharray=e.toFixed(3),b["aria-valuenow"]=Math.round(p),y.strokeDashoffset=`${((100-p)/100*e).toFixed(3)}px`,v.transform="rotate(-90deg)"}return(0,e.jsx)(vs,{className:i(g.root,o),style:{width:s,height:s,...v,...u},ownerState:h,ref:n,role:"progressbar",...b,...m,children:(0,e.jsx)(bs,{className:g.svg,ownerState:h,viewBox:"22 22 44 44",children:(0,e.jsx)(ws,{className:g.circle,style:y,ownerState:h,cx:44,cy:44,r:(44-c)/2,fill:"none",strokeWidth:c})})})}));function xs(e){return c("MuiButton",e)}const ks=wo("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge","loading","loadingWrapper","loadingIconPlaceholder","loadingIndicator","loadingPositionCenter","loadingPositionStart","loadingPositionEnd"]),Cs=t.createContext({}),Es=t.createContext(void 0),Ps=[{props:{size:"small"},style:{"& > *:nth-of-type(1)":{fontSize:18}}},{props:{size:"medium"},style:{"& > *:nth-of-type(1)":{fontSize:20}}},{props:{size:"large"},style:{"& > *:nth-of-type(1)":{fontSize:22}}}],Ts=no(ds,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${wn(n.color)}`],t[`size${wn(n.size)}`],t[`${n.variant}Size${wn(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth,n.loading&&t.loading]}})(ba((({theme:e})=>{const t="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],n="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return{...e.typography.button,minWidth:64,padding:"6px 16px",border:0,borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none"},[`&.${ks.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:{variant:"contained"},style:{color:"var(--variant-containedColor)",backgroundColor:"var(--variant-containedBg)",boxShadow:(e.vars||e).shadows[2],"&:hover":{boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2]}},"&:active":{boxShadow:(e.vars||e).shadows[8]},[`&.${ks.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]},[`&.${ks.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}},{props:{variant:"outlined"},style:{padding:"5px 15px",border:"1px solid currentColor",borderColor:"var(--variant-outlinedBorder, currentColor)",backgroundColor:"var(--variant-outlinedBg)",color:"var(--variant-outlinedColor)",[`&.${ks.disabled}`]:{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`}}},{props:{variant:"text"},style:{padding:"6px 8px",color:"var(--variant-textColor)",backgroundColor:"var(--variant-textBg)"}},...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{"--variant-textColor":(e.vars||e).palette[t].main,"--variant-outlinedColor":(e.vars||e).palette[t].main,"--variant-outlinedBorder":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.5)`:Tn(e.palette[t].main,.5),"--variant-containedColor":(e.vars||e).palette[t].contrastText,"--variant-containedBg":(e.vars||e).palette[t].main,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":(e.vars||e).palette[t].dark,"--variant-textBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Tn(e.palette[t].main,e.palette.action.hoverOpacity),"--variant-outlinedBorder":(e.vars||e).palette[t].main,"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Tn(e.palette[t].main,e.palette.action.hoverOpacity)}}}}))),{props:{color:"inherit"},style:{color:"inherit",borderColor:"currentColor","--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedBg:t,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedHoverBg:n,"--variant-textBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:Tn(e.palette.text.primary,e.palette.action.hoverOpacity),"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:Tn(e.palette.text.primary,e.palette.action.hoverOpacity)}}}},{props:{size:"small",variant:"text"},style:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"text"},style:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"outlined"},style:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"outlined"},style:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"contained"},style:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"contained"},style:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)}},{props:{disableElevation:!0},style:{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${ks.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${ks.disabled}`]:{boxShadow:"none"}}},{props:{fullWidth:!0},style:{width:"100%"}},{props:{loadingPosition:"center"},style:{transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),[`&.${ks.loading}`]:{color:"transparent"}}}]}}))),Os=no("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,n.loading&&t.startIconLoadingStart,t[`iconSize${wn(n.size)}`]]}})((({theme:e})=>({display:"inherit",marginRight:8,marginLeft:-4,variants:[{props:{size:"small"},style:{marginLeft:-2}},{props:{loadingPosition:"start",loading:!0},style:{transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.short}),opacity:0}},{props:{loadingPosition:"start",loading:!0,fullWidth:!0},style:{marginRight:-8}},...Ps]}))),Rs=no("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,n.loading&&t.endIconLoadingEnd,t[`iconSize${wn(n.size)}`]]}})((({theme:e})=>({display:"inherit",marginRight:-4,marginLeft:8,variants:[{props:{size:"small"},style:{marginRight:-2}},{props:{loadingPosition:"end",loading:!0},style:{transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.short}),opacity:0}},{props:{loadingPosition:"end",loading:!0,fullWidth:!0},style:{marginLeft:-8}},...Ps]}))),Ms=no("span",{name:"MuiButton",slot:"LoadingIndicator"})((({theme:e})=>({display:"none",position:"absolute",visibility:"visible",variants:[{props:{loading:!0},style:{display:"flex"}},{props:{loadingPosition:"start"},style:{left:14}},{props:{loadingPosition:"start",size:"small"},style:{left:10}},{props:{variant:"text",loadingPosition:"start"},style:{left:6}},{props:{loadingPosition:"center"},style:{left:"50%",transform:"translate(-50%)",color:(e.vars||e).palette.action.disabled}},{props:{loadingPosition:"end"},style:{right:14}},{props:{loadingPosition:"end",size:"small"},style:{right:10}},{props:{variant:"text",loadingPosition:"end"},style:{right:6}},{props:{loadingPosition:"start",fullWidth:!0},style:{position:"relative",left:-10}},{props:{loadingPosition:"end",fullWidth:!0},style:{position:"relative",right:-10}}]}))),zs=no("span",{name:"MuiButton",slot:"LoadingIconPlaceholder"})({display:"inline-block",width:"1em",height:"1em"}),As=t.forwardRef((function(n,r){const o=t.useContext(Cs),a=t.useContext(Es),l=oo({props:m(o,n),name:"MuiButton"}),{children:s,color:u="primary",component:c="button",className:p,disabled:f=!1,disableElevation:h=!1,disableFocusRipple:g=!1,endIcon:y,focusVisibleClassName:v,fullWidth:b=!1,id:w,loading:S=null,loadingIndicator:x,loadingPosition:k="center",size:C="medium",startIcon:E,type:P,variant:T="text",...O}=l,R=Ol(w),M=x??(0,e.jsx)(Ss,{"aria-labelledby":R,color:"inherit",size:16}),z={...l,color:u,component:c,disabled:f,disableElevation:h,disableFocusRipple:g,fullWidth:b,loading:S,loadingIndicator:M,loadingPosition:k,size:C,type:P,variant:T},A=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,loading:i,loadingPosition:l,classes:s}=e,u=d({root:["root",i&&"loading",a,`${a}${wn(t)}`,`size${wn(o)}`,`${a}Size${wn(o)}`,`color${wn(t)}`,n&&"disableElevation",r&&"fullWidth",i&&`loadingPosition${wn(l)}`],startIcon:["icon","startIcon",`iconSize${wn(o)}`],endIcon:["icon","endIcon",`iconSize${wn(o)}`],loadingIndicator:["loadingIndicator"],loadingWrapper:["loadingWrapper"]},xs,s);return{...s,...u}})(z),N=(E||S&&"start"===k)&&(0,e.jsx)(Os,{className:A.startIcon,ownerState:z,children:E||(0,e.jsx)(zs,{className:A.loadingIconPlaceholder,ownerState:z})}),L=(y||S&&"end"===k)&&(0,e.jsx)(Rs,{className:A.endIcon,ownerState:z,children:y||(0,e.jsx)(zs,{className:A.loadingIconPlaceholder,ownerState:z})}),$=a||"",_="boolean"==typeof S?(0,e.jsx)("span",{className:A.loadingWrapper,style:{display:"contents"},children:S&&(0,e.jsx)(Ms,{className:A.loadingIndicator,ownerState:z,children:M})}):null;return(0,e.jsxs)(Ts,{ownerState:z,className:i(o.className,A.root,p,$),component:c,disabled:f||S,focusRipple:!g,focusVisibleClassName:i(A.focusVisible,v),ref:r,type:P,id:S?R:w,...O,classes:A,children:[N,"end"!==k&&_,s,"end"===k&&_,L]})})),Ns=function(n){var r=n.text,o=n.onShortcutKeys,a=n.onKbd,i=function(e){return{enabled:e.indexOf("&")>=0,pre:e.substr(0,e.indexOf("&")),key:e.substr(e.indexOf("&")+1,1),post:e.substr(e.indexOf("&")+2),label:e.replace("&",""),text:e}}(r);return t.useEffect((function(){i.enabled&&o&&o(i.key)}),[i,o]),i.enabled?(0,e.jsxs)("span",{children:[i.pre,(0,e.jsx)("span",{className:"kbd-hint",onClick:a,children:i.key}),i.post]}):(0,e.jsx)("span",{children:r})};var Ls={button:{margin:"4px",minWidth:"80px"}};const $s=function(n){var r=n.text,o=n.tooltip,a=n.onClick,i=function(e){var n=(0,t.useState)("");return{keyboardShortcut:n[0],setKeyboardShortcut:n[1],handleKeyAction:(0,t.useCallback)((function(){e()}),[e])}}(a),l=i.keyboardShortcut,s=i.setKeyboardShortcut,u=i.handleKeyAction,c=(0,t.useMemo)((function(){return"".concat(o).concat(l?" [".concat(l,"]"):"")}),[o,l]);return(0,e.jsx)(Fl,{title:c,enterDelay:500,children:(0,e.jsx)(As,{variant:"contained",size:"small",onClick:a,className:"gcs",sx:Ls.button,children:(0,e.jsx)(Ns,{text:r,onKbd:u,onShortcutKeys:function(e){return s(e)}})})})};function _s(e){return parseInt(e,10)||0}const Is={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function js(e){return function(e){for(const t in e)return!1;return!0}(e)||0===e.outerHeightStyle&&!e.overflowing}const Fs=t.forwardRef((function(n,r){const{onChange:o,maxRows:a,minRows:i=1,style:l,value:s,...u}=n,{current:c}=t.useRef(null!=s),d=t.useRef(null),p=uo(r,d),f=t.useRef(null),m=t.useRef(null),h=t.useCallback((()=>{const e=d.current,t=m.current;if(!e||!t)return;const r=Ro(e).getComputedStyle(e);if("0px"===r.width)return{outerHeightStyle:0,overflowing:!1};t.style.width=r.width,t.value=e.value||n.placeholder||"x","\n"===t.value.slice(-1)&&(t.value+=" ");const o=r.boxSizing,l=_s(r.paddingBottom)+_s(r.paddingTop),s=_s(r.borderBottomWidth)+_s(r.borderTopWidth),u=t.scrollHeight;t.value="x";const c=t.scrollHeight;let p=u;return i&&(p=Math.max(Number(i)*c,p)),a&&(p=Math.min(Number(a)*c,p)),p=Math.max(p,c),{outerHeightStyle:p+("border-box"===o?l+s:0),overflowing:Math.abs(p-u)<=1}}),[a,i,n.placeholder]),g=Ta((()=>{const e=d.current,t=h();if(!e||!t||js(t))return!1;const n=t.outerHeightStyle;return null!=f.current&&f.current!==n})),y=t.useCallback((()=>{const e=d.current,t=h();if(!e||!t||js(t))return;const n=t.outerHeightStyle;f.current!==n&&(f.current=n,e.style.height=`${n}px`),e.style.overflow=t.overflowing?"hidden":""}),[h]),v=t.useRef(-1);return To((()=>{const e=Io(y),t=d?.current;if(!t)return;const n=Ro(t);let r;return n.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(r=new ResizeObserver((()=>{g()&&(r.unobserve(t),cancelAnimationFrame(v.current),y(),v.current=requestAnimationFrame((()=>{r.observe(t)})))})),r.observe(t)),()=>{e.clear(),cancelAnimationFrame(v.current),n.removeEventListener("resize",e),r&&r.disconnect()}}),[h,y,g]),To((()=>{y()})),(0,e.jsxs)(t.Fragment,{children:[(0,e.jsx)("textarea",{value:s,onChange:e=>{c||y();const t=e.target,n=t.value.length,r=t.value.endsWith("\n"),a=t.selectionStart===n;r&&a&&t.setSelectionRange(n,n),o&&o(e)},ref:p,rows:i,style:l,...u}),(0,e.jsx)("textarea",{"aria-hidden":!0,className:n.className,readOnly:!0,ref:m,tabIndex:-1,style:{...Is,...l,paddingTop:0,paddingBottom:0}})]})})),Ds=Fs;function Bs({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}const Ws=t.createContext(void 0);function Hs(){return t.useContext(Ws)}function Vs(e){const{sx:t,...n}=e,{systemProps:r,otherProps:o}=(e=>{const t={systemProps:{},otherProps:{}},n=e?.theme?.unstable_sxConfig??ye;return Object.keys(e).forEach((r=>{n[r]?t.systemProps[r]=e[r]:t.otherProps[r]=e[r]})),t})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return g(n)?{...r,...n}:r}:{...r,...t},{...o,sx:a}}function Us(t){const{styles:n,defaultTheme:r={}}=t,o="function"==typeof n?e=>{return n(null==(t=e)||0===Object.keys(t).length?r:e);var t}:n;return(0,e.jsx)(Xl,{styles:o})}const qs=function({styles:t,themeId:n,defaultTheme:r={}}){const o=Qt(r),a="function"==typeof t?t(n&&o[n]||o):t;return(0,e.jsx)(Us,{styles:a})},Ks=function(t){return(0,e.jsx)(qs,{...t,defaultTheme:Zr,themeId:Jr})};function Gs(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Qs(e,t=!1){return e&&(Gs(e.value)&&""!==e.value||t&&Gs(e.defaultValue)&&""!==e.defaultValue)}function Xs(e){return c("MuiInputBase",e)}const Ys=wo("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]);var Zs;const Js=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${wn(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},eu=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},tu=no("div",{name:"MuiInputBase",slot:"Root",overridesResolver:Js})(ba((({theme:e})=>({...e.typography.body1,color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Ys.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"},variants:[{props:({ownerState:e})=>e.multiline,style:{padding:"4px 0 5px"}},{props:({ownerState:e,size:t})=>e.multiline&&"small"===t,style:{paddingTop:1}},{props:({ownerState:e})=>e.fullWidth,style:{width:"100%"}}]})))),nu=no("input",{name:"MuiInputBase",slot:"Input",overridesResolver:eu})(ba((({theme:e})=>{const t="light"===e.palette.mode,n={color:"currentColor",...e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:t?.42:.5},transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},o=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:t?.42:.5};return{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Ys.formControl} &`]:{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus::-ms-input-placeholder":o},[`&.${Ys.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},variants:[{props:({ownerState:e})=>!e.disableInjectingGlobalStyles,style:{animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}}},{props:{size:"small"},style:{paddingTop:1}},{props:({ownerState:e})=>e.multiline,style:{height:"auto",resize:"none",padding:0,paddingTop:0}},{props:{type:"search"},style:{MozAppearance:"textfield"}}]}}))),ru=function(t){return function(n){return(0,e.jsx)(Ks,{styles:"function"==typeof t?e=>t({theme:e,...n}):t})}}({"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}),ou=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiInputBase"}),{"aria-describedby":a,autoComplete:l,autoFocus:s,className:u,color:c,components:f={},componentsProps:m={},defaultValue:h,disabled:g,disableInjectingGlobalStyles:y,endAdornment:v,error:b,fullWidth:w=!1,id:S,inputComponent:x="input",inputProps:k={},inputRef:C,margin:E,maxRows:P,minRows:T,multiline:O=!1,name:R,onBlur:M,onChange:z,onClick:A,onFocus:N,onKeyDown:L,onKeyUp:$,placeholder:_,readOnly:I,renderSuffix:j,rows:F,size:D,slotProps:B={},slots:W={},startAdornment:H,type:V="text",value:U,...q}=o,K=null!=k.value?k.value:U,{current:G}=t.useRef(null!=K),Q=t.useRef(),X=t.useCallback((e=>{}),[]),Y=Po(Q,C,k.ref,X),[Z,J]=t.useState(!1),ee=Hs(),te=Bs({props:o,muiFormControl:ee,states:["color","disabled","error","hiddenLabel","size","required","filled"]});te.focused=ee?ee.focused:Z,t.useEffect((()=>{!ee&&g&&Z&&(J(!1),M&&M())}),[ee,g,Z,M]);const ne=ee&&ee.onFilled,re=ee&&ee.onEmpty,oe=t.useCallback((e=>{Qs(e)?ne&&ne():re&&re()}),[ne,re]);Oo((()=>{G&&oe({value:K})}),[K,oe,G]),t.useEffect((()=>{oe(Q.current)}),[]);let ae=x,ie=k;O&&"input"===ae&&(ie=F?{type:void 0,minRows:F,maxRows:F,...ie}:{type:void 0,maxRows:P,minRows:T,...ie},ae=Ds),t.useEffect((()=>{ee&&ee.setAdornedStart(Boolean(H))}),[ee,H]);const le={...o,color:te.color||"primary",disabled:te.disabled,endAdornment:v,error:te.error,focused:te.focused,formControl:ee,fullWidth:w,hiddenLabel:te.hiddenLabel,multiline:O,size:te.size,startAdornment:H,type:V},se=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:s,hiddenLabel:u,multiline:c,readOnly:p,size:f,startAdornment:m,type:h}=e;return d({root:["root",`color${wn(n)}`,r&&"disabled",o&&"error",s&&"fullWidth",i&&"focused",l&&"formControl",f&&"medium"!==f&&`size${wn(f)}`,c&&"multiline",m&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel",p&&"readOnly"],input:["input",r&&"disabled","search"===h&&"inputTypeSearch",c&&"inputMultiline","small"===f&&"inputSizeSmall",u&&"inputHiddenLabel",m&&"inputAdornedStart",a&&"inputAdornedEnd",p&&"readOnly"]},Xs,t)})(le),ue=W.root||f.Root||tu,ce=B.root||m.root||{},de=W.input||f.Input||nu;return ie={...ie,...B.input??m.input},(0,e.jsxs)(t.Fragment,{children:[!y&&"function"==typeof ru&&(Zs||(Zs=(0,e.jsx)(ru,{}))),(0,e.jsxs)(ue,{...ce,ref:r,onClick:e=>{Q.current&&e.currentTarget===e.target&&Q.current.focus(),A&&A(e)},...q,...!_o(ue)&&{ownerState:{...le,...ce.ownerState}},className:i(se.root,ce.className,u,I&&"MuiInputBase-readOnly"),children:[H,(0,e.jsx)(Ws.Provider,{value:null,children:(0,e.jsx)(de,{"aria-invalid":te.error,"aria-describedby":a,autoComplete:l,autoFocus:s,defaultValue:h,disabled:te.disabled,id:S,onAnimationStart:e=>{oe("mui-auto-fill-cancel"===e.animationName?Q.current:{value:"x"})},name:R,placeholder:_,readOnly:I,required:te.required,rows:F,value:K,onKeyDown:L,onKeyUp:$,type:V,...ie,...!_o(de)&&{as:ae,ownerState:{...le,...ie.ownerState}},ref:Y,className:i(se.input,ie.className,I&&"MuiInputBase-readOnly"),onBlur:e=>{M&&M(e),k.onBlur&&k.onBlur(e),ee&&ee.onBlur?ee.onBlur(e):J(!1)},onChange:(e,...t)=>{if(!G){const t=e.target||Q.current;if(null==t)throw new Error(p(1));oe({value:t.value})}k.onChange&&k.onChange(e,...t),z&&z(e,...t)},onFocus:e=>{N&&N(e),k.onFocus&&k.onFocus(e),ee&&ee.onFocus?ee.onFocus(e):J(!0)}})}),v,j?j({...te,startAdornment:H}):null]})]})})),au=ou;function iu(e){return c("MuiInput",e)}const lu={...Ys,...wo("MuiInput",["root","underline","input"])},su=no(tu,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...Js(e,t),!n.disableUnderline&&t.underline]}})(ba((({theme:e})=>{let t="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(t=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),{position:"relative",variants:[{props:({ownerState:e})=>e.formControl,style:{"label + &":{marginTop:16}}},{props:({ownerState:e})=>!e.disableUnderline,style:{"&::after":{left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${lu.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${lu.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${t}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${lu.disabled}, .${lu.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${t}`}},[`&.${lu.disabled}:before`]:{borderBottomStyle:"dotted"}}},...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t,disableUnderline:!1},style:{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t].main}`}}})))]}}))),uu=no(nu,{name:"MuiInput",slot:"Input",overridesResolver:eu})({}),cu=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiInput"}),{disableUnderline:o=!1,components:a={},componentsProps:i,fullWidth:l=!1,inputComponent:s="input",multiline:u=!1,slotProps:c,slots:p={},type:f="text",...m}=r,h=(e=>{const{classes:t,disableUnderline:n}=e,r=d({root:["root",!n&&"underline"],input:["input"]},iu,t);return{...t,...r}})(r),g={root:{ownerState:{disableUnderline:o}}},y=c??i?v(c??i,g):g,b=p.root??a.Root??su,w=p.input??a.Input??uu;return(0,e.jsx)(au,{slots:{root:b,input:w},slotProps:y,fullWidth:l,inputComponent:s,multiline:u,ref:n,type:f,...m,classes:h})}));cu.muiName="Input";const du=cu;function pu(e){return c("MuiFilledInput",e)}const fu={...Ys,...wo("MuiFilledInput",["root","underline","input","adornedStart","adornedEnd","sizeSmall","multiline","hiddenLabel"])},mu=no(tu,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...Js(e,t),!n.disableUnderline&&t.underline]}})(ba((({theme:e})=>{const t="light"===e.palette.mode,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",o=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",a=t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return{position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:o,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r}},[`&.${fu.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r},[`&.${fu.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:a},variants:[{props:({ownerState:e})=>!e.disableUnderline,style:{"&::after":{left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${fu.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${fu.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${fu.disabled}, .${fu.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${fu.disabled}:before`]:{borderBottomStyle:"dotted"}}},...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{disableUnderline:!1,color:t},style:{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t]?.main}`}}}))),{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:12}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:12}},{props:({ownerState:e})=>e.multiline,style:{padding:"25px 12px 8px"}},{props:({ownerState:e,size:t})=>e.multiline&&"small"===t,style:{paddingTop:21,paddingBottom:4}},{props:({ownerState:e})=>e.multiline&&e.hiddenLabel,style:{paddingTop:16,paddingBottom:17}},{props:({ownerState:e})=>e.multiline&&e.hiddenLabel&&"small"===e.size,style:{paddingTop:8,paddingBottom:9}}]}}))),hu=no(nu,{name:"MuiFilledInput",slot:"Input",overridesResolver:eu})(ba((({theme:e})=>({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12,...!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},...e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},variants:[{props:{size:"small"},style:{paddingTop:21,paddingBottom:4}},{props:({ownerState:e})=>e.hiddenLabel,style:{paddingTop:16,paddingBottom:17}},{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:0}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:0}},{props:({ownerState:e})=>e.hiddenLabel&&"small"===e.size,style:{paddingTop:8,paddingBottom:9}},{props:({ownerState:e})=>e.multiline,style:{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0}}]})))),gu=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiFilledInput"}),{disableUnderline:o=!1,components:a={},componentsProps:i,fullWidth:l=!1,hiddenLabel:s,inputComponent:u="input",multiline:c=!1,slotProps:p,slots:f={},type:m="text",...h}=r,g={...r,disableUnderline:o,fullWidth:l,inputComponent:u,multiline:c,type:m},y=(e=>{const{classes:t,disableUnderline:n,startAdornment:r,endAdornment:o,size:a,hiddenLabel:i,multiline:l}=e,s=d({root:["root",!n&&"underline",r&&"adornedStart",o&&"adornedEnd","small"===a&&`size${wn(a)}`,i&&"hiddenLabel",l&&"multiline"],input:["input"]},pu,t);return{...t,...s}})(r),b={root:{ownerState:g},input:{ownerState:g}},w=p??i?v(b,p??i):b,S=f.root??a.Root??mu,x=f.input??a.Input??hu;return(0,e.jsx)(au,{slots:{root:S,input:x},slotProps:w,fullWidth:l,inputComponent:u,multiline:c,ref:n,type:m,...h,classes:y})}));gu.muiName="Input";const yu=gu;var vu;const bu=no("fieldset",{shouldForwardProp:to})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),wu=no("legend",{shouldForwardProp:to})(ba((({theme:e})=>({float:"unset",width:"auto",overflow:"hidden",variants:[{props:({ownerState:e})=>!e.withLabel,style:{padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})}},{props:({ownerState:e})=>e.withLabel,style:{display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}}},{props:({ownerState:e})=>e.withLabel&&e.notched,style:{maxWidth:"100%",transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}]}))));function Su(e){return c("MuiOutlinedInput",e)}const xu={...Ys,...wo("MuiOutlinedInput",["root","notchedOutline","input"])},ku=no(tu,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:Js})(ba((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${xu.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${xu.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}},[`&.${xu.focused} .${xu.notchedOutline}`]:{borderWidth:2},variants:[...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{[`&.${xu.focused} .${xu.notchedOutline}`]:{borderColor:(e.vars||e).palette[t].main}}}))),{props:{},style:{[`&.${xu.error} .${xu.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${xu.disabled} .${xu.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}}},{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:14}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:14}},{props:({ownerState:e})=>e.multiline,style:{padding:"16.5px 14px"}},{props:({ownerState:e,size:t})=>e.multiline&&"small"===t,style:{padding:"8.5px 14px"}}]}}))),Cu=no((function(t){const{children:n,classes:r,className:o,label:a,notched:i,...l}=t,s=null!=a&&""!==a,u={...t,notched:i,withLabel:s};return(0,e.jsx)(bu,{"aria-hidden":!0,className:o,ownerState:u,...l,children:(0,e.jsx)(wu,{ownerState:u,children:s?(0,e.jsx)("span",{children:a}):vu||(vu=(0,e.jsx)("span",{className:"notranslate","aria-hidden":!0,children:"​"}))})})}),{name:"MuiOutlinedInput",slot:"NotchedOutline"})(ba((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}))),Eu=no(nu,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:eu})(ba((({theme:e})=>({padding:"16.5px 14px",...!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},...e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},variants:[{props:{size:"small"},style:{padding:"8.5px 14px"}},{props:({ownerState:e})=>e.multiline,style:{padding:0}},{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:0}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:0}}]})))),Pu=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiOutlinedInput"}),{components:a={},fullWidth:i=!1,inputComponent:l="input",label:s,multiline:u=!1,notched:c,slots:p={},slotProps:f={},type:m="text",...h}=o,g=(e=>{const{classes:t}=e,n=d({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Su,t);return{...t,...n}})(o),y=Hs(),v=Bs({props:o,muiFormControl:y,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),b={...o,color:v.color||"primary",disabled:v.disabled,error:v.error,focused:v.focused,formControl:y,fullWidth:i,hiddenLabel:v.hiddenLabel,multiline:u,size:v.size,type:m},w=p.root??a.Root??ku,S=p.input??a.Input??Eu,[x,k]=wa("notchedOutline",{elementType:Cu,className:g.notchedOutline,shouldForwardComponentProp:!0,ownerState:b,externalForwardedProps:{slots:p,slotProps:f},additionalProps:{label:null!=s&&""!==s&&v.required?(0,e.jsxs)(t.Fragment,{children:[s," ","*"]}):s}});return(0,e.jsx)(au,{slots:{root:w,input:S},slotProps:f,renderSuffix:t=>(0,e.jsx)(x,{...k,notched:void 0!==c?c:Boolean(t.startAdornment||t.filled||t.focused)}),fullWidth:i,inputComponent:l,multiline:u,ref:r,type:m,...h,classes:{...g,notchedOutline:null}})}));Pu.muiName="Input";const Tu=Pu;function Ou(e){return c("MuiFormLabel",e)}const Ru=wo("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),Mu=no("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"secondary"===n.color&&t.colorSecondary,n.filled&&t.filled]}})(ba((({theme:e})=>({color:(e.vars||e).palette.text.secondary,...e.typography.body1,lineHeight:"1.4375em",padding:0,position:"relative",variants:[...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{[`&.${Ru.focused}`]:{color:(e.vars||e).palette[t].main}}}))),{props:{},style:{[`&.${Ru.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Ru.error}`]:{color:(e.vars||e).palette.error.main}}}]})))),zu=no("span",{name:"MuiFormLabel",slot:"Asterisk"})(ba((({theme:e})=>({[`&.${Ru.error}`]:{color:(e.vars||e).palette.error.main}})))),Au=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiFormLabel"}),{children:o,className:a,color:l,component:s="label",disabled:u,error:c,filled:p,focused:f,required:m,...h}=r,g=Bs({props:r,muiFormControl:Hs(),states:["color","required","focused","disabled","error","filled"]}),y={...r,color:g.color||"primary",component:s,disabled:g.disabled,error:g.error,filled:g.filled,focused:g.focused,required:g.required},v=(e=>{const{classes:t,color:n,focused:r,disabled:o,error:a,filled:i,required:l}=e;return d({root:["root",`color${wn(n)}`,o&&"disabled",a&&"error",i&&"filled",r&&"focused",l&&"required"],asterisk:["asterisk",a&&"error"]},Ou,t)})(y);return(0,e.jsxs)(Mu,{as:s,ownerState:y,className:i(v.root,a),ref:n,...h,children:[o,g.required&&(0,e.jsxs)(zu,{ownerState:y,"aria-hidden":!0,className:v.asterisk,children:[" ","*"]})]})}));function Nu(e){return c("MuiInputLabel",e)}wo("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const Lu=no(Au,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${Ru.asterisk}`]:t.asterisk},t.root,n.formControl&&t.formControl,"small"===n.size&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,n.focused&&t.focused,t[n.variant]]}})(ba((({theme:e})=>({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%",variants:[{props:({ownerState:e})=>e.formControl,style:{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"}},{props:{size:"small"},style:{transform:"translate(0, 17px) scale(1)"}},{props:({ownerState:e})=>e.shrink,style:{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"}},{props:({ownerState:e})=>!e.disableAnimation,style:{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}},{props:{variant:"filled"},style:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"}},{props:{variant:"filled",size:"small"},style:{transform:"translate(12px, 13px) scale(1)"}},{props:({variant:e,ownerState:t})=>"filled"===e&&t.shrink,style:{userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"}},{props:({variant:e,ownerState:t,size:n})=>"filled"===e&&t.shrink&&"small"===n,style:{transform:"translate(12px, 4px) scale(0.75)"}},{props:{variant:"outlined"},style:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"}},{props:{variant:"outlined",size:"small"},style:{transform:"translate(14px, 9px) scale(1)"}},{props:({variant:e,ownerState:t})=>"outlined"===e&&t.shrink,style:{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}}]})))),$u=t.forwardRef((function(t,n){const r=oo({name:"MuiInputLabel",props:t}),{disableAnimation:o=!1,margin:a,shrink:l,variant:s,className:u,...c}=r,p=Hs();let f=l;void 0===f&&p&&(f=p.filled||p.focused||p.adornedStart);const m=Bs({props:r,muiFormControl:p,states:["size","variant","required","focused"]}),h={...r,disableAnimation:o,formControl:p,shrink:f,size:m.size,variant:m.variant,required:m.required,focused:m.focused},g=(e=>{const{classes:t,formControl:n,size:r,shrink:o,disableAnimation:a,variant:i,required:l}=e,s=d({root:["root",n&&"formControl",!a&&"animated",o&&"shrink",r&&"medium"!==r&&`size${wn(r)}`,i],asterisk:[l&&"asterisk"]},Nu,t);return{...t,...s}})(h);return(0,e.jsx)(Lu,{"data-shrink":f,ref:n,className:i(g.root,u),...c,ownerState:h,classes:g})})),_u=function(e,n){return t.isValidElement(e)&&-1!==n.indexOf(e.type.muiName??e.type?._payload?.value?.muiName)};function Iu(e){return c("MuiFormControl",e)}wo("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const ju=no("div",{name:"MuiFormControl",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`margin${wn(n.margin)}`],n.fullWidth&&t.fullWidth]}})({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top",variants:[{props:{margin:"normal"},style:{marginTop:16,marginBottom:8}},{props:{margin:"dense"},style:{marginTop:8,marginBottom:4}},{props:{fullWidth:!0},style:{width:"100%"}}]}),Fu=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiFormControl"}),{children:a,className:l,color:s="primary",component:u="div",disabled:c=!1,error:p=!1,focused:f,fullWidth:m=!1,hiddenLabel:h=!1,margin:g="none",required:y=!1,size:v="medium",variant:b="outlined",...w}=o,S={...o,color:s,component:u,disabled:c,error:p,fullWidth:m,hiddenLabel:h,margin:g,required:y,size:v,variant:b},x=(e=>{const{classes:t,margin:n,fullWidth:r}=e;return d({root:["root","none"!==n&&`margin${wn(n)}`,r&&"fullWidth"]},Iu,t)})(S),[k,C]=t.useState((()=>{let e=!1;return a&&t.Children.forEach(a,(t=>{if(!_u(t,["Input","Select"]))return;const n=_u(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)})),e})),[E,P]=t.useState((()=>{let e=!1;return a&&t.Children.forEach(a,(t=>{_u(t,["Input","Select"])&&(Qs(t.props,!0)||Qs(t.props.inputProps,!0))&&(e=!0)})),e})),[T,O]=t.useState(!1);c&&T&&O(!1);const R=void 0===f||c?T:f;let M;t.useRef(!1);const z=t.useCallback((()=>{P(!0)}),[]),A=t.useCallback((()=>{P(!1)}),[]),N=t.useMemo((()=>({adornedStart:k,setAdornedStart:C,color:s,disabled:c,error:p,filled:E,focused:R,fullWidth:m,hiddenLabel:h,size:v,onBlur:()=>{O(!1)},onFocus:()=>{O(!0)},onEmpty:A,onFilled:z,registerEffect:M,required:y,variant:b})),[k,s,c,p,E,R,m,h,M,A,z,y,v,b]);return(0,e.jsx)(Ws.Provider,{value:N,children:(0,e.jsx)(ju,{as:u,ownerState:S,className:i(x.root,l),ref:r,...w,children:a})})})),Du=Fu;function Bu(e){return c("MuiFormHelperText",e)}const Wu=wo("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var Hu;const Vu=no("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t[`size${wn(n.size)}`],n.contained&&t.contained,n.filled&&t.filled]}})(ba((({theme:e})=>({color:(e.vars||e).palette.text.secondary,...e.typography.caption,textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${Wu.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Wu.error}`]:{color:(e.vars||e).palette.error.main},variants:[{props:{size:"small"},style:{marginTop:4}},{props:({ownerState:e})=>e.contained,style:{marginLeft:14,marginRight:14}}]})))),Uu=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiFormHelperText"}),{children:o,className:a,component:l="p",disabled:s,error:u,filled:c,focused:p,margin:f,required:m,variant:h,...g}=r,y=Bs({props:r,muiFormControl:Hs(),states:["variant","size","disabled","error","filled","focused","required"]}),v={...r,component:l,contained:"filled"===y.variant||"outlined"===y.variant,variant:y.variant,size:y.size,disabled:y.disabled,error:y.error,filled:y.filled,focused:y.focused,required:y.required};delete v.ownerState;const b=(e=>{const{classes:t,contained:n,size:r,disabled:o,error:a,filled:i,focused:l,required:s}=e;return d({root:["root",o&&"disabled",a&&"error",r&&`size${wn(r)}`,n&&"contained",l&&"focused",i&&"filled",s&&"required"]},Bu,t)})(v);return(0,e.jsx)(Vu,{as:l,className:i(b.root,a),ref:n,...g,ownerState:v,children:" "===o?Hu||(Hu=(0,e.jsx)("span",{className:"notranslate","aria-hidden":!0,children:"​"})):o})}));function qu(e){return c("MuiNativeSelect",e)}const Ku=wo("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Gu=no("select")((({theme:e})=>({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":{borderRadius:0},[`&.${Ku.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(e.vars||e).palette.background.paper},variants:[{props:({ownerState:e})=>"filled"!==e.variant&&"outlined"!==e.variant,style:{"&&&":{paddingRight:24,minWidth:16}}},{props:{variant:"filled"},style:{"&&&":{paddingRight:32}}},{props:{variant:"outlined"},style:{borderRadius:(e.vars||e).shape.borderRadius,"&:focus":{borderRadius:(e.vars||e).shape.borderRadius},"&&&":{paddingRight:32}}}]}))),Qu=no(Gu,{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:to,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],n.error&&t.error,{[`&.${Ku.multiple}`]:t.multiple}]}})({}),Xu=no("svg")((({theme:e})=>({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(e.vars||e).palette.action.active,[`&.${Ku.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:({ownerState:e})=>e.open,style:{transform:"rotate(180deg)"}},{props:{variant:"filled"},style:{right:7}},{props:{variant:"outlined"},style:{right:7}}]}))),Yu=no(Xu,{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${wn(n.variant)}`],n.open&&t.iconOpen]}})({}),Zu=t.forwardRef((function(n,r){const{className:o,disabled:a,error:l,IconComponent:s,inputRef:u,variant:c="standard",...p}=n,f={...n,disabled:a,variant:c,error:l},m=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a,error:i}=e;return d({select:["select",n,r&&"disabled",o&&"multiple",i&&"error"],icon:["icon",`icon${wn(n)}`,a&&"iconOpen",r&&"disabled"]},qu,t)})(f);return(0,e.jsxs)(t.Fragment,{children:[(0,e.jsx)(Qu,{ownerState:f,className:i(m.select,o),disabled:a,ref:u||r,...p}),n.multiple?null:(0,e.jsx)(Yu,{as:s,ownerState:f,className:m.icon})]})}));function Ju(e){return c("MuiSelect",e)}const ec=wo("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var tc;const nc=no(Gu,{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${ec.select}`]:t.select},{[`&.${ec.select}`]:t[n.variant]},{[`&.${ec.error}`]:t.error},{[`&.${ec.multiple}`]:t.multiple}]}})({[`&.${ec.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),rc=no(Xu,{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${wn(n.variant)}`],n.open&&t.iconOpen]}})({}),oc=no("input",{shouldForwardProp:e=>eo(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput"})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function ac(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function ic(e){return null==e||"string"==typeof e&&!e.trim()}const lc=t.forwardRef((function(n,r){const{"aria-describedby":o,"aria-label":a,autoFocus:l,autoWidth:s,children:u,className:c,defaultOpen:f,defaultValue:m,disabled:h,displayEmpty:g,error:y=!1,IconComponent:v,inputRef:b,labelId:w,MenuProps:S={},multiple:x,name:k,onBlur:C,onChange:E,onClose:P,onFocus:T,onOpen:O,open:R,readOnly:M,renderValue:z,required:A,SelectDisplayProps:N={},tabIndex:L,type:$,value:_,variant:I="standard",...j}=n,[F,D]=Rl({controlled:_,default:m,name:"Select"}),[B,W]=Rl({controlled:R,default:f,name:"Select"}),H=t.useRef(null),V=t.useRef(null),[U,q]=t.useState(null),{current:K}=t.useRef(null!=R),[G,Q]=t.useState(),X=Po(r,b),Y=t.useCallback((e=>{V.current=e,e&&q(e)}),[]),Z=U?.parentNode;t.useImperativeHandle(X,(()=>({focus:()=>{V.current.focus()},node:H.current,value:F})),[F]),t.useEffect((()=>{f&&B&&U&&!K&&(Q(s?null:Z.clientWidth),V.current.focus())}),[U,s]),t.useEffect((()=>{l&&V.current.focus()}),[l]),t.useEffect((()=>{if(!w)return;const e=vo(V.current).getElementById(w);if(e){const t=()=>{getSelection().isCollapsed&&V.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[w]);const J=(e,t)=>{e?O&&O(t):P&&P(t),K||(Q(s?null:Z.clientWidth),W(e))},ee=t.Children.toArray(u),te=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(x){n=Array.isArray(F)?F.slice():[];const t=F.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),F!==n&&(D(n),E)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:k}}),E(o,e)}x||J(!1,t)}},ne=null!==U&&B;let re,oe;delete j["aria-invalid"];const ae=[];let ie=!1,le=!1;(Qs({value:F})||g)&&(z?re=z(F):ie=!0);const se=ee.map((e=>{if(!t.isValidElement(e))return null;let n;if(x){if(!Array.isArray(F))throw new Error(p(2));n=F.some((t=>ac(t,e.props.value))),n&&ie&&ae.push(e.props.children)}else n=ac(F,e.props.value),n&&ie&&(oe=e.props.children);return n&&(le=!0),t.cloneElement(e,{"aria-selected":n?"true":"false",onClick:te(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:n,value:void 0,"data-value":e.props.value})}));ie&&(re=x?0===ae.length?null:ae.reduce(((e,t,n)=>(e.push(t),n<ae.length-1&&e.push(", "),e)),[]):oe);let ue,ce=G;!s&&K&&U&&(ce=Z.clientWidth),ue=void 0!==L?L:h?null:0;const de=N.id||(k?`mui-component-select-${k}`:void 0),pe={...n,variant:I,value:F,open:ne,error:y},fe=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a,error:i}=e;return d({select:["select",n,r&&"disabled",o&&"multiple",i&&"error"],icon:["icon",`icon${wn(n)}`,a&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]},Ju,t)})(pe),me={...S.PaperProps,...S.slotProps?.paper},he=Tl();return(0,e.jsxs)(t.Fragment,{children:[(0,e.jsx)(nc,{as:"div",ref:Y,tabIndex:ue,role:"combobox","aria-controls":ne?he:void 0,"aria-disabled":h?"true":void 0,"aria-expanded":ne?"true":"false","aria-haspopup":"listbox","aria-label":a,"aria-labelledby":[w,de].filter(Boolean).join(" ")||void 0,"aria-describedby":o,"aria-required":A?"true":void 0,"aria-invalid":y?"true":void 0,onKeyDown:e=>{M||[" ","ArrowUp","ArrowDown","Enter"].includes(e.key)&&(e.preventDefault(),J(!0,e))},onMouseDown:h||M?null:e=>{0===e.button&&(e.preventDefault(),V.current.focus(),J(!0,e))},onBlur:e=>{!ne&&C&&(Object.defineProperty(e,"target",{writable:!0,value:{value:F,name:k}}),C(e))},onFocus:T,...N,ownerState:pe,className:i(N.className,fe.select,c),id:de,children:ic(re)?tc||(tc=(0,e.jsx)("span",{className:"notranslate","aria-hidden":!0,children:"​"})):re}),(0,e.jsx)(oc,{"aria-invalid":y,value:Array.isArray(F)?F.join(","):F,name:k,ref:H,"aria-hidden":!0,onChange:e=>{const t=ee.find((t=>t.props.value===e.target.value));void 0!==t&&(D(t.props.value),E&&E(e,t))},tabIndex:-1,disabled:h,className:fe.nativeInput,autoFocus:l,required:A,...j,ownerState:pe}),(0,e.jsx)(rc,{as:v,className:fe.icon,ownerState:pe}),(0,e.jsx)(ai,{id:`menu-${k||""}`,anchorEl:Z,open:ne,onClose:e=>{J(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"},...S,slotProps:{...S.slotProps,list:{"aria-labelledby":w,role:"listbox","aria-multiselectable":x?"true":void 0,disableListWrap:!0,id:he,...S.MenuListProps},paper:{...me,style:{minWidth:ce,...null!=me?me.style:null}}},children:se})]})})),sc=lc;function uc(e){return c("MuiSvgIcon",e)}wo("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const cc=no("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${wn(n.color)}`],t[`fontSize${wn(n.fontSize)}`]]}})(ba((({theme:e})=>({userSelect:"none",width:"1em",height:"1em",display:"inline-block",flexShrink:0,transition:e.transitions?.create?.("fill",{duration:(e.vars??e).transitions?.duration?.shorter}),variants:[{props:e=>!e.hasSvgAsChild,style:{fill:"currentColor"}},{props:{fontSize:"inherit"},style:{fontSize:"inherit"}},{props:{fontSize:"small"},style:{fontSize:e.typography?.pxToRem?.(20)||"1.25rem"}},{props:{fontSize:"medium"},style:{fontSize:e.typography?.pxToRem?.(24)||"1.5rem"}},{props:{fontSize:"large"},style:{fontSize:e.typography?.pxToRem?.(35)||"2.1875rem"}},...Object.entries((e.vars??e).palette).filter((([,e])=>e&&e.main)).map((([t])=>({props:{color:t},style:{color:(e.vars??e).palette?.[t]?.main}}))),{props:{color:"action"},style:{color:(e.vars??e).palette?.action?.active}},{props:{color:"disabled"},style:{color:(e.vars??e).palette?.action?.disabled}},{props:{color:"inherit"},style:{color:void 0}}]})))),dc=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiSvgIcon"}),{children:a,className:l,color:s="inherit",component:u="svg",fontSize:c="medium",htmlColor:p,inheritViewBox:f=!1,titleAccess:m,viewBox:h="0 0 24 24",...g}=o,y=t.isValidElement(a)&&"svg"===a.type,v={...o,color:s,component:u,fontSize:c,instanceFontSize:n.fontSize,inheritViewBox:f,viewBox:h,hasSvgAsChild:y},b={};f||(b.viewBox=h);const w=(e=>{const{color:t,fontSize:n,classes:r}=e;return d({root:["root","inherit"!==t&&`color${wn(t)}`,`fontSize${wn(n)}`]},uc,r)})(v);return(0,e.jsxs)(cc,{as:u,className:i(w.root,l),focusable:"false",color:p,"aria-hidden":!m||void 0,role:m?"img":void 0,ref:r,...b,...g,...y&&a.props,ownerState:v,children:[y?a.props.children:a,m?(0,e.jsx)("title",{children:m}):null]})}));dc.muiName="SvgIcon";const pc=dc;function fc(n,r){function o(t,r){return(0,e.jsx)(pc,{"data-testid":void 0,ref:r,...t,children:n})}return o.muiName=pc.muiName,t.memo(t.forwardRef(o))}const mc=fc((0,e.jsx)("path",{d:"M7 10l5 5 5-5z"})),hc={name:"MuiSelect",slot:"Root",shouldForwardProp:e=>to(e)&&"variant"!==e},gc=no(du,hc)(""),yc=no(Tu,hc)(""),vc=no(yu,hc)(""),bc=t.forwardRef((function(n,r){const o=oo({name:"MuiSelect",props:n}),{autoWidth:a=!1,children:l,classes:s={},className:u,defaultOpen:c=!1,displayEmpty:p=!1,IconComponent:f=mc,id:m,input:h,inputProps:g,label:y,labelId:b,MenuProps:w,multiple:S=!1,native:x=!1,onClose:k,onOpen:C,open:E,renderValue:P,SelectDisplayProps:T,variant:O="outlined",...R}=o,M=x?Zu:sc,z=Bs({props:o,muiFormControl:Hs(),states:["variant","error"]}),A=z.variant||O,N={...o,variant:A,classes:s},L=(e=>{const{classes:t}=e,n=d({root:["root"]},Ju,t);return{...t,...n}})(N),{root:$,..._}=L,I=h||{standard:(0,e.jsx)(gc,{ownerState:N}),outlined:(0,e.jsx)(yc,{label:y,ownerState:N}),filled:(0,e.jsx)(vc,{ownerState:N})}[A],j=Po(r,Vo(I));return(0,e.jsx)(t.Fragment,{children:t.cloneElement(I,{inputComponent:M,inputProps:{children:l,error:z.error,IconComponent:f,variant:A,type:void 0,multiple:S,...x?{id:m}:{autoWidth:a,defaultOpen:c,displayEmpty:p,labelId:b,MenuProps:w,onClose:k,onOpen:C,open:E,renderValue:P,SelectDisplayProps:{id:m,...T}},...g,classes:g?v(_,g.classes):_,...h?h.props.inputProps:{}},...(S&&x||p)&&"outlined"===A?{notched:!0}:{},ref:j,className:i(I.props.className,u,L.root),...!h&&{variant:A},...R})})}));bc.muiName="Select";const wc=bc;function Sc(e){return c("MuiTextField",e)}wo("MuiTextField",["root"]);const xc={standard:du,filled:yu,outlined:Tu},kc=no(Du,{name:"MuiTextField",slot:"Root"})({}),Cc=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiTextField"}),{autoComplete:o,autoFocus:a=!1,children:l,className:s,color:u="primary",defaultValue:c,disabled:p=!1,error:f=!1,FormHelperTextProps:m,fullWidth:h=!1,helperText:g,id:y,InputLabelProps:v,inputProps:b,InputProps:w,inputRef:S,label:x,maxRows:k,minRows:C,multiline:E=!1,name:P,onBlur:T,onChange:O,onFocus:R,placeholder:M,required:z=!1,rows:A,select:N=!1,SelectProps:L,slots:$={},slotProps:_={},type:I,value:j,variant:F="outlined",...D}=r,B={...r,autoFocus:a,color:u,disabled:p,error:f,fullWidth:h,multiline:E,required:z,select:N,variant:F},W=(e=>{const{classes:t}=e;return d({root:["root"]},Sc,t)})(B),H=Tl(y),V=g&&H?`${H}-helper-text`:void 0,U=x&&H?`${H}-label`:void 0,q=xc[F],K={slots:$,slotProps:{input:w,inputLabel:v,htmlInput:b,formHelperText:m,select:L,..._}},G={},Q=K.slotProps.inputLabel;"outlined"===F&&(Q&&void 0!==Q.shrink&&(G.notched=Q.shrink),G.label=x),N&&(L&&L.native||(G.id=void 0),G["aria-describedby"]=void 0);const[X,Y]=wa("root",{elementType:kc,shouldForwardComponentProp:!0,externalForwardedProps:{...K,...D},ownerState:B,className:i(W.root,s),ref:n,additionalProps:{disabled:p,error:f,fullWidth:h,required:z,color:u,variant:F}}),[Z,J]=wa("input",{elementType:q,externalForwardedProps:K,additionalProps:G,ownerState:B}),[ee,te]=wa("inputLabel",{elementType:$u,externalForwardedProps:K,ownerState:B}),[ne,re]=wa("htmlInput",{elementType:"input",externalForwardedProps:K,ownerState:B}),[oe,ae]=wa("formHelperText",{elementType:Uu,externalForwardedProps:K,ownerState:B}),[ie,le]=wa("select",{elementType:wc,externalForwardedProps:K,ownerState:B}),se=(0,e.jsx)(Z,{"aria-describedby":V,autoComplete:o,autoFocus:a,defaultValue:c,fullWidth:h,multiline:E,name:P,rows:A,maxRows:k,minRows:C,type:I,value:j,id:H,inputRef:S,onBlur:T,onChange:O,onFocus:R,placeholder:M,inputProps:re,slots:{input:$.htmlInput?ne:void 0},...J});return(0,e.jsxs)(X,{...Y,children:[null!=x&&""!==x&&(0,e.jsx)(ee,{htmlFor:H,id:U,...te,children:x}),N?(0,e.jsx)(ie,{"aria-describedby":V,id:H,labelId:U,value:j,input:se,...le,children:l}):se,g&&(0,e.jsx)(oe,{id:V,...ae,children:g})]})})),Ec=wo("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),Pc=wo("MuiListItemIcon",["root","alignItemsFlexStart"]);function Tc(e){return c("MuiListItemText",e)}const Oc=wo("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);function Rc(e){return c("MuiMenuItem",e)}const Mc=wo("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),zc=no(ds,{shouldForwardProp:e=>to(e)||"classes"===e,name:"MuiMenuItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})(ba((({theme:e})=>({...e.typography.body1,display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap","&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Mc.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Tn(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Mc.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Tn(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Mc.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Tn(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Tn(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Mc.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Mc.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`& + .${Ec.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Ec.inset}`]:{marginLeft:52},[`& .${Oc.root}`]:{marginTop:0,marginBottom:0},[`& .${Oc.inset}`]:{paddingLeft:36},[`& .${Pc.root}`]:{minWidth:36},variants:[{props:({ownerState:e})=>!e.disableGutters,style:{paddingLeft:16,paddingRight:16}},{props:({ownerState:e})=>e.divider,style:{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"}},{props:({ownerState:e})=>!e.dense,style:{[e.breakpoints.up("sm")]:{minHeight:"auto"}}},{props:({ownerState:e})=>e.dense,style:{minHeight:32,paddingTop:4,paddingBottom:4,...e.typography.body2,[`& .${Pc.root} svg`]:{fontSize:"1.25rem"}}}]})))),Ac=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiMenuItem"}),{autoFocus:a=!1,component:l="li",dense:s=!1,divider:u=!1,disableGutters:c=!1,focusVisibleClassName:p,role:f="menuitem",tabIndex:m,className:h,...g}=o,y=t.useContext(bo),v=t.useMemo((()=>({dense:s||y.dense||!1,disableGutters:c})),[y.dense,s,c]),b=t.useRef(null);Oo((()=>{a&&b.current&&b.current.focus()}),[a]);const w={...o,dense:v.dense,divider:u,disableGutters:c},S=(e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:a,classes:i}=e,l=d({root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",a&&"selected"]},Rc,i);return{...i,...l}})(o),x=Po(b,r);let k;return o.disabled||(k=void 0!==m?m:-1),(0,e.jsx)(bo.Provider,{value:v,children:(0,e.jsx)(zc,{ref:x,role:f,tabIndex:k,component:l,focusVisibleClassName:i(S.focusVisible,p),className:i(S.root,h),...g,ownerState:w,classes:S})})}));function Nc(e){return c("MuiTypography",e)}const Lc=wo("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]),$c={primary:!0,secondary:!0,error:!0,info:!0,success:!0,warning:!0,textPrimary:!0,textSecondary:!0,textDisabled:!0},_c=Vs,Ic=no("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${wn(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})(ba((({theme:e})=>({margin:0,variants:[{props:{variant:"inherit"},style:{font:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}},...Object.entries(e.typography).filter((([e,t])=>"inherit"!==e&&t&&"object"==typeof t)).map((([e,t])=>({props:{variant:e},style:t}))),...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}}))),...Object.entries(e.palette?.text||{}).filter((([,e])=>"string"==typeof e)).map((([t])=>({props:{color:`text${wn(t)}`},style:{color:(e.vars||e).palette.text[t]}}))),{props:({ownerState:e})=>"inherit"!==e.align,style:{textAlign:"var(--Typography-textAlign)"}},{props:({ownerState:e})=>e.noWrap,style:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},{props:({ownerState:e})=>e.gutterBottom,style:{marginBottom:"0.35em"}},{props:({ownerState:e})=>e.paragraph,style:{marginBottom:16}}]})))),jc={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Fc=t.forwardRef((function(t,n){const{color:r,...o}=oo({props:t,name:"MuiTypography"}),a=_c({...o,...!$c[r]&&{color:r}}),{align:l="inherit",className:s,component:u,gutterBottom:c=!1,noWrap:p=!1,paragraph:f=!1,variant:m="body1",variantMapping:h=jc,...g}=a,y={...a,align:l,color:r,className:s,component:u,gutterBottom:c,noWrap:p,paragraph:f,variant:m,variantMapping:h},v=u||(f?"p":h[m]||jc[m])||"span",b=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:o,variant:a,classes:i}=e;return d({root:["root",a,"inherit"!==e.align&&`align${wn(t)}`,n&&"gutterBottom",r&&"noWrap",o&&"paragraph"]},Nc,i)})(y);return(0,e.jsx)(Ic,{as:v,ref:n,className:i(b.root,s),...g,ownerState:y,style:{..."inherit"!==l&&{"--Typography-textAlign":l},...g.style}})})),Dc=no("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${Oc.primary}`]:t.primary},{[`& .${Oc.secondary}`]:t.secondary},t.root,n.inset&&t.inset,n.primary&&n.secondary&&t.multiline,n.dense&&t.dense]}})({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4,[`.${Lc.root}:where(& .${Oc.primary})`]:{display:"block"},[`.${Lc.root}:where(& .${Oc.secondary})`]:{display:"block"},variants:[{props:({ownerState:e})=>e.primary&&e.secondary,style:{marginTop:6,marginBottom:6}},{props:({ownerState:e})=>e.inset,style:{paddingLeft:56}}]}),Bc=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiListItemText"}),{children:a,className:l,disableTypography:s=!1,inset:u=!1,primary:c,primaryTypographyProps:p,secondary:f,secondaryTypographyProps:m,slots:h={},slotProps:g={},...y}=o,{dense:v}=t.useContext(bo);let b=null!=c?c:a,w=f;const S={...o,disableTypography:s,inset:u,primary:!!b,secondary:!!w,dense:v},x=(e=>{const{classes:t,inset:n,primary:r,secondary:o,dense:a}=e;return d({root:["root",n&&"inset",a&&"dense",r&&o&&"multiline"],primary:["primary"],secondary:["secondary"]},Tc,t)})(S),k={slots:h,slotProps:{primary:p,secondary:m,...g}},[C,E]=wa("root",{className:i(x.root,l),elementType:Dc,externalForwardedProps:{...k,...y},ownerState:S,ref:r}),[P,T]=wa("primary",{className:x.primary,elementType:Fc,externalForwardedProps:k,ownerState:S}),[O,R]=wa("secondary",{className:x.secondary,elementType:Fc,externalForwardedProps:k,ownerState:S});return null==b||b.type===Fc||s||(b=(0,e.jsx)(P,{variant:v?"body2":"body1",component:T?.variant?void 0:"span",...T,children:b})),null==w||w.type===Fc||s||(w=(0,e.jsx)(O,{variant:"body2",color:"textSecondary",...R,children:w})),(0,e.jsxs)(C,{...E,children:[b,w]})})),Wc=wo("MuiBox",["root"]),Hc=Yr(),Vc=function(n={}){const{themeId:r,defaultTheme:o,defaultClassName:a="MuiBox-root",generateClassName:l}=n,s=on("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(be);return t.forwardRef((function(t,n){const u=Qt(o),{className:c,component:d="div",...p}=Vs(t);return(0,e.jsx)(s,{as:d,ref:n,className:i(c,l?l(a):a),theme:r&&u[r]||u,...p})}))}({themeId:Jr,defaultTheme:Hc,defaultClassName:Wc.root,generateClassName:s.generate}),Uc=Vc;function qc(e){return c("MuiIconButton",e)}const Kc=wo("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge","loading","loadingIndicator","loadingWrapper"]),Gc=no(ds,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.loading&&t.loading,"default"!==n.color&&t[`color${wn(n.color)}`],n.edge&&t[`edge${wn(n.edge)}`],t[`size${wn(n.size)}`]]}})(ba((({theme:e})=>({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),variants:[{props:e=>!e.disableRipple,style:{"--IconButton-hoverBg":e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:Tn(e.palette.action.active,e.palette.action.hoverOpacity),"&:hover":{backgroundColor:"var(--IconButton-hoverBg)","@media (hover: none)":{backgroundColor:"transparent"}}}},{props:{edge:"start"},style:{marginLeft:-12}},{props:{edge:"start",size:"small"},style:{marginLeft:-3}},{props:{edge:"end"},style:{marginRight:-12}},{props:{edge:"end",size:"small"},style:{marginRight:-3}}]}))),ba((({theme:e})=>({variants:[{props:{color:"inherit"},style:{color:"inherit"}},...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}}))),...Object.entries(e.palette).filter(ps()).map((([t])=>({props:{color:t},style:{"--IconButton-hoverBg":e.vars?`rgba(${(e.vars||e).palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Tn((e.vars||e).palette[t].main,e.palette.action.hoverOpacity)}}))),{props:{size:"small"},style:{padding:5,fontSize:e.typography.pxToRem(18)}},{props:{size:"large"},style:{padding:12,fontSize:e.typography.pxToRem(28)}}],[`&.${Kc.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled},[`&.${Kc.loading}`]:{color:"transparent"}})))),Qc=no("span",{name:"MuiIconButton",slot:"LoadingIndicator"})((({theme:e})=>({display:"none",position:"absolute",visibility:"visible",top:"50%",left:"50%",transform:"translate(-50%, -50%)",color:(e.vars||e).palette.action.disabled,variants:[{props:{loading:!0},style:{display:"flex"}}]}))),Xc=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiIconButton"}),{edge:o=!1,children:a,className:l,color:s="default",disabled:u=!1,disableFocusRipple:c=!1,size:p="medium",id:f,loading:m=null,loadingIndicator:h,...g}=r,y=Ol(f),v=h??(0,e.jsx)(Ss,{"aria-labelledby":y,color:"inherit",size:16}),b={...r,edge:o,color:s,disabled:u,disableFocusRipple:c,loading:m,loadingIndicator:v,size:p},w=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a,loading:i}=e;return d({root:["root",i&&"loading",n&&"disabled","default"!==r&&`color${wn(r)}`,o&&`edge${wn(o)}`,`size${wn(a)}`],loadingIndicator:["loadingIndicator"],loadingWrapper:["loadingWrapper"]},qc,t)})(b);return(0,e.jsxs)(Gc,{id:m?y:f,className:i(w.root,l),centerRipple:!0,focusRipple:!c,disabled:u||m,ref:n,...g,ownerState:b,children:["boolean"==typeof m&&(0,e.jsx)("span",{className:w.loadingWrapper,style:{display:"contents"},children:(0,e.jsx)(Qc,{className:w.loadingIndicator,ownerState:b,children:m&&v})}),a]})})),Yc=fc((0,e.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z"})),Zc=function(t){var n=t.items,r=t.searchValue,o=t.onItemSelect,a=t.onItemDelete,i=t.onSearchChange,l=t.onKeyDown,s=n.filter((function(e){return e.text.toLowerCase().includes(r.toLowerCase())}));return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("div",{style:{padding:"8px 16px"},children:(0,e.jsx)(Cc,{fullWidth:!0,size:"small",placeholder:"Search presets...",value:r,onChange:i,onKeyDown:l,autoFocus:!0,variant:"outlined"})}),0===s.length?(0,e.jsx)(Ac,{disabled:!0,children:"No matching presets"}):s.map((function(t){return(0,e.jsxs)(Ac,{onClick:function(){return o(t)},sx:{display:"flex",justifyContent:"space-between"},children:[(0,e.jsx)(Bc,{primary:t.text}),(0,e.jsx)(Uc,{children:(0,e.jsx)(Xc,{edge:"end",size:"small",onClick:function(e){e.stopPropagation(),a(t)},children:(0,e.jsx)(Yc,{fontSize:"small"})})})]},t.value)}))]})},Jc=function(n){var r=n.items,o=n.onItemSelect,a=n.onItemDelete,i=function(e){var n=t.useState(null),r=n[0],o=n[1],a=t.useState(""),i=a[0],l=a[1],s=function(){o(null),l("")};return{anchorEl:r,searchValue:i,isOpen:Boolean(r),handleClick:function(){var e=document.activeElement;o(e)},handleClose:s,handleItemSelect:function(t){e(t),s()},handleSearchChange:function(e){l(e.target.value)},handleKeyDown:function(e){"Escape"===e.key&&s()}}}(o),l=i.anchorEl,s=i.searchValue,u=i.isOpen,c=i.handleClick,d=i.handleClose,p=i.handleItemSelect,f=i.handleSearchChange,m=i.handleKeyDown;return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)($s,{text:"&Presets",tooltip:"Manage preset groups",onClick:c}),(0,e.jsx)(ai,{anchorEl:l,open:u,onClose:d,slotProps:{paper:{style:{maxHeight:300,width:250}}},children:(0,e.jsx)(Zc,{items:r,searchValue:s,onItemSelect:p,onItemDelete:a,onSearchChange:f,onKeyDown:m})})]})};var ed,td=(ed=function(e,t){return ed=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},ed(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}ed(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),nd=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))},rd=function(e,t){var n,r,o,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},i=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return i.next=l(0),i.throw=l(1),i.return=l(2),"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},od=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},ad=function(){function e(e,t){void 0===t&&(t={}),this.element=null,this.options={width:t.width||0,height:t.height||0,top:t.top||0,left:t.left||0,target:e||null,scrollBarOffset:8}}return e.prototype.show=function(){if(this.element||(this.element=document.createElement("div"),this.element.className="cs-overlay",document.body.appendChild(this.element)),this.options.target){var e=this.options.target.getBoundingClientRect();this.element.style.width="".concat(e.width-this.options.scrollBarOffset,"px"),this.element.style.height="".concat(e.height,"px"),this.element.style.top="".concat(e.top,"px"),this.element.style.left="".concat(e.left,"px")}else this.element.style.width="".concat(this.options.width,"px"),this.element.style.height="".concat(this.options.height,"px"),this.element.style.top="".concat(this.options.top,"px"),this.element.style.left="".concat(this.options.left,"px");this.element.style.display="block"},e.prototype.hide=function(){this.element&&(this.element.style.display="none")},e.createInstance=function(t){return void 0===t&&(t={}),e.instance=new e(void 0,t),e.instance},e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.instance=null,e}(),id=function(){function e(e,t){this.el=e,this.calendar=t}return e.prototype.isAttached=function(){return document.body.contains(this.el)},e.prototype.getScrollContainer=function(){return document.querySelector('div[role="list"]')},e.prototype.calculateScrollPosition=function(){return nd(this,void 0,void 0,(function(){var e,t,n;return rd(this,(function(r){return(e=this.getScrollContainer())&&this.isAttached()?(t=this.el.getBoundingClientRect(),n=e.getBoundingClientRect(),[2,t.top-n.top+e.scrollTop]):[2,0]}))}))},e.prototype.scrollTo=function(){return nd(this,void 0,void 0,(function(){var e,t;return rd(this,(function(n){switch(n.label){case 0:return(e=this.getScrollContainer())&&this.isAttached()?[4,this.calculateScrollPosition()]:[2];case 1:return t=n.sent(),[4,pd(e,t)];case 2:return n.sent(),[2]}}))}))},e}(),ld=function(){function e(e){this.id="",this.name="",this.dom=null,this.scrollPosition=0,e&&this.setEl(e)}return e.prototype.setEl=function(e){this.dom=new id(e,this);var t=e.querySelector('input[type="checkbox"]');t&&(this.id=t.value);var n=e.querySelector("span");n&&(this.name=n.textContent||"")},Object.defineProperty(e.prototype,"attached",{get:function(){return null!==this.dom&&this.dom.isAttached()},enumerable:!1,configurable:!0}),e.prototype.getEl=function(){var e;return(null===(e=this.dom)||void 0===e?void 0:e.el)||null},e.prototype.saveScrollPosition=function(){return nd(this,void 0,void 0,(function(){var e;return rd(this,(function(t){switch(t.label){case 0:return this.dom?(e=this,[4,this.dom.calculateScrollPosition()]):[3,2];case 1:e.scrollPosition=t.sent(),t.label=2;case 2:return[2]}}))}))},e.prototype.isChecked=function(){var e;if(!(null===(e=this.dom)||void 0===e?void 0:e.el))return!1;var t=this.dom.el.querySelector('input[type="checkbox"]');return!!t&&t.checked},e.prototype.toggle=function(){var e;if(null===(e=this.dom)||void 0===e?void 0:e.el){var t=this.dom.el.querySelector('input[type="checkbox"]');t&&t.click()}},e.prototype.enable=function(){var e;!this.isChecked()&&(null===(e=this.dom)||void 0===e?void 0:e.el)&&this.toggle()},e.prototype.disable=function(){var e;this.isChecked()&&(null===(e=this.dom)||void 0===e?void 0:e.el)&&this.toggle()},e.create=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new(e.bind.apply(e,od([void 0],t,!1)))},e}(),sd=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return td(t,e),t.prototype.initialize=function(){return nd(this,void 0,void 0,(function(){return rd(this,(function(e){return[2,this]}))}))},t.prototype.push=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.push.apply(this,t)},t.prototype.get=function(e){return this.find((function(t){return t.id===e}))},t.prototype.refreshVisibleCalendarDOMs=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=e.length>0?e:this,r=Array.from(document.querySelectorAll("div[role='list'] li[role='listitem']")),o=0,a=n;o<a.length;o++){var i=a[o];if(!i.attached)for(var l=0,s=r;l<s.length;l++){var u=s[l],c=u.querySelector('input[type="checkbox"]');if(c&&c.value===i.id){i.setEl(u);break}}}return n},t.prototype.enabled=function(){return this.filter((function(e){return e.isChecked()}))},t.prototype.disabled=function(){return this.filter((function(e){return!e.isChecked()}))},t.prototype.ensureValidDOM=function(e){return nd(this,arguments,void 0,(function(e,t){return void 0===t&&(t={restoreScroll:!0}),rd(this,(function(n){return e.attached?[2,e]:[2,this._ensureValidDOM(e,t)]}))}))},t.prototype._ensureValidDOM=function(e){return nd(this,arguments,void 0,(function(e,n){var r,o,a,i=this;return void 0===n&&(n={restoreScroll:!0}),rd(this,(function(l){switch(l.label){case 0:if(this.refreshVisibleCalendarDOMs(),e.attached)return[3,4];if(!(r=t.getScrollContainer()))return[2,e];(o=ad.createInstance({target:r})).show(),l.label=1;case 1:return l.trys.push([1,,3,4]),[4,cd(r,{scrollIncrement:100},(function(){return i.refreshVisibleCalendarDOMs(e),e.attached}))];case 2:return l.sent(),[3,4];case 3:return o.hide(),[7];case 4:return e.attached?[3,5]:(console.warn("Could not find calendar in visible list:",e.id,e.name),[3,7]);case 5:return n.restoreScroll&&e.scrollPosition?[4,null===(a=e.dom)||void 0===a?void 0:a.scrollTo()]:[3,7];case 6:l.sent(),l.label=7;case 7:return[2,e]}}))}))},t.prototype.toggleAll=function(e){return nd(this,arguments,void 0,(function(e,t){var n,r,o;return void 0===t&&(t={restoreScroll:!0}),rd(this,(function(a){switch(a.label){case 0:n=0,r=e,a.label=1;case 1:return n<r.length?(o=r[n],[4,this.toggleSingle(o,t)]):[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},t.prototype.toggleSingle=function(e){return nd(this,arguments,void 0,(function(e,t){return void 0===t&&(t={restoreScroll:!0}),rd(this,(function(n){switch(n.label){case 0:return[4,this.ensureValidDOM(e,t)];case 1:return n.sent(),e.attached&&e.toggle(),[2,e]}}))}))},t.prototype.enable=function(e){return nd(this,void 0,void 0,(function(){var t,n,r,o;return rd(this,(function(a){switch(a.label){case 0:t=e?this.filter(e):this.slice(),n=0,r=t,a.label=1;case 1:return n<r.length?(o=r[n],[4,this.ensureValidDOM(o)]):[3,4];case 2:a.sent(),o.attached&&o.enable(),a.label=3;case 3:return n++,[3,1];case 4:return[2,t]}}))}))},t.prototype.disable=function(e){return nd(this,void 0,void 0,(function(){var t,n,r,o;return rd(this,(function(a){switch(a.label){case 0:t=e?this.filter(e):this.slice(),n=0,r=t,a.label=1;case 1:return n<r.length?(o=r[n],[4,this.ensureValidDOM(o)]):[3,4];case 2:a.sent(),o.attached&&o.disable(),a.label=3;case 3:return n++,[3,1];case 4:return[2,t]}}))}))},t.prototype.toggle=function(e){return nd(this,void 0,void 0,(function(){var t,n,r,o;return rd(this,(function(a){switch(a.label){case 0:t=e?this.filter(e):this.slice(),n=0,r=t,a.label=1;case 1:return n<r.length?(o=r[n],[4,this.toggleSingle(o)]):[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2,t]}}))}))},t.prototype.toggleById=function(e,t){return nd(this,void 0,void 0,(function(){var n;return rd(this,(function(r){return n=this.filter((function(t){return e.includes(t.id)})),[2,this.toggleAll(n,t)]}))}))},t.prototype.discoverCalendarScrollPositions=function(){return nd(this,void 0,void 0,(function(){return rd(this,(function(e){switch(e.label){case 0:return[4,t.discoverCalendarScrollPositions(this)];case 1:return e.sent(),[2,this]}}))}))},t.getScrollContainer=function(){return document.querySelector('div[role="list"]')},t.discoverCalendarScrollPositions=function(e){return nd(this,arguments,void 0,(function(e,t){var n,r,o;return void 0===t&&(t={}),rd(this,(function(t){switch(t.label){case 0:n=0,r=e,t.label=1;case 1:return n<r.length?(o=r[n]).attached?[4,o.saveScrollPosition()]:[3,3]:[3,4];case 2:t.sent(),t.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},t.getInstance=function(){return nd(this,void 0,void 0,(function(){var e,n,r,o,a,i;return rd(this,(function(l){switch(l.label){case 0:for(e=Array.from(document.querySelectorAll("div[role='list'] li[role='listitem']")),n=new t,r=0,o=e;r<o.length;r++)a=o[r],i=new ld(a),n.push(i);return[4,n.discoverCalendarScrollPositions()];case 1:return l.sent(),[2,n]}}))}))},t}(Array),ud={__exclude_re:/^(saved_|__)/,calendars:null,groups:{},setGroups:function(e){ud.groups=e,ud._updated()},exportGroups:function(e,t){void 0===e&&(e=!1),void 0===t&&(t=null);var n=t||JSON.parse(JSON.stringify(ud.groups));if(!e)for(var r in n)ud.__exclude_re.test(r)&&delete n[r];return n},_updated:function(){"function"==typeof ud.onGroupsChange&&ud.onGroupsChange()},isCalendarDrawerShown:function(){var e=document.querySelector(".drawer");return!!e&&"none"!==getComputedStyle(e).display},setCalendarDrawerShown:function(){return nd(this,arguments,void 0,(function(e){var t,n;return void 0===e&&(e=!0),rd(this,(function(r){switch(r.label){case 0:return t=ud.isCalendarDrawerShown(),!e||t?[3,3]:(n=document.querySelector('button[aria-label="Show side panel"]'))?(n.click(),[4,dd(500)]):[3,2];case 1:r.sent(),r.label=2;case 2:return[3,5];case 3:return e||!t?[3,5]:(n=document.querySelector('button[aria-label="Hide side panel"]'))?(n.click(),[4,dd(500)]):[3,5];case 4:r.sent(),r.label=5;case 5:return[2,t]}}))}))},getVisibleCalendarsElements:function(){return Array.from(document.querySelectorAll('div[role="list"] li[role="listitem"]'))},getVisibleCalendars:function(){return ud.getVisibleCalendarsElements().map(ld.create)},getCalendarsForGroupFilter:function(e){var t=ud.groups[e.toLowerCase()];return t?function(e){return t.indexOf(e.id)>=0||t.indexOf(e.name)>=0}:(console.error("No calendar group found with name:",e),function(){return!1})},getCalendarsNotInGroupFilter:function(e){var t=ud.groups[e.toLowerCase()];return t?function(e){return t.indexOf(e.id)<0&&t.indexOf(e.name)<0}:(console.error("No calendar group found with name:",e),function(){return!1})},enableGroup:function(e){return nd(this,void 0,void 0,(function(){return rd(this,(function(t){return[2,ud.calendars.enable(ud.getCalendarsForGroupFilter(e))]}))}))},disableNonGroup:function(e){return nd(this,void 0,void 0,(function(){return rd(this,(function(t){return[2,ud.calendars.disable(ud.getCalendarsNotInGroupFilter(e))]}))}))},disableGroup:function(e){return nd(this,void 0,void 0,(function(){return rd(this,(function(t){return[2,ud.calendars.disable(ud.getCalendarsForGroupFilter(e))]}))}))},deleteGroup:function(e){var t=ud.groups=ud.groups||{};t.__last_saved=t.__last_saved||[],console.log("deleting calendar group:",e,"=>",t[e]),t.__last_saved=t.__last_saved.filter((function(t){return t!==e}));var n=t[e];return delete t[e],ud._updated(),n},operationsStatus:{current:[],state:{}},performOperation:function(e,t){return nd(this,void 0,void 0,(function(){var n,r,o;return rd(this,(function(a){switch(a.label){case 0:return n=ud.operationsStatus,r=0===n.current.length,n.current.push(t||"unnamed operation"),r?(o=n.state,[4,ud.setCalendarDrawerShown(!0)]):[3,2];case 1:o.drawerShown=a.sent(),a.label=2;case 2:return a.trys.push([2,,4,7]),[4,e()];case 3:return[2,a.sent()];case 4:return n.current.pop(),r?n.state.drawerShown?[3,6]:[4,ud.setCalendarDrawerShown(!1)]:[3,6];case 5:a.sent(),a.label=6;case 6:return[7];case 7:return[2]}}))}))},showGroup:function(e){return nd(this,void 0,void 0,(function(){var t=this;return rd(this,(function(n){switch(n.label){case 0:return[4,ud.performOperation((function(){return nd(t,void 0,void 0,(function(){return rd(this,(function(t){switch(t.label){case 0:return[4,ud.enableGroup(e)];case 1:return t.sent(),[4,ud.disableNonGroup(e)];case 2:return t.sent(),[2]}}))}))}),"showGroup: ".concat(e))];case 1:return n.sent(),[2]}}))}))},enableCalendar:function(e){return nd(this,void 0,void 0,(function(){var t=this;return rd(this,(function(n){switch(n.label){case 0:return[4,ud.performOperation((function(){return nd(t,void 0,void 0,(function(){return rd(this,(function(t){switch(t.label){case 0:return[4,ud.calendars.enable((function(t){return t.name===e}))];case 1:return t.sent(),[2]}}))}))}),"enableCalendar: ".concat(e))];case 1:return n.sent(),[2]}}))}))},toggleCalendar:function(e){return nd(this,void 0,void 0,(function(){var t=this;return rd(this,(function(n){switch(n.label){case 0:return[4,ud.performOperation((function(){return nd(t,void 0,void 0,(function(){return rd(this,(function(t){switch(t.label){case 0:return[4,ud.calendars.toggle((function(t){return t.name===e}))];case 1:return t.sent(),[2]}}))}))}),"toggleCalendar: ".concat(e))];case 1:return n.sent(),[2]}}))}))},disableCalendar:function(e){return nd(this,void 0,void 0,(function(){var t=this;return rd(this,(function(n){switch(n.label){case 0:return[4,ud.performOperation((function(){return nd(t,void 0,void 0,(function(){return rd(this,(function(t){switch(t.label){case 0:return[4,ud.calendars.disable((function(t){return t.name===e}))];case 1:return t.sent(),[2]}}))}))}),"disableCalendar: ".concat(e))];case 1:return n.sent(),[2]}}))}))},disableAll:function(){return nd(this,void 0,void 0,(function(){var e=this;return rd(this,(function(t){switch(t.label){case 0:return[4,ud.performOperation((function(){return nd(e,void 0,void 0,(function(){return rd(this,(function(e){switch(e.label){case 0:return[4,ud.calendars.disable()];case 1:return e.sent(),[2]}}))}))}),"disableAll")];case 1:return t.sent(),[2]}}))}))},saveCalendarSelections:function(e){return nd(this,void 0,void 0,(function(){var t=this;return rd(this,(function(n){switch(n.label){case 0:return[4,ud.performOperation((function(){return nd(t,void 0,void 0,(function(){var t,n;return rd(this,(function(r){return(t=ud.groups=ud.groups||{}).__last_saved=t.__last_saved||[],(n=t.__last_saved.indexOf(e))>=0&&t.__last_saved.splice(n,1),t.__last_saved.unshift(e),t[e.toLowerCase()]=ud.calendars.filter((function(e){return e.isChecked()})).map((function(e){return e.id})),console.log("saved calendar group:",e,"=>",t[e.toLowerCase()]),ud._updated(),[2]}))}))}),"saveCalendarSelections: ".concat(e))];case 1:return n.sent(),[2]}}))}))},restoreCalendarSelections:function(){var e=ud.groups;if(e&&e.__last_saved&&e.__last_saved[0]){var t=e.__last_saved[0];ud.showGroup(t)}else console.warn("No saved calendar selections to restore")},Calendar:ld,CalendarDOM:id,CalendarList:sd,Overlay:ad};function cd(e,t,n){return nd(this,void 0,void 0,(function(){var r;return rd(this,(function(o){switch(o.label){case 0:return r=e.scrollTop,[4,pd(e,0)];case 1:return o.sent(),[4,fd(e,t,n)];case 2:return o.sent(),t.restoreOriginalScroll?[4,pd(e,r)]:[3,4];case 3:o.sent(),o.label=4;case 4:return[2]}}))}))}function dd(e){return new Promise((function(t){setTimeout(t,e)}))}function pd(e,t){return nd(this,arguments,void 0,(function(e,t,n){return void 0===n&&(n={}),rd(this,(function(r){return n=Object.assign({animate:!0,animateDuration:500},n),[2,new Promise((function(r){if(!n.animate)return e.scrollTop=t,void r();var o=e.scrollTop,a=t-o,i=performance.now();requestAnimationFrame((function t(l){var s=l-i,u=Math.min(s/n.animateDuration,1);e.scrollTop=o+a*u,u<1?requestAnimationFrame(t):r()}))}))]}))}))}function fd(e){return nd(this,arguments,void 0,(function(e,t,n){var r,o;return void 0===t&&(t={}),rd(this,(function(a){switch(a.label){case 0:t=Object.assign({scrollIncrement:50},t),hd("scrollThroughIncrement",{scrollTop:e.scrollTop,scrollHeight:e.scrollHeight,clientHeight:e.clientHeight,"scrollHeight-clientHeight":e.scrollHeight-e.clientHeight}),r=function(e,t){return Math.abs(e-t)<2e-6},o=-1,a.label=1;case 1:return r(o,e.scrollTop)?[3,3]:(hd("scrollThroughIncrement","looping",{scrollTop:e.scrollTop,scrollHeight:e.scrollHeight,clientHeight:e.clientHeight,"scrollHeight-clientHeight":e.scrollHeight-e.clientHeight}),hd("scrollThroughIncrement","scrolling to",e.scrollTop+t.scrollIncrement),[4,pd(e,e.scrollTop+t.scrollIncrement,{animate:!1})]);case 2:return a.sent(),hd("scrollThroughIncrement",'should equal "scroll to" above:',e.scrollTop),o=e.scrollTop,"function"==typeof n&&n()?[3,3]:(hd("scrollThroughIncrement","scrollTop after increment callback: ",e.scrollTop),[3,1]);case 3:return hd("scrollThroughIncrement","doing last scan"),"function"==typeof n&&n(),[2]}}))}))}var md=!1;function hd(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e[0]){var n="string"==typeof e[0]?e.shift():"";md&&console.log.apply(console,od(["%c[DEBUG:".concat(n,"]"),"color:#099"],e,!1))}}!function(){nd(this,void 0,void 0,(function(){var e;return rd(this,(function(t){switch(t.label){case 0:return[4,sd.getInstance()];case 1:return e=t.sent(),ud.calendars=e,window.CalendarManager=window.CalendarManager||ud,console.log("CalendarManager loaded"),[2]}}))}))}();const gd=ud;var yd=function(){return yd=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},yd.apply(this,arguments)},vd=(0,t.createContext)(null);function bd(){var e=(0,t.useContext)(vd);if(!e)throw new Error("useCalendarContext must be used within a CalendarProvider");return e}function wd(n){var r=n.children,o=(0,t.useState)(gd.groups||{}),a=o[0],i=o[1],l=(0,t.useState)([]),s=l[0],u=l[1],c={groups:a,dropdownItems:s,refreshGroupsState:function(){i(yd({},gd.groups));var e=[];for(var t in gd.groups)t.startsWith("__")||t.startsWith("saved_")||e.push({text:t,value:t});u(e)}};return(0,e.jsx)(vd.Provider,{value:c,children:r})}var Sd=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))},xd=function(e,t){var n,r,o,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},i=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return i.next=l(0),i.throw=l(1),i.return=l(2),"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},kd=o(411),Cd=o.n(kd);o(610);function Ed(e){return e.substring(2).toLowerCase()}function Pd(e){const{children:n,disableReactTree:r=!1,mouseEvent:o="onClick",onClickAway:a,touchEvent:i="onTouchEnd"}=e,l=t.useRef(!1),s=t.useRef(null),u=t.useRef(!1),c=t.useRef(!1);t.useEffect((()=>(setTimeout((()=>{u.current=!0}),0),()=>{u.current=!1})),[]);const d=uo(Vo(n),s),p=Ta((e=>{const t=c.current;c.current=!1;const n=yo(s.current);if(!u.current||!s.current||"clientX"in e&&function(e,t){return t.documentElement.clientWidth<e.clientX||t.documentElement.clientHeight<e.clientY}(e,n))return;if(l.current)return void(l.current=!1);let o;o=e.composedPath?e.composedPath().includes(s.current):!n.documentElement.contains(e.target)||s.current.contains(e.target),o||!r&&t||a(e)})),f=e=>t=>{c.current=!0;const r=n.props[e];r&&r(t)},m={ref:d};return!1!==i&&(m[i]=f(i)),t.useEffect((()=>{if(!1!==i){const e=Ed(i),t=yo(s.current),n=()=>{l.current=!0};return t.addEventListener(e,p),t.addEventListener("touchmove",n),()=>{t.removeEventListener(e,p),t.removeEventListener("touchmove",n)}}}),[p,i]),!1!==o&&(m[o]=f(o)),t.useEffect((()=>{if(!1!==o){const e=Ed(o),t=yo(s.current);return t.addEventListener(e,p),()=>{t.removeEventListener(e,p)}}}),[p,o]),t.cloneElement(n,m)}function Td(e){return c("MuiSnackbarContent",e)}wo("MuiSnackbarContent",["root","message","action"]);const Od=no(Wa,{name:"MuiSnackbarContent",slot:"Root"})(ba((({theme:e})=>{const t="light"===e.palette.mode?.8:.98,n=Nn(e.palette.background.default,t);return{...e.typography.body2,color:e.vars?e.vars.palette.SnackbarContent.color:e.palette.getContrastText(n),backgroundColor:e.vars?e.vars.palette.SnackbarContent.bg:n,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,flexGrow:1,[e.breakpoints.up("sm")]:{flexGrow:"initial",minWidth:288}}}))),Rd=no("div",{name:"MuiSnackbarContent",slot:"Message"})({padding:"8px 0"}),Md=no("div",{name:"MuiSnackbarContent",slot:"Action"})({display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}),zd=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiSnackbarContent"}),{action:o,className:a,message:l,role:s="alert",...u}=r,c=r,p=(e=>{const{classes:t}=e;return d({root:["root"],action:["action"],message:["message"]},Td,t)})(c);return(0,e.jsxs)(Od,{role:s,square:!0,elevation:6,className:i(p.root,a),ownerState:c,ref:n,...u,children:[(0,e.jsx)(Rd,{className:p.message,ownerState:c,children:l}),o?(0,e.jsx)(Md,{className:p.action,ownerState:c,children:o}):null]})}));function Ad(e){return c("MuiSnackbar",e)}wo("MuiSnackbar",["root","anchorOriginTopCenter","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft"]);const Nd=no("div",{name:"MuiSnackbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`anchorOrigin${wn(n.anchorOrigin.vertical)}${wn(n.anchorOrigin.horizontal)}`]]}})(ba((({theme:e})=>({zIndex:(e.vars||e).zIndex.snackbar,position:"fixed",display:"flex",left:8,right:8,justifyContent:"center",alignItems:"center",variants:[{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical,style:{top:8,[e.breakpoints.up("sm")]:{top:24}}},{props:({ownerState:e})=>"top"!==e.anchorOrigin.vertical,style:{bottom:8,[e.breakpoints.up("sm")]:{bottom:24}}},{props:({ownerState:e})=>"left"===e.anchorOrigin.horizontal,style:{justifyContent:"flex-start",[e.breakpoints.up("sm")]:{left:24,right:"auto"}}},{props:({ownerState:e})=>"right"===e.anchorOrigin.horizontal,style:{justifyContent:"flex-end",[e.breakpoints.up("sm")]:{right:24,left:"auto"}}},{props:({ownerState:e})=>"center"===e.anchorOrigin.horizontal,style:{[e.breakpoints.up("sm")]:{left:"50%",right:"auto",transform:"translateX(-50%)"}}}]})))),Ld=t.forwardRef((function(n,r){const o=oo({props:n,name:"MuiSnackbar"}),a=oa(),i={enter:a.transitions.duration.enteringScreen,exit:a.transitions.duration.leavingScreen},{action:l,anchorOrigin:{vertical:s,horizontal:u}={vertical:"bottom",horizontal:"left"},autoHideDuration:c=null,children:p,className:f,ClickAwayListenerProps:m,ContentProps:h,disableWindowBlurListener:g=!1,message:y,onBlur:v,onClose:b,onFocus:w,onMouseEnter:S,onMouseLeave:x,open:k,resumeHideDuration:C,slots:E={},slotProps:P={},TransitionComponent:T,transitionDuration:O=i,TransitionProps:{onEnter:R,onExited:M,...z}={},...A}=o,N={...o,anchorOrigin:{vertical:s,horizontal:u},autoHideDuration:c,disableWindowBlurListener:g,TransitionComponent:T,transitionDuration:O},L=(e=>{const{classes:t,anchorOrigin:n}=e;return d({root:["root",`anchorOrigin${wn(n.vertical)}${wn(n.horizontal)}`]},Ad,t)})(N),{getRootProps:$,onClickAway:_}=function(e={}){const{autoHideDuration:n=null,disableWindowBlurListener:r=!1,onClose:o,open:a,resumeHideDuration:i}=e,l=Ho();t.useEffect((()=>{if(a)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){e.defaultPrevented||"Escape"===e.key&&o?.(e,"escapeKeyDown")}}),[a,o]);const s=Ta(((e,t)=>{o?.(e,t)})),u=Ta((e=>{o&&null!=e&&l.start(e,(()=>{s(null,"timeout")}))}));t.useEffect((()=>(a&&u(n),l.clear)),[a,n,u,l]);const c=l.clear,d=t.useCallback((()=>{null!=n&&u(null!=i?i:.5*n)}),[n,i,u]),p=e=>t=>{const n=e.onFocus;n?.(t),c()},f=e=>t=>{const n=e.onMouseEnter;n?.(t),c()},m=e=>t=>{const n=e.onMouseLeave;n?.(t),d()};return t.useEffect((()=>{if(!r&&a)return window.addEventListener("focus",d),window.addEventListener("blur",c),()=>{window.removeEventListener("focus",d),window.removeEventListener("blur",c)}}),[r,a,d,c]),{getRootProps:(t={})=>{const n={...po(e),...po(t)};return{role:"presentation",...t,...n,onBlur:(r=n,e=>{const t=r.onBlur;t?.(e),d()}),onFocus:p(n),onMouseEnter:f(n),onMouseLeave:m(n)};var r},onClickAway:e=>{o?.(e,"clickaway")}}}({...N}),[I,j]=t.useState(!0),F={slots:{transition:T,...E},slotProps:{content:h,clickAwayListener:m,transition:z,...P}},[D,B]=wa("root",{ref:r,className:[L.root,f],elementType:Nd,getSlotProps:$,externalForwardedProps:{...F,...A},ownerState:N}),[W,{ownerState:H,...V}]=wa("clickAwayListener",{elementType:Pd,externalForwardedProps:F,getSlotProps:e=>({onClickAway:(...t)=>{const n=t[0];e.onClickAway?.(...t),n?.defaultMuiPrevented||_(...t)}}),ownerState:N}),[U,q]=wa("content",{elementType:zd,shouldForwardComponentProp:!0,externalForwardedProps:F,additionalProps:{message:y,action:l},ownerState:N}),[K,G]=wa("transition",{elementType:da,externalForwardedProps:F,getSlotProps:e=>({onEnter:(...t)=>{e.onEnter?.(...t),((e,t)=>{j(!1),R&&R(e,t)})(...t)},onExited:(...t)=>{e.onExited?.(...t),(e=>{j(!0),M&&M(e)})(...t)}}),additionalProps:{appear:!0,in:k,timeout:O,direction:"top"===s?"down":"up"},ownerState:N});return!k&&I?null:(0,e.jsx)(W,{...V,...E.clickAwayListener&&{ownerState:H},children:(0,e.jsx)(D,{...B,children:(0,e.jsx)(K,{...G,children:p||(0,e.jsx)(U,{...q})})})})})),$d=Ld;function _d(e){return c("MuiAlert",e)}const Id=wo("MuiAlert",["root","action","icon","message","filled","colorSuccess","colorInfo","colorWarning","colorError","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]),jd=fc((0,e.jsx)("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"})),Fd=fc((0,e.jsx)("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"})),Dd=fc((0,e.jsx)("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})),Bd=fc((0,e.jsx)("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"})),Wd=fc((0,e.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"})),Hd=no(Wa,{name:"MuiAlert",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${wn(n.color||n.severity)}`]]}})(ba((({theme:e})=>{const t="light"===e.palette.mode?Rn:zn,n="light"===e.palette.mode?zn:Rn;return{...e.typography.body2,backgroundColor:"transparent",display:"flex",padding:"6px 16px",variants:[...Object.entries(e.palette).filter(ps(["light"])).map((([r])=>({props:{colorSeverity:r,variant:"standard"},style:{color:e.vars?e.vars.palette.Alert[`${r}Color`]:t(e.palette[r].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[`${r}StandardBg`]:n(e.palette[r].light,.9),[`& .${Id.icon}`]:e.vars?{color:e.vars.palette.Alert[`${r}IconColor`]}:{color:e.palette[r].main}}}))),...Object.entries(e.palette).filter(ps(["light"])).map((([n])=>({props:{colorSeverity:n,variant:"outlined"},style:{color:e.vars?e.vars.palette.Alert[`${n}Color`]:t(e.palette[n].light,.6),border:`1px solid ${(e.vars||e).palette[n].light}`,[`& .${Id.icon}`]:e.vars?{color:e.vars.palette.Alert[`${n}IconColor`]}:{color:e.palette[n].main}}}))),...Object.entries(e.palette).filter(ps(["dark"])).map((([t])=>({props:{colorSeverity:t,variant:"filled"},style:{fontWeight:e.typography.fontWeightMedium,...e.vars?{color:e.vars.palette.Alert[`${t}FilledColor`],backgroundColor:e.vars.palette.Alert[`${t}FilledBg`]}:{backgroundColor:"dark"===e.palette.mode?e.palette[t].dark:e.palette[t].main,color:e.palette.getContrastText(e.palette[t].main)}}})))]}}))),Vd=no("div",{name:"MuiAlert",slot:"Icon"})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),Ud=no("div",{name:"MuiAlert",slot:"Message"})({padding:"8px 0",minWidth:0,overflow:"auto"}),qd=no("div",{name:"MuiAlert",slot:"Action"})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),Kd={success:(0,e.jsx)(jd,{fontSize:"inherit"}),warning:(0,e.jsx)(Fd,{fontSize:"inherit"}),error:(0,e.jsx)(Dd,{fontSize:"inherit"}),info:(0,e.jsx)(Bd,{fontSize:"inherit"})},Gd=t.forwardRef((function(t,n){const r=oo({props:t,name:"MuiAlert"}),{action:o,children:a,className:l,closeText:s="Close",color:u,components:c={},componentsProps:p={},icon:f,iconMapping:m=Kd,onClose:h,role:g="alert",severity:y="success",slotProps:v={},slots:b={},variant:w="standard",...S}=r,x={...r,color:u,severity:y,variant:w,colorSeverity:u||y},k=(e=>{const{variant:t,color:n,severity:r,classes:o}=e;return d({root:["root",`color${wn(n||r)}`,`${t}${wn(n||r)}`,`${t}`],icon:["icon"],message:["message"],action:["action"]},_d,o)})(x),C={slots:{closeButton:c.CloseButton,closeIcon:c.CloseIcon,...b},slotProps:{...p,...v}},[E,P]=wa("root",{ref:n,shouldForwardComponentProp:!0,className:i(k.root,l),elementType:Hd,externalForwardedProps:{...C,...S},ownerState:x,additionalProps:{role:g,elevation:0}}),[T,O]=wa("icon",{className:k.icon,elementType:Vd,externalForwardedProps:C,ownerState:x}),[R,M]=wa("message",{className:k.message,elementType:Ud,externalForwardedProps:C,ownerState:x}),[z,A]=wa("action",{className:k.action,elementType:qd,externalForwardedProps:C,ownerState:x}),[N,L]=wa("closeButton",{elementType:Xc,externalForwardedProps:C,ownerState:x}),[$,_]=wa("closeIcon",{elementType:Wd,externalForwardedProps:C,ownerState:x});return(0,e.jsxs)(E,{...P,children:[!1!==f?(0,e.jsx)(T,{...O,children:f||m[y]||Kd[y]}):null,(0,e.jsx)(R,{...M,children:a}),null!=o?(0,e.jsx)(z,{...A,children:o}):null,null==o&&h?(0,e.jsx)(z,{...A,children:(0,e.jsx)(N,{size:"small","aria-label":s,title:s,color:"inherit",onClick:h,...L,children:(0,e.jsx)($,{fontSize:"small",..._})})}):null]})}));function Qd(t){var n=t.message,r=t.open,o=t.onClose;return(0,e.jsx)($d,{open:r,autoHideDuration:5e3,onClose:o,children:(0,e.jsx)(Gd,{onClose:o,severity:"info",children:n})})}function Xd(t){var n=t.buttons;return(0,e.jsx)("div",{children:n.map((function(t){return(0,e.jsx)($s,{text:t.text,tooltip:t.tooltip,onClick:t.click},t.text)}))})}function Yd(){var n,r=bd().dropdownItems,o=function(){var e=(0,t.useState)(""),n=e[0],r=e[1],o=(0,t.useState)(!1),a=o[0],i=o[1];return{message:n,showMessage:function(e){r(e),i(!0)},handleCloseSnackbar:function(){i(!1)},showSnackbar:a}}(),a=o.message,i=o.showMessage,l=o.handleCloseSnackbar,s=o.showSnackbar,u=function(e){var t=this,n=bd().refreshGroupsState;return{enableCalendar:function(){return Sd(t,void 0,void 0,(function(){var t;return xd(this,(function(n){switch(n.label){case 0:return(t=prompt("Calendar name to enable:"))?[4,gd.enableCalendar(t)]:[3,2];case 1:n.sent(),e("Enabled calendar: ".concat(t)),n.label=2;case 2:return[2]}}))}))},toggleCalendar:function(){return Sd(t,void 0,void 0,(function(){var t;return xd(this,(function(n){switch(n.label){case 0:return(t=prompt("Calendar name to toggle:"))?[4,gd.toggleCalendar(t)]:[3,2];case 1:n.sent(),e("Toggled calendar: ".concat(t)),n.label=2;case 2:return[2]}}))}))},saveAs:function(){return Sd(t,void 0,void 0,(function(){var t;return xd(this,(function(r){switch(r.label){case 0:return(t=prompt("Save calendar selection as:"))?[4,gd.saveCalendarSelections(t)]:[3,2];case 1:r.sent(),n(),e("Saved calendar selection as: ".concat(t)),r.label=2;case 2:return[2]}}))}))},restore:function(){return Sd(t,void 0,void 0,(function(){return xd(this,(function(t){return gd.restoreCalendarSelections(),e("Restored last saved calendar selection"),[2]}))}))},clear:function(){return Sd(t,void 0,void 0,(function(){return xd(this,(function(t){switch(t.label){case 0:return[4,gd.disableAll()];case 1:return t.sent(),e("Disabled all calendars"),[2]}}))}))},handleImport:function(t){gd.setGroups(t),n(),e("Imported presets successfully")},handleItemSelect:function(t){gd.showGroup(t.value),e("Loaded preset: ".concat(t.text))},handleItemDelete:function(t){confirm('Delete preset "'.concat(t.text,'"?'))&&(gd.deleteGroup(t.value),n(),e("Deleted preset: ".concat(t.text)))}}}(i);(function(e){(0,t.useEffect)((function(){return function(){Cd().bindGlobal(["ctrl+alt","alt+ctrl"],(function(){return document.querySelectorAll(".kbd-hint").forEach((function(e){e.style.boxShadow="inset 0 -2px 0 white, inset 0 -4px 0 red"})),!1}),"keydown"),Cd().bindGlobal("ctrl",(function(){document.querySelectorAll(".kbd-hint").forEach((function(e){e.style.boxShadow=""}))}),"keyup");var t={e:function(){return e.enableCalendar()},t:function(){return e.toggleCalendar()},s:function(){return e.saveAs()},r:function(){return e.restore()},c:function(){return e.clear()},p:function(){var e;return null===(e=document.querySelector('[data-shortcut="p"]'))||void 0===e?void 0:e.dispatchEvent(new MouseEvent("click"))},x:function(){var e;return null===(e=document.querySelector('[data-shortcut="x"]'))||void 0===e?void 0:e.dispatchEvent(new MouseEvent("click"))},i:function(){var e;return null===(e=document.querySelector('[data-shortcut="i"]'))||void 0===e?void 0:e.dispatchEvent(new MouseEvent("click"))}};Object.entries(t).forEach((function(e){var t=e[0],n=e[1];Cd().bind("ctrl+alt+".concat(t),(function(){return n(),!1}))}))}(),function(){Cd().reset()}}),[e])})(u),n=bd().refreshGroupsState,(0,t.useEffect)((function(){try{chrome&&chrome.storage&&chrome.storage.sync.get(["gcSelector_groups"],(function(e){if(e.gcSelector_groups)try{var t=JSON.parse(e.gcSelector_groups);gd.setGroups(t),n()}catch(e){console.error("Error parsing saved groups:",e)}}))}catch(e){console.warn("Not running in Chrome extension environment")}var e=gd.onGroupsChange;return gd.onGroupsChange=function(){n(),function(){try{if(chrome&&chrome.storage){var e=JSON.stringify(gd.exportGroups(!0));chrome.storage.sync.set({gcSelector_groups:e})}}catch(e){console.warn("Unable to save to Chrome storage:",e)}}(),e&&e()},function(){gd.onGroupsChange=e}}),[n]);var c=[{text:"&Enable",tooltip:"Enable a calendar by name",click:u.enableCalendar},{text:"&Toggle",tooltip:"Toggle a calendar by name",click:u.toggleCalendar},{text:"&Save as",tooltip:"Save current selection as a preset",click:u.saveAs},{text:"&Restore",tooltip:"Restore last saved preset",click:u.restore},{text:"&Clear All",tooltip:"Disable all calendars",click:u.clear}];return(0,e.jsxs)(io,{maxWidth:!1,children:[(0,e.jsxs)("div",{children:[(0,e.jsx)(Xd,{buttons:c}),(0,e.jsx)("div",{style:{display:"inline-block",marginLeft:"8px"},children:(0,e.jsx)(Jc,{items:r,onItemSelect:u.handleItemSelect,onItemDelete:u.handleItemDelete})})]}),(0,e.jsx)(Qd,{message:a,open:s,onClose:l})]})}const Zd=function(){return(0,e.jsx)(wd,{children:(0,e.jsx)(Yd,{})})};function Jd(){var n;if(console.log("Injecting React app into Google Calendar"),document.querySelector("#calendar-container")||document.querySelector('[role="main"]')||document.querySelector("#maincell")){var o=document.querySelectorAll("header > div:nth-child(2) > div:nth-child(2) > div:nth-child(1)")[0];if(o){var a=document.createElement("div");a.id="google-calendar-selector-app",a.style.display="flex",a.style.alignItems="center",a.style.marginLeft="8px",null===(n=o.parentNode)||void 0===n||n.insertBefore(a,o.nextSibling),r.createRoot(a).render((0,e.jsx)(t.StrictMode,{children:(0,e.jsx)(Zd,{})}))}else console.error("Could not find Google Calendar header")}else console.error("Could not find Google Calendar container")}!function(){var e=new MutationObserver((function(t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if("childList"===o.type||"attributes"===o.type){var a=document.querySelector("#calendar-container")||document.querySelector('[role="main"]')||document.querySelector("#maincell"),i=document.querySelectorAll("header > div:nth-child(2) > div:nth-child(2) > div:nth-child(1)")[0];if(!document.getElementById("google-calendar-selector-app")&&a&&i)return e.disconnect(),void Jd()}}}));e.observe(document.body,{childList:!0,subtree:!0});var t=document.querySelector("#calendar-container")||document.querySelector('[role="main"]')||document.querySelector("#maincell"),n=document.querySelectorAll("header > div:nth-child(2) > div:nth-child(2) > div:nth-child(1)")[0];t&&n&&Jd()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,