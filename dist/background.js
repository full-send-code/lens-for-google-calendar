(()=>{"use strict";({721:function(){var e=this&&this.__spreadArray||function(e,n,o){if(o||2===arguments.length)for(var t,a=0,r=n.length;a<r;a++)!t&&a in n||(t||(t=Array.prototype.slice.call(n,0,a)),t[a]=n[a]);return e.concat(t||Array.prototype.slice.call(n))};function n(n,o){for(var t=[],a=2;a<arguments.length;a++)t[a-2]=arguments[a];var r="[Lens for Google Calendar Background]";switch(n){case"warn":console.warn.apply(console,e(["".concat(r," ").concat(o)],t,!1));break;case"error":console.error.apply(console,e(["".concat(r," ").concat(o)],t,!1));break;default:console.log.apply(console,e(["".concat(r," ").concat(o)],t,!1))}}n("log","Background script loaded");var o=new Map;chrome.runtime.onInstalled.addListener((function(e){if("install"===e.reason)n("log","Extension installed");else if("update"===e.reason){var o=chrome.runtime.getManifest().version;n("log","Extension updated to version ".concat(o))}})),chrome.tabs.onUpdated.addListener((function(e,n){"loading"===n.status&&o.delete(e)})),chrome.runtime.onMessage.addListener((function(e,t,a){var r;try{var s=null===(r=t.tab)||void 0===r?void 0:r.id;switch(n("log","Received message:",e,"from tab:",s),e.action){case"contentScriptLoaded":s&&(o.set(s,!0),n("log","Content script loaded in tab ".concat(s))),a({status:"acknowledged",timestamp:Date.now(),debug:!1});break;case"openOptions":chrome.runtime.openOptionsPage(),a({status:"success",action:"openedOptions"});break;default:a({status:"received",message:"Unknown action type"})}}catch(e){n("error","Error handling message",e),a({status:"error",error:String(e)})}return!0}))}})[721]()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,